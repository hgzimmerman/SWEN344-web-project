# Generated by carnix 0.7.2: carnix build
with import <nixpkgs> {};
let kernel = buildPlatform.parsed.kernel.name;
    abi = buildPlatform.parsed.abi.name;
    include = includedFiles: src: builtins.filterSource (path: type:
      lib.lists.any (f:
        let p = toString (src + ("/" + f)); in
        (path == p) || (type == "directory" && lib.strings.hasPrefix path p)
      ) includedFiles
    ) src;
    updateFeatures = f: up: functions: builtins.deepSeq f (lib.lists.foldl' (features: fun: fun features) (lib.attrsets.recursiveUpdate f up) functions);
    mapFeatures = features: map (fun: fun { features = features; });
    mkFeatures = feat: lib.lists.foldl (features: featureName:
      if feat.${featureName} or false then
        [ featureName ] ++ features
      else
        features
    ) [] (builtins.attrNames feat);
in
rec {
  authorization = f: authorization_0_1_0 { features = authorization_0_1_0_features { authorization_0_1_0 = f; }; };
  db = f: db_0_1_0 { features = db_0_1_0_features { db_0_1_0 = f; }; };
  pool = f: pool_0_1_0 { features = pool_0_1_0_features { pool_0_1_0 = f; }; };
  server = f: server_0_1_0 { features = server_0_1_0_features { server_0_1_0 = f; }; };
  testing_common = f: testing_common_0_1_0 { features = testing_common_0_1_0_features { testing_common_0_1_0 = f; }; };
  __all = [ (authorization {}) (db {}) (pool {}) (server {}) (testing_common {}) ];
  MacTypes_sys_2_1_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "MacTypes-sys";
    version = "2.1.0";
    authors = [ "George Burton <burtonageo@gmail.com>" ];
    sha256 = "03d1dkb1978pk5qqa5yrp5dr6vbnicmvpyw40rv0b8rva1bqnip8";
    inherit dependencies buildDependencies features;
  };
  aho_corasick_0_6_10_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "aho-corasick";
    version = "0.6.10";
    authors = [ "Andrew Gallant <jamslam@gmail.com>" ];
    sha256 = "0bhasxfpmfmz1460chwsx59vdld05axvmk1nbp3sd48xav3d108p";
    libName = "aho_corasick";
    crateBin = [ {  name = "aho-corasick-dot";  path = "src/main.rs"; } ];
    inherit dependencies buildDependencies features;
  };
  ansi_term_0_11_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "ansi_term";
    version = "0.11.0";
    authors = [ "ogham@bsago.me" "Ryan Scheel (Havvy) <ryan.havvy@gmail.com>" "Josh Triplett <josh@joshtriplett.org>" ];
    sha256 = "08fk0p2xvkqpmz3zlrwnf6l8sj2vngw464rvzspzp31sbgxbwm4v";
    inherit dependencies buildDependencies features;
  };
  antidote_1_0_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "antidote";
    version = "1.0.0";
    authors = [ "Steven Fackler <sfackler@gmail.com>" ];
    sha256 = "1x2wgaw603jcjwsfvc8s2rpaqjv0aqj8mvws2ahhkvfnwkdf7icw";
    inherit dependencies buildDependencies features;
  };
  apply_0_2_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "apply";
    version = "0.2.2";
    authors = [ "George Burton <burtonageo@gmail.com>" ];
    sha256 = "0wym8ji4k7q7b9crnpkkqyln6mdyq8y01wa33cmp849yhccdv586";
    inherit dependencies buildDependencies features;
  };
  arrayvec_0_4_10_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "arrayvec";
    version = "0.4.10";
    authors = [ "bluss" ];
    sha256 = "0qbh825i59w5wfdysqdkiwbwkrsy7lgbd4pwbyb8pxx8wc36iny8";
    inherit dependencies buildDependencies features;
  };
  atty_0_2_11_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "atty";
    version = "0.2.11";
    authors = [ "softprops <d.tangren@gmail.com>" ];
    sha256 = "0by1bj2km9jxi4i4g76zzi76fc2rcm9934jpnyrqd95zw344pb20";
    inherit dependencies buildDependencies features;
  };
  authorization_0_1_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "authorization";
    version = "0.1.0";
    authors = [ "Henry Zimmerman <zimhen7@gmail.com>" ];
    src = ./.;
    workspace_member = "/home/hzimmerman/class/weeb_development/group_project/backend/auth";
    inherit dependencies buildDependencies features;
  };
  autocfg_0_1_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "autocfg";
    version = "0.1.2";
    authors = [ "Josh Stone <cuviper@gmail.com>" ];
    sha256 = "0dv81dwnp1al3j4ffz007yrjv4w1c7hw09gnf0xs3icxiw6qqfs3";
    inherit dependencies buildDependencies features;
  };
  base64_0_9_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "base64";
    version = "0.9.3";
    authors = [ "Alice Maz <alice@alicemaz.com>" "Marshall Pierce <marshall@mpierce.org>" ];
    sha256 = "11hhz8ln4zbpn2h2gm9fbbb9j254wrd4fpmddlyah2rrnqsmmqkd";
    inherit dependencies buildDependencies features;
  };
  base64_0_10_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "base64";
    version = "0.10.1";
    authors = [ "Alice Maz <alice@alicemaz.com>" "Marshall Pierce <marshall@mpierce.org>" ];
    sha256 = "1zz3jq619hahla1f70ra38818b5n8cp4iilij81i90jq6z7hlfhg";
    inherit dependencies buildDependencies features;
  };
  bitflags_1_0_4_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "bitflags";
    version = "1.0.4";
    authors = [ "The Rust Project Developers" ];
    sha256 = "1g1wmz2001qmfrd37dnd5qiss5njrw26aywmg6yhkmkbyrhjxb08";
    inherit dependencies buildDependencies features;
  };
  block_buffer_0_7_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "block-buffer";
    version = "0.7.0";
    authors = [ "RustCrypto Developers" ];
    sha256 = "06m0nbam681zjqsy4j2k3jnvjpwhhgrg2rplzwcnkglbjqf125f9";
    inherit dependencies buildDependencies features;
  };
  block_padding_0_1_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "block-padding";
    version = "0.1.3";
    authors = [ "RustCrypto Developers" ];
    sha256 = "0215kqxwgs5bzrpykg86wz3ix77lnci666b724dxb0iln91ch2ag";
    inherit dependencies buildDependencies features;
  };
  byte_tools_0_3_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "byte-tools";
    version = "0.3.1";
    authors = [ "RustCrypto Developers" ];
    sha256 = "01hfp59bxq74glhfmhvm9wma2migq2kfmvcvqq5pssk5k52g8ja0";
    inherit dependencies buildDependencies features;
  };
  byteorder_1_3_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "byteorder";
    version = "1.3.1";
    authors = [ "Andrew Gallant <jamslam@gmail.com>" ];
    sha256 = "1dd46l7fvmxfq90kh6ip1ghsxzzcdybac8f0mh2jivsdv9vy8k4w";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  bytes_0_4_11_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "bytes";
    version = "0.4.11";
    authors = [ "Carl Lerche <me@carllerche.com>" ];
    sha256 = "1lk8bnxcd8shiizarf0n6ljmj1542n90jw6lz6i270gxl7rzplmh";
    inherit dependencies buildDependencies features;
  };
  cc_1_0_29_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "cc";
    version = "1.0.29";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "0s5wnrdhk7lpyr1c8g8lfvf8dimcf2mhz1f4x2qc8ips85sxlrmq";
    inherit dependencies buildDependencies features;
  };
  cfg_if_0_1_6_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "cfg-if";
    version = "0.1.6";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "11qrix06wagkplyk908i3423ps9m9np6c4vbcq81s9fyl244xv3n";
    inherit dependencies buildDependencies features;
  };
  chrono_0_4_6_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "chrono";
    version = "0.4.6";
    authors = [ "Kang Seonghoon <public+rust@mearie.org>" "Brandon W Maister <quodlibetor@gmail.com>" ];
    sha256 = "0cxgqgf4lknsii1k806dpmzapi2zccjpa350ns5wpb568mij096x";
    inherit dependencies buildDependencies features;
  };
  clap_2_32_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "clap";
    version = "2.32.0";
    authors = [ "Kevin K. <kbknapp@gmail.com>" ];
    sha256 = "1hdjf0janvpjkwrjdjx1mm2aayzr54k72w6mriyr0n5anjkcj1lx";
    inherit dependencies buildDependencies features;
  };
  cloudabi_0_0_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "cloudabi";
    version = "0.0.3";
    authors = [ "Nuxi (https://nuxi.nl/) and contributors" ];
    sha256 = "1z9lby5sr6vslfd14d6igk03s7awf91mxpsfmsp3prxbxlk0x7h5";
    libPath = "cloudabi.rs";
    inherit dependencies buildDependencies features;
  };
  core_foundation_0_5_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "core-foundation";
    version = "0.5.1";
    authors = [ "The Servo Project Developers" ];
    sha256 = "03s11z23rb1kk325c34rmsbd7k0l5rkzk4q6id55n174z28zqln1";
    inherit dependencies buildDependencies features;
  };
  core_foundation_sys_0_5_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "core-foundation-sys";
    version = "0.5.1";
    authors = [ "The Servo Project Developers" ];
    sha256 = "0qbrasll5nw1bgr071i8s8jc975d0y4qfysf868bh9xp0f6vcypa";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  crossbeam_0_6_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "crossbeam";
    version = "0.6.0";
    authors = [ "The Crossbeam Project Developers" ];
    sha256 = "1hsp7ljqhywz1ykdr23ggi33ds87lk0gg45mjlf0m5qd0399x2xf";
    inherit dependencies buildDependencies features;
  };
  crossbeam_channel_0_3_8_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "crossbeam-channel";
    version = "0.3.8";
    authors = [ "The Crossbeam Project Developers" ];
    sha256 = "0apm8why2qsgr8ykh9x677kc9ml7qp71mvirfkdzdn4c1jyqyyzm";
    inherit dependencies buildDependencies features;
  };
  crossbeam_deque_0_6_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "crossbeam-deque";
    version = "0.6.3";
    authors = [ "The Crossbeam Project Developers" ];
    sha256 = "07dahkh6rc09nzg7054rnmxhni263pi9arcyjyy822kg59c0lfz8";
    inherit dependencies buildDependencies features;
  };
  crossbeam_epoch_0_7_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "crossbeam-epoch";
    version = "0.7.1";
    authors = [ "The Crossbeam Project Developers" ];
    sha256 = "1n2p8rqsg0g8dws6kvjgi5jsbnd42l45dklnzc8vihjcxa6712bg";
    inherit dependencies buildDependencies features;
  };
  crossbeam_utils_0_6_5_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "crossbeam-utils";
    version = "0.6.5";
    authors = [ "The Crossbeam Project Developers" ];
    sha256 = "1z7wgcl9d22r2x6769r5945rnwf3jqfrrmb16q7kzk292r1d4rdg";
    inherit dependencies buildDependencies features;
  };
  db_0_1_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "db";
    version = "0.1.0";
    authors = [ "Henry Zimmerman <zimhen7@gmail.com>" ];
    src = ./.;
    workspace_member = "/home/hzimmerman/class/weeb_development/group_project/backend/db";
    inherit dependencies buildDependencies features;
  };
  diesel_1_4_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "diesel";
    version = "1.4.1";
    authors = [ "Sean Griffin <sean@seantheprogrammer.com>" ];
    sha256 = "1awsh3bd55ddq3wp7x52cwybs8jsdp5i28vk74529jdy9bapyfsi";
    inherit dependencies buildDependencies features;
  };
  diesel_derives_1_4_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "diesel_derives";
    version = "1.4.0";
    authors = [ "Sean Griffin <sean@seantheprogrammer.com>" ];
    sha256 = "0glcvgn8vl60nw6xm0q13ljfcjlhg7j9pb8lnc06zfik8qvy27lz";
    procMacro = true;
    inherit dependencies buildDependencies features;
  };
  digest_0_8_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "digest";
    version = "0.8.0";
    authors = [ "RustCrypto Developers" ];
    sha256 = "1bsddd8vdmncmprks8b392yccf132wjwzrcy5wdy1kh05qm23il8";
    inherit dependencies buildDependencies features;
  };
  dtoa_0_4_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "dtoa";
    version = "0.4.3";
    authors = [ "David Tolnay <dtolnay@gmail.com>" ];
    sha256 = "1xysdxdm24sk5ysim7lps4r2qaxfnj0sbakhmps4d42yssx30cw8";
    inherit dependencies buildDependencies features;
  };
  env_logger_0_6_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "env_logger";
    version = "0.6.0";
    authors = [ "The Rust Project Developers" ];
    sha256 = "1k2v2wz2725c7rrxzc05x2jifw3frp0fnsr0p8r4n4jj9j12bkp9";
    inherit dependencies buildDependencies features;
  };
  fake_simd_0_1_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "fake-simd";
    version = "0.1.2";
    authors = [ "The Rust-Crypto Project Developers" ];
    sha256 = "1a0f1j66nkwfy17s06vm2bn9vh8vy8llcijfhh9m10p58v08661a";
    inherit dependencies buildDependencies features;
  };
  fnv_1_0_6_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "fnv";
    version = "1.0.6";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "128mlh23y3gg6ag5h8iiqlcbl59smisdzraqy88ldrf75kbw27ip";
    libPath = "lib.rs";
    inherit dependencies buildDependencies features;
  };
  foreign_types_0_3_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "foreign-types";
    version = "0.3.2";
    authors = [ "Steven Fackler <sfackler@gmail.com>" ];
    sha256 = "105n8sp2djb1s5lzrw04p7ss3dchr5qa3canmynx396nh3vwm2p8";
    inherit dependencies buildDependencies features;
  };
  foreign_types_shared_0_1_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "foreign-types-shared";
    version = "0.1.1";
    authors = [ "Steven Fackler <sfackler@gmail.com>" ];
    sha256 = "0b6cnvqbflws8dxywk4589vgbz80049lz4x1g9dfy4s1ppd3g4z5";
    inherit dependencies buildDependencies features;
  };
  frank_jwt_3_1_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "frank_jwt";
    version = "3.1.0";
    authors = [ "Alex Maslakov <me@gildedhonour.com>, <abc@nothingness.xyz>" ];
    sha256 = "1kqi6wcsk96chf1p4qfnbkmvpdb91wi0v53k5mp7wvdmaqwgj6zl";
    inherit dependencies buildDependencies features;
  };
  fuchsia_cprng_0_1_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "fuchsia-cprng";
    version = "0.1.1";
    authors = [ "Erick Tryzelaar <etryzelaar@google.com>" ];
    sha256 = "07apwv9dj716yjlcj29p94vkqn5zmfh7hlrqvrjx3wzshphc95h9";
    inherit dependencies buildDependencies features;
  };
  fuchsia_zircon_0_3_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "fuchsia-zircon";
    version = "0.3.3";
    authors = [ "Raph Levien <raph@google.com>" ];
    sha256 = "0jrf4shb1699r4la8z358vri8318w4mdi6qzfqy30p2ymjlca4gk";
    inherit dependencies buildDependencies features;
  };
  fuchsia_zircon_sys_0_3_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "fuchsia-zircon-sys";
    version = "0.3.3";
    authors = [ "Raph Levien <raph@google.com>" ];
    sha256 = "08jp1zxrm9jbrr6l26bjal4dbm8bxfy57ickdgibsqxr1n9j3hf5";
    inherit dependencies buildDependencies features;
  };
  futures_0_1_25_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "futures";
    version = "0.1.25";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "1gdn9z3mi3jjzbxgvawqh90895130c3ydks55rshja0ncpn985q3";
    inherit dependencies buildDependencies features;
  };
  futures_cpupool_0_1_8_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "futures-cpupool";
    version = "0.1.8";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "0ficd31n5ljiixy6x0vjglhq4fp0v1p4qzxm3v6ymsrb3z080l5c";
    inherit dependencies buildDependencies features;
  };
  generic_array_0_12_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "generic-array";
    version = "0.12.0";
    authors = [ "Bartłomiej Kamiński <fizyk20@gmail.com>" "Aaron Trent <novacrazy@gmail.com>" ];
    sha256 = "12fjpkx1ilqlmynis45g0gh69zkad6jnsc589j64z3idk18lvv91";
    libName = "generic_array";
    inherit dependencies buildDependencies features;
  };
  h2_0_1_16_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "h2";
    version = "0.1.16";
    authors = [ "Carl Lerche <me@carllerche.com>" ];
    sha256 = "1c50yfizd5x9hdcnj07bjlaa1wjzqlkxqjf89a15jq6j39i24r04";
    inherit dependencies buildDependencies features;
  };
  headers_0_2_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "headers";
    version = "0.2.1";
    authors = [ "Sean McArthur <sean@seanmonstar.com>" ];
    sha256 = "12172njc6fkm67zdrnrb3gfhlybbvwmvzy91yzwvdwk4kfybnzam";
    inherit dependencies buildDependencies features;
  };
  headers_core_0_1_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "headers-core";
    version = "0.1.0";
    authors = [ "Sean McArthur <sean@seanmonstar.com>" ];
    sha256 = "19xh01dm1x73jcbfzxwyjhaq1qca2qnn47p61370hhciba5gkvkv";
    inherit dependencies buildDependencies features;
  };
  headers_derive_0_1_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "headers-derive";
    version = "0.1.0";
    authors = [ "Sean McArthur <sean@seanmonstar.com>" ];
    sha256 = "0fwvcq0w3d54dwklyyqriqk8cqkr90c5g5n48jd8h3prmvch9yih";
    libName = "headers_derive";
    procMacro = true;
    inherit dependencies buildDependencies features;
  };
  http_0_1_15_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "http";
    version = "0.1.15";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" "Carl Lerche <me@carllerche.com>" "Sean McArthur <sean@seanmonstar.com>" ];
    sha256 = "0h93aig6l3wxjisa6iy9glb3qiddy8528i8wvvpn0n3y8wa31h5d";
    inherit dependencies buildDependencies features;
  };
  httparse_1_3_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "httparse";
    version = "1.3.3";
    authors = [ "Sean McArthur <sean@seanmonstar.com>" ];
    sha256 = "1jymxy4bl0mzgp2dx0pzqzbr72sw5jmr5sjqiry4xr88z4z9qlyx";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  humantime_1_2_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "humantime";
    version = "1.2.0";
    authors = [ "Paul Colomiets <paul@colomiets.name>" ];
    sha256 = "0wlcxzz2mhq0brkfbjb12hc6jm17bgm8m6pdgblw4qjwmf26aw28";
    libPath = "src/lib.rs";
    inherit dependencies buildDependencies features;
  };
  hyper_0_12_24_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "hyper";
    version = "0.12.24";
    authors = [ "Sean McArthur <sean@seanmonstar.com>" ];
    sha256 = "0y1wl8ijg3a6r3c3061w73r9w5472bamcq487c1vcm7z5651in31";
    inherit dependencies buildDependencies features;
  };
  hyper_tls_0_3_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "hyper-tls";
    version = "0.3.1";
    authors = [ "Sean McArthur <sean@seanmonstar.com>" ];
    sha256 = "0sk46mmnccxgxwn62rl5m58c2ivwgxgd590cjwg60pjkhx9qn5r7";
    inherit dependencies buildDependencies features;
  };
  idna_0_1_5_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "idna";
    version = "0.1.5";
    authors = [ "The rust-url developers" ];
    sha256 = "1gwgl19rz5vzi67rrhamczhxy050f5ynx4ybabfapyalv7z1qmjy";
    inherit dependencies buildDependencies features;
  };
  indexmap_1_0_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "indexmap";
    version = "1.0.2";
    authors = [ "bluss" "Josh Stone <cuviper@gmail.com>" ];
    sha256 = "18a0cn5xy3a7wswxg5lwfg3j4sh5blk28ykw0ysgr486djd353gf";
    inherit dependencies buildDependencies features;
  };
  input_buffer_0_2_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "input_buffer";
    version = "0.2.0";
    authors = [ "Alexey Galakhov <agalakhov@snapview.de>" ];
    sha256 = "19c8afpxrbcm34lvyh1sirjh7mksyy24fdm4y1zjamxzn3864ib7";
    inherit dependencies buildDependencies features;
  };
  iovec_0_1_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "iovec";
    version = "0.1.2";
    authors = [ "Carl Lerche <me@carllerche.com>" ];
    sha256 = "0vjymmb7wj4v4kza5jjn48fcdb85j3k37y7msjl3ifz0p9yiyp2r";
    inherit dependencies buildDependencies features;
  };
  itoa_0_4_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "itoa";
    version = "0.4.3";
    authors = [ "David Tolnay <dtolnay@gmail.com>" ];
    sha256 = "0zadimmdgvili3gdwxqg7ljv3r4wcdg1kkdfp9nl15vnm23vrhy1";
    inherit dependencies buildDependencies features;
  };
  kernel32_sys_0_2_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "kernel32-sys";
    version = "0.2.2";
    authors = [ "Peter Atashian <retep998@gmail.com>" ];
    sha256 = "1lrw1hbinyvr6cp28g60z97w32w8vsk6pahk64pmrv2fmby8srfj";
    libName = "kernel32";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  lazy_static_1_2_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "lazy_static";
    version = "1.2.0";
    authors = [ "Marvin Löbel <loebel.marvin@gmail.com>" ];
    sha256 = "07p3b30k2akyr6xw08ggd5qiz5nw3vd3agggj360fcc1njz7d0ss";
    inherit dependencies buildDependencies features;
  };
  lazycell_1_2_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "lazycell";
    version = "1.2.1";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" "Nikita Pekin <contact@nikitapek.in>" ];
    sha256 = "1m4h2q9rgxrgc7xjnws1x81lrb68jll8w3pykx1a9bhr29q2mcwm";
    inherit dependencies buildDependencies features;
  };
  libc_0_2_48_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "libc";
    version = "0.2.48";
    authors = [ "The Rust Project Developers" ];
    sha256 = "1jnjd4g9ibs02gd7z81amj7p1xkari0ciwg9if285fxnml4lmwxs";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  lock_api_0_1_5_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "lock_api";
    version = "0.1.5";
    authors = [ "Amanieu d'Antras <amanieu@gmail.com>" ];
    sha256 = "132sidr5hvjfkaqm3l95zpcpi8yk5ddd0g79zf1ad4v65sxirqqm";
    inherit dependencies buildDependencies features;
  };
  log_0_4_6_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "log";
    version = "0.4.6";
    authors = [ "The Rust Project Developers" ];
    sha256 = "1nd8dl9mvc9vd6fks5d4gsxaz990xi6rzlb8ymllshmwi153vngr";
    inherit dependencies buildDependencies features;
  };
  matches_0_1_8_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "matches";
    version = "0.1.8";
    authors = [ "Simon Sapin <simon.sapin@exyr.org>" ];
    sha256 = "03hl636fg6xggy0a26200xs74amk3k9n0908rga2szn68agyz3cv";
    libPath = "lib.rs";
    inherit dependencies buildDependencies features;
  };
  memchr_2_2_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "memchr";
    version = "2.2.0";
    authors = [ "Andrew Gallant <jamslam@gmail.com>" "bluss" ];
    sha256 = "11vwg8iig9jyjxq3n1cq15g29ikzw5l7ar87md54k1aisjs0997p";
    inherit dependencies buildDependencies features;
  };
  memoffset_0_2_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "memoffset";
    version = "0.2.1";
    authors = [ "Gilad Naaman <gilad.naaman@gmail.com>" ];
    sha256 = "00vym01jk9slibq2nsiilgffp7n6k52a4q3n4dqp0xf5kzxvffcf";
    inherit dependencies buildDependencies features;
  };
  migrations_internals_1_4_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "migrations_internals";
    version = "1.4.0";
    authors = [ "Sean Griffin <sean@seantheprogrammer.com>" ];
    sha256 = "0k19bzh4i6vkckvjq9n895cr7wgaya9m2h6n622hh2q2swfkc5bp";
    inherit dependencies buildDependencies features;
  };
  mime_0_3_13_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "mime";
    version = "0.3.13";
    authors = [ "Sean McArthur <sean@seanmonstar.com>" ];
    sha256 = "191b240rj0l8hq2bmn74z1c9rqnrfx0dbfxgyq7vnf3jkrbc5v86";
    inherit dependencies buildDependencies features;
  };
  mime_guess_2_0_0_alpha_6_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "mime_guess";
    version = "2.0.0-alpha.6";
    authors = [ "Austin Bonander <austin.bonander@gmail.com>" ];
    sha256 = "1k2mdq43gi2qr63b7m5zs624rfi40ysk33cay49jlhq97jwnk9db";
    inherit dependencies buildDependencies features;
  };
  mio_0_6_16_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "mio";
    version = "0.6.16";
    authors = [ "Carl Lerche <me@carllerche.com>" ];
    sha256 = "14vyrlmf0w984pi7ad9qvmlfj6vrb0wn6i8ik9j87w5za2r3rban";
    inherit dependencies buildDependencies features;
  };
  mio_uds_0_6_7_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "mio-uds";
    version = "0.6.7";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "1gff9908pvvysv7zgxvyxy7x34fnhs088cr0j8mgwj8j24mswrhm";
    inherit dependencies buildDependencies features;
  };
  miow_0_2_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "miow";
    version = "0.2.1";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "14f8zkc6ix7mkyis1vsqnim8m29b6l55abkba3p2yz7j1ibcvrl0";
    inherit dependencies buildDependencies features;
  };
  native_tls_0_2_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "native-tls";
    version = "0.2.2";
    authors = [ "Steven Fackler <sfackler@gmail.com>" ];
    sha256 = "0vl2hmmnrcjfylzjfsbnav20ri2n1qjgxn7bklb4mk3fyxfqm1m9";
    inherit dependencies buildDependencies features;
  };
  net2_0_2_33_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "net2";
    version = "0.2.33";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "1qnmajafgybj5wyxz9iffa8x5wgbwd2znfklmhqj7vl6lw1m65mq";
    inherit dependencies buildDependencies features;
  };
  nodrop_0_1_13_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "nodrop";
    version = "0.1.13";
    authors = [ "bluss" ];
    sha256 = "0gkfx6wihr9z0m8nbdhma5pyvbipznjpkzny2d4zkc05b0vnhinb";
    inherit dependencies buildDependencies features;
  };
  num_integer_0_1_39_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "num-integer";
    version = "0.1.39";
    authors = [ "The Rust Project Developers" ];
    sha256 = "1f42ls46cghs13qfzgbd7syib2zc6m7hlmv1qlar6c9mdxapvvbg";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  num_traits_0_2_6_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "num-traits";
    version = "0.2.6";
    authors = [ "The Rust Project Developers" ];
    sha256 = "1d20sil9n0wgznd1nycm3yjfj1mzyl41ambb7by1apxlyiil1azk";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  num_cpus_1_10_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "num_cpus";
    version = "1.10.0";
    authors = [ "Sean McArthur <sean@seanmonstar.com>" ];
    sha256 = "1411jyxy1wd8d59mv7cf6ynkvvar92czmwhb9l2c1brdkxbbiqn7";
    inherit dependencies buildDependencies features;
  };
  opaque_debug_0_2_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "opaque-debug";
    version = "0.2.2";
    authors = [ "RustCrypto Developers" ];
    sha256 = "0dkzsnxpg50gz3gjcdzc4j6g4s0jphllg6q7jqmsy9nd9glidy74";
    inherit dependencies buildDependencies features;
  };
  openssl_0_10_16_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "openssl";
    version = "0.10.16";
    authors = [ "Steven Fackler <sfackler@gmail.com>" ];
    sha256 = "17mi6p323rqkydfwykiba3b1a24j7jv7bmr7j5wai4c32i2khqsm";
    inherit dependencies buildDependencies features;
  };
  openssl_probe_0_1_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "openssl-probe";
    version = "0.1.2";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "1a89fznx26vvaxyrxdvgf6iwai5xvs6xjvpjin68fgvrslv6n15a";
    inherit dependencies buildDependencies features;
  };
  openssl_sys_0_9_40_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "openssl-sys";
    version = "0.9.40";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" "Steven Fackler <sfackler@gmail.com>" ];
    sha256 = "11dqyk9g2wdwwj21zma71w5hd5d4sw3hm4pnpk8jjh0wjpkgjdvq";
    build = "build/main.rs";
    inherit dependencies buildDependencies features;
  };
  owning_ref_0_4_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "owning_ref";
    version = "0.4.0";
    authors = [ "Marvin Löbel <loebel.marvin@gmail.com>" ];
    sha256 = "1m95qpc3hamkw9wlbfzqkzk7h6skyj40zr6sa3ps151slcfnnchm";
    inherit dependencies buildDependencies features;
  };
  parking_lot_0_7_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "parking_lot";
    version = "0.7.1";
    authors = [ "Amanieu d'Antras <amanieu@gmail.com>" ];
    sha256 = "1qpb49xd176hqqabxdb48f1hvylfbf68rpz8yfrhw0x68ys0lkq1";
    inherit dependencies buildDependencies features;
  };
  parking_lot_core_0_4_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "parking_lot_core";
    version = "0.4.0";
    authors = [ "Amanieu d'Antras <amanieu@gmail.com>" ];
    sha256 = "1mzk5i240ddvhwnz65hhjk4cq61z235g1n8bd7al4mg6vx437c16";
    inherit dependencies buildDependencies features;
  };
  percent_encoding_1_0_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "percent-encoding";
    version = "1.0.1";
    authors = [ "The rust-url developers" ];
    sha256 = "04ahrp7aw4ip7fmadb0bknybmkfav0kk0gw4ps3ydq5w6hr0ib5i";
    libPath = "lib.rs";
    inherit dependencies buildDependencies features;
  };
  phf_0_7_24_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "phf";
    version = "0.7.24";
    authors = [ "Steven Fackler <sfackler@gmail.com>" ];
    sha256 = "19mmhmafd1dhywc7pzkmd1nq0kjfvg57viny20jqa91hhprf2dv5";
    libPath = "src/lib.rs";
    inherit dependencies buildDependencies features;
  };
  phf_codegen_0_7_24_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "phf_codegen";
    version = "0.7.24";
    authors = [ "Steven Fackler <sfackler@gmail.com>" ];
    sha256 = "0avkx97r4ph8rv70wwgniarlcfiq27yd74gmnxfdv3rx840cyf8g";
    inherit dependencies buildDependencies features;
  };
  phf_generator_0_7_24_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "phf_generator";
    version = "0.7.24";
    authors = [ "Steven Fackler <sfackler@gmail.com>" ];
    sha256 = "1frn2jfydinifxb1fki0xnnsxf0f1ciaa79jz415r5qhw1ash72j";
    inherit dependencies buildDependencies features;
  };
  phf_shared_0_7_24_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "phf_shared";
    version = "0.7.24";
    authors = [ "Steven Fackler <sfackler@gmail.com>" ];
    sha256 = "1hndqn461jvm2r269ym4qh7fnjc6n8yy53avc2pb43p70vxhm9rl";
    libPath = "src/lib.rs";
    inherit dependencies buildDependencies features;
  };
  pkg_config_0_3_14_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "pkg-config";
    version = "0.3.14";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "0207fsarrm412j0dh87lfcas72n8mxar7q3mgflsbsrqnb140sv6";
    inherit dependencies buildDependencies features;
  };
  pool_0_1_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "pool";
    version = "0.1.0";
    authors = [ "Henry Zimmerman <zimhen7@gmail.com>" ];
    src = ./.;
    workspace_member = "/home/hzimmerman/class/weeb_development/group_project/backend/pool";
    inherit dependencies buildDependencies features;
  };
  pq_sys_0_4_6_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "pq-sys";
    version = "0.4.6";
    authors = [ "Sean Griffin <sean@seantheprogrammer.com>" ];
    sha256 = "0qsy79igizb54x34m1p7zf28ffvadsm3hyj52djq3rwb56kb95n6";
    libName = "pq_sys";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  proc_macro2_0_4_27_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "proc-macro2";
    version = "0.4.27";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "1cp4c40p3hwn2sz72ssqa62gp5n8w4gbamdqvvadzp5l7gxnq95i";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  quick_error_1_2_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "quick-error";
    version = "1.2.2";
    authors = [ "Paul Colomiets <paul@colomiets.name>" "Colin Kiegel <kiegel@gmx.de>" ];
    sha256 = "192a3adc5phgpibgqblsdx1b421l5yg9bjbmv552qqq9f37h60k5";
    inherit dependencies buildDependencies features;
  };
  quote_0_6_11_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "quote";
    version = "0.6.11";
    authors = [ "David Tolnay <dtolnay@gmail.com>" ];
    sha256 = "0agska77z58cypcq4knayzwx7r7n6m756z1cz9cp2z4sv0b846ga";
    inherit dependencies buildDependencies features;
  };
  r2d2_0_8_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "r2d2";
    version = "0.8.3";
    authors = [ "Steven Fackler <sfackler@gmail.com>" ];
    sha256 = "19g0hzxi9h1h4sijfgz9c7fw5239v4hapiy8c0idn74jvylzv3g3";
    inherit dependencies buildDependencies features;
  };
  rand_0_4_6_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "rand";
    version = "0.4.6";
    authors = [ "The Rust Project Developers" ];
    sha256 = "0c3rmg5q7d6qdi7cbmg5py9alm70wd3xsg0mmcawrnl35qv37zfs";
    inherit dependencies buildDependencies features;
  };
  rand_0_5_6_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "rand";
    version = "0.5.6";
    authors = [ "The Rust Project Developers" ];
    sha256 = "04f1gydiia347cx24n5cw4v21fhh9yga7dw739z4jsxzls2ss8w8";
    inherit dependencies buildDependencies features;
  };
  rand_0_6_5_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "rand";
    version = "0.6.5";
    authors = [ "The Rand Project Developers" "The Rust Project Developers" ];
    sha256 = "0zbck48159aj8zrwzf80sd9xxh96w4f4968nshwjpysjvflimvgb";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  rand_chacha_0_1_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "rand_chacha";
    version = "0.1.1";
    authors = [ "The Rand Project Developers" "The Rust Project Developers" ];
    sha256 = "0xnxm4mjd7wjnh18zxc1yickw58axbycp35ciraplqdfwn1gffwi";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  rand_core_0_3_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "rand_core";
    version = "0.3.1";
    authors = [ "The Rand Project Developers" "The Rust Project Developers" ];
    sha256 = "0q0ssgpj9x5a6fda83nhmfydy7a6c0wvxm0jhncsmjx8qp8gw91m";
    inherit dependencies buildDependencies features;
  };
  rand_core_0_4_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "rand_core";
    version = "0.4.0";
    authors = [ "The Rand Project Developers" "The Rust Project Developers" ];
    sha256 = "0wb5iwhffibj0pnpznhv1g3i7h1fnhz64s3nz74fz6vsm3q6q3br";
    inherit dependencies buildDependencies features;
  };
  rand_hc_0_1_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "rand_hc";
    version = "0.1.0";
    authors = [ "The Rand Project Developers" ];
    sha256 = "05agb75j87yp7y1zk8yf7bpm66hc0673r3dlypn0kazynr6fdgkz";
    inherit dependencies buildDependencies features;
  };
  rand_isaac_0_1_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "rand_isaac";
    version = "0.1.1";
    authors = [ "The Rand Project Developers" "The Rust Project Developers" ];
    sha256 = "10hhdh5b5sa03s6b63y9bafm956jwilx41s71jbrzl63ccx8lxdq";
    inherit dependencies buildDependencies features;
  };
  rand_jitter_0_1_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "rand_jitter";
    version = "0.1.3";
    authors = [ "The Rand Project Developers" ];
    sha256 = "1cb4q73rmh1inlx3liy6rabapcqh6p6c1plsd2lxw6dmi67d1qc3";
    inherit dependencies buildDependencies features;
  };
  rand_os_0_1_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "rand_os";
    version = "0.1.2";
    authors = [ "The Rand Project Developers" ];
    sha256 = "07wzs8zn24gc6kg7sv75dszxswm6kd47zd4c1fg9h1d7bkwd4337";
    inherit dependencies buildDependencies features;
  };
  rand_pcg_0_1_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "rand_pcg";
    version = "0.1.1";
    authors = [ "The Rand Project Developers" ];
    sha256 = "0x6pzldj0c8c7gmr67ni5i7w2f7n7idvs3ckx0fc3wkhwl7wrbza";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  rand_xorshift_0_1_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "rand_xorshift";
    version = "0.1.1";
    authors = [ "The Rand Project Developers" "The Rust Project Developers" ];
    sha256 = "0v365c4h4lzxwz5k5kp9m0661s0sss7ylv74if0xb4svis9sswnn";
    inherit dependencies buildDependencies features;
  };
  rdrand_0_4_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "rdrand";
    version = "0.4.0";
    authors = [ "Simonas Kazlauskas <rdrand@kazlauskas.me>" ];
    sha256 = "15hrcasn0v876wpkwab1dwbk9kvqwrb3iv4y4dibb6yxnfvzwajk";
    inherit dependencies buildDependencies features;
  };
  redox_syscall_0_1_51_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "redox_syscall";
    version = "0.1.51";
    authors = [ "Jeremy Soller <jackpot51@gmail.com>" ];
    sha256 = "1a61cv7yydx64vpyvzr0z0hwzdvy4gcvcnfc6k70zpkngj5sz3ip";
    libName = "syscall";
    inherit dependencies buildDependencies features;
  };
  redox_termios_0_1_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "redox_termios";
    version = "0.1.1";
    authors = [ "Jeremy Soller <jackpot51@gmail.com>" ];
    sha256 = "04s6yyzjca552hdaqlvqhp3vw0zqbc304md5czyd3axh56iry8wh";
    libPath = "src/lib.rs";
    inherit dependencies buildDependencies features;
  };
  regex_1_1_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "regex";
    version = "1.1.0";
    authors = [ "The Rust Project Developers" ];
    sha256 = "1myzfgs1yp6vs2rxyg6arn6ab05j6c2m922w3b4iv6zix1rl7z0n";
    inherit dependencies buildDependencies features;
  };
  regex_syntax_0_6_5_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "regex-syntax";
    version = "0.6.5";
    authors = [ "The Rust Project Developers" ];
    sha256 = "0aaaba1fan2qfyc31wzdmgmbmyirc27zgcbz41ba5wm1lb2d8kli";
    inherit dependencies buildDependencies features;
  };
  remove_dir_all_0_5_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "remove_dir_all";
    version = "0.5.1";
    authors = [ "Aaronepower <theaaronepower@gmail.com>" ];
    sha256 = "1chx3yvfbj46xjz4bzsvps208l46hfbcy0sm98gpiya454n4rrl7";
    inherit dependencies buildDependencies features;
  };
  ring_0_13_5_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "ring";
    version = "0.13.5";
    authors = [ "Brian Smith <brian@briansmith.org>" ];
    sha256 = "0b071zwzwhgmj0xyr7wqc55f4nppgjikfh53nb9m799l096s86j4";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  rustc_version_0_2_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "rustc_version";
    version = "0.2.3";
    authors = [ "Marvin Löbel <loebel.marvin@gmail.com>" ];
    sha256 = "0rgwzbgs3i9fqjm1p4ra3n7frafmpwl29c8lw85kv1rxn7n2zaa7";
    inherit dependencies buildDependencies features;
  };
  rustls_0_14_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "rustls";
    version = "0.14.0";
    authors = [ "Joseph Birr-Pixton <jpixton@gmail.com>" ];
    sha256 = "1jrh5cbnmmz02hwv3lnh5c1j23dm9i0hhxlj9wym4n4sxbap71zd";
    inherit dependencies buildDependencies features;
  };
  ryu_0_2_7_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "ryu";
    version = "0.2.7";
    authors = [ "David Tolnay <dtolnay@gmail.com>" ];
    sha256 = "0m8szf1m87wfqkwh1f9zp9bn2mb0m9nav028xxnd0hlig90b44bd";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  safemem_0_3_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "safemem";
    version = "0.3.0";
    authors = [ "Austin Bonander <austin.bonander@gmail.com>" ];
    sha256 = "0pr39b468d05f6m7m4alsngmj5p7an8df21apsxbi57k0lmwrr18";
    inherit dependencies buildDependencies features;
  };
  schannel_0_1_14_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "schannel";
    version = "0.1.14";
    authors = [ "Steven Fackler <sfackler@gmail.com>" "Steffen Butzer <steffen.butzer@outlook.com>" ];
    sha256 = "1g0a88jknns1kwn3x1k3ci5y5zvg58pwdg1xrxkrw3cwd2hynm9k";
    inherit dependencies buildDependencies features;
  };
  scheduled_thread_pool_0_2_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "scheduled-thread-pool";
    version = "0.2.0";
    authors = [ "Steven Fackler <sfackler@gmail.com>" ];
    sha256 = "0x8jxh3l4irj5hm7rwfwmfd0iazcpvcfvnqbsngrrn3dmzpy0ig9";
    inherit dependencies buildDependencies features;
  };
  scoped_tls_0_1_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "scoped-tls";
    version = "0.1.2";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" ];
    sha256 = "0nblksgki698cqsclsnd6f1pq4yy34350dn2slaah9dlmx9z5xla";
    inherit dependencies buildDependencies features;
  };
  scopeguard_0_3_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "scopeguard";
    version = "0.3.3";
    authors = [ "bluss" ];
    sha256 = "0i1l013csrqzfz6c68pr5pi01hg5v5yahq8fsdmaxy6p8ygsjf3r";
    inherit dependencies buildDependencies features;
  };
  sct_0_4_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "sct";
    version = "0.4.0";
    authors = [ "Joseph Birr-Pixton <jpixton@gmail.com>" ];
    sha256 = "0cl6lsy7hp42a5hxdmd1fb09wq10bx668f2zjnwqyjzmfl7v3d5g";
    inherit dependencies buildDependencies features;
  };
  security_framework_0_2_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "security-framework";
    version = "0.2.2";
    authors = [ "Steven Fackler <sfackler@gmail.com>" "Kornel <kornel@geekhood.net>" ];
    sha256 = "1hs3xk4fq3641nrzfgm5m9hbwg1k5bxnhhj6s8yh1xnhlkrlndf0";
    inherit dependencies buildDependencies features;
  };
  security_framework_sys_0_2_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "security-framework-sys";
    version = "0.2.3";
    authors = [ "Steven Fackler <sfackler@gmail.com>" "Kornel <kornel@geekhood.net>" ];
    sha256 = "0j9v5gxn25fk24d1mcwdwgwm5b4ll0z4a33gkq4ajqdc97jazmr1";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  semver_0_9_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "semver";
    version = "0.9.0";
    authors = [ "Steve Klabnik <steve@steveklabnik.com>" "The Rust Project Developers" ];
    sha256 = "0azak2lb2wc36s3x15az886kck7rpnksrw14lalm157rg9sc9z63";
    inherit dependencies buildDependencies features;
  };
  semver_parser_0_7_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "semver-parser";
    version = "0.7.0";
    authors = [ "Steve Klabnik <steve@steveklabnik.com>" ];
    sha256 = "1da66c8413yakx0y15k8c055yna5lyb6fr0fw9318kdwkrk5k12h";
    inherit dependencies buildDependencies features;
  };
  serde_1_0_88_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "serde";
    version = "1.0.88";
    authors = [ "Erick Tryzelaar <erick.tryzelaar@gmail.com>" "David Tolnay <dtolnay@gmail.com>" ];
    sha256 = "0d51jvnznxrb1xq6a44vc2gg0rvgqs25hbca3h38y8982vy6xj1r";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  serde_derive_1_0_88_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "serde_derive";
    version = "1.0.88";
    authors = [ "Erick Tryzelaar <erick.tryzelaar@gmail.com>" "David Tolnay <dtolnay@gmail.com>" ];
    sha256 = "0022sjlj7q4d3l23bdz7d2y17cvw9jn0jzn6sjrdd2jzg83iw2h0";
    procMacro = true;
    inherit dependencies buildDependencies features;
  };
  serde_json_1_0_38_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "serde_json";
    version = "1.0.38";
    authors = [ "Erick Tryzelaar <erick.tryzelaar@gmail.com>" "David Tolnay <dtolnay@gmail.com>" ];
    sha256 = "10zhcsk1qh92320fjmgrdd23jf99rr504gp3d5nv9fddy5viq6a1";
    inherit dependencies buildDependencies features;
  };
  serde_urlencoded_0_5_4_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "serde_urlencoded";
    version = "0.5.4";
    authors = [ "Anthony Ramine <n.oxyde@gmail.com>" ];
    sha256 = "01dbyyr73ilyz3yqfmalhxs9zpsqvfvzj977199lh5v9j7dwh6cc";
    inherit dependencies buildDependencies features;
  };
  server_0_1_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "server";
    version = "0.1.0";
    authors = [ "Henry Zimmerman <zimhen7@gmail.com>" ];
    src = ./.;
    workspace_member = "/home/hzimmerman/class/weeb_development/group_project/backend/server";
    crateBin = [ {  name = "server_bin";  path = "src/main.rs"; } ];
    inherit dependencies buildDependencies features;
  };
  sha_1_0_8_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "sha-1";
    version = "0.8.1";
    authors = [ "RustCrypto Developers" ];
    sha256 = "0pls9la06vkz4kjm79vcls00bp3p56wgvcj5x8d9bnjxhjj17kkp";
    libName = "sha1";
    inherit dependencies buildDependencies features;
  };
  siphasher_0_2_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "siphasher";
    version = "0.2.3";
    authors = [ "Frank Denis <github@pureftpd.org>" ];
    sha256 = "1ganj1grxqnkvv4ds3vby039bm999jrr58nfq2x3kjhzkw2bnqkw";
    inherit dependencies buildDependencies features;
  };
  slab_0_4_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "slab";
    version = "0.4.2";
    authors = [ "Carl Lerche <me@carllerche.com>" ];
    sha256 = "0h1l2z7qy6207kv0v3iigdf2xfk9yrhbwj1svlxk6wxjmdxvgdl7";
    inherit dependencies buildDependencies features;
  };
  smallvec_0_6_9_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "smallvec";
    version = "0.6.9";
    authors = [ "Simon Sapin <simon.sapin@exyr.org>" ];
    sha256 = "0p96l51a2pq5y0vn48nhbm6qslbc6k8h28cxm0pmzkqmj7xynz6w";
    libPath = "lib.rs";
    inherit dependencies buildDependencies features;
  };
  stable_deref_trait_1_1_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "stable_deref_trait";
    version = "1.1.1";
    authors = [ "Robert Grosse <n210241048576@gmail.com>" ];
    sha256 = "1xy9slzslrzr31nlnw52sl1d820b09y61b7f13lqgsn8n7y0l4g8";
    inherit dependencies buildDependencies features;
  };
  string_0_1_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "string";
    version = "0.1.3";
    authors = [ "Carl Lerche <me@carllerche.com>" ];
    sha256 = "03hr559lsxf13i1p5r2zd7m3ppqlbhqajbx80adi3cpp2rwnsvfw";
    inherit dependencies buildDependencies features;
  };
  strsim_0_7_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "strsim";
    version = "0.7.0";
    authors = [ "Danny Guo <dannyguo91@gmail.com>" ];
    sha256 = "0fy0k5f2705z73mb3x9459bpcvrx4ky8jpr4zikcbiwan4bnm0iv";
    inherit dependencies buildDependencies features;
  };
  syn_0_15_26_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "syn";
    version = "0.15.26";
    authors = [ "David Tolnay <dtolnay@gmail.com>" ];
    sha256 = "12kf63vxbiirycv10zzxw3g8a3cxblmpi6kx4xxz4csd15wapxid";
    inherit dependencies buildDependencies features;
  };
  tempfile_3_0_7_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "tempfile";
    version = "3.0.7";
    authors = [ "Steven Allen <steven@stebalien.com>" "The Rust Project Developers" "Ashley Mannix <ashleymannix@live.com.au>" "Jason White <jasonaw0@gmail.com>" ];
    sha256 = "19h7ch8fvisxrrmabcnhlfj6b8vg34zaw8491x141p0n0727niaf";
    inherit dependencies buildDependencies features;
  };
  termcolor_1_0_4_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "termcolor";
    version = "1.0.4";
    authors = [ "Andrew Gallant <jamslam@gmail.com>" ];
    sha256 = "0xydrjc0bxg08llcbcmkka29szdrfklk4vh6l6mdd67ajifqw1mv";
    inherit dependencies buildDependencies features;
  };
  termion_1_5_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "termion";
    version = "1.5.1";
    authors = [ "ticki <Ticki@users.noreply.github.com>" "gycos <alexandre.bury@gmail.com>" "IGI-111 <igi-111@protonmail.com>" ];
    sha256 = "02gq4vd8iws1f3gjrgrgpajsk2bk43nds5acbbb4s8dvrdvr8nf1";
    inherit dependencies buildDependencies features;
  };
  testing_common_0_1_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "testing_common";
    version = "0.1.0";
    authors = [ "Henry Zimmerman <zimhen7@gmail.com>" ];
    src = ./.;
    workspace_member = "/home/hzimmerman/class/weeb_development/group_project/backend/testing_common";
    inherit dependencies buildDependencies features;
  };
  textwrap_0_10_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "textwrap";
    version = "0.10.0";
    authors = [ "Martin Geisler <martin@geisler.net>" ];
    sha256 = "1s8d5cna12smhgj0x2y1xphklyk2an1yzbadnj89p1vy5vnjpsas";
    inherit dependencies buildDependencies features;
  };
  thread_local_0_3_6_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "thread_local";
    version = "0.3.6";
    authors = [ "Amanieu d'Antras <amanieu@gmail.com>" ];
    sha256 = "02rksdwjmz2pw9bmgbb4c0bgkbq5z6nvg510sq1s6y2j1gam0c7i";
    inherit dependencies buildDependencies features;
  };
  time_0_1_42_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "time";
    version = "0.1.42";
    authors = [ "The Rust Project Developers" ];
    sha256 = "1ny809kmdjwd4b478ipc33dz7q6nq7rxk766x8cnrg6zygcksmmx";
    inherit dependencies buildDependencies features;
  };
  tokio_0_1_15_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "tokio";
    version = "0.1.15";
    authors = [ "Carl Lerche <me@carllerche.com>" ];
    sha256 = "1lv4apsvqpmkz45rhjhby54m1mmyh9kaw2xxc4masx9vdg2nrgxr";
    inherit dependencies buildDependencies features;
  };
  tokio_codec_0_1_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "tokio-codec";
    version = "0.1.1";
    authors = [ "Carl Lerche <me@carllerche.com>" "Bryan Burgers <bryan@burgers.io>" ];
    sha256 = "0jc9lik540zyj4chbygg1rjh37m3zax8pd4bwcrwjmi1v56qwi4h";
    inherit dependencies buildDependencies features;
  };
  tokio_current_thread_0_1_4_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "tokio-current-thread";
    version = "0.1.4";
    authors = [ "Carl Lerche <me@carllerche.com>" ];
    sha256 = "1c92j6pwb7xq4pl9wg2xh4ngms0n59mf575h4x6mlp1jlj3sn2vb";
    inherit dependencies buildDependencies features;
  };
  tokio_executor_0_1_6_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "tokio-executor";
    version = "0.1.6";
    authors = [ "Carl Lerche <me@carllerche.com>" ];
    sha256 = "0dwbzdq97fija2scd8lkxa7lfahj056ii7fpwn7bwrc38sqyd8ld";
    inherit dependencies buildDependencies features;
  };
  tokio_fs_0_1_5_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "tokio-fs";
    version = "0.1.5";
    authors = [ "Carl Lerche <me@carllerche.com>" ];
    sha256 = "0m4b9xmv04dlfm4515mdqjmid4sbyb2n2knyflmcbva8l554inm8";
    inherit dependencies buildDependencies features;
  };
  tokio_io_0_1_11_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "tokio-io";
    version = "0.1.11";
    authors = [ "Carl Lerche <me@carllerche.com>" ];
    sha256 = "1qkhscqqjqqvccm7j239xgx4hw8wwwypiraim4w3w8pi7w2pwxiq";
    inherit dependencies buildDependencies features;
  };
  tokio_reactor_0_1_8_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "tokio-reactor";
    version = "0.1.8";
    authors = [ "Carl Lerche <me@carllerche.com>" ];
    sha256 = "1v31i5kqcrk95wshzhqp6p5xcd0dmsc6sb5ydchi9y69vg2s7wfd";
    inherit dependencies buildDependencies features;
  };
  tokio_sync_0_1_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "tokio-sync";
    version = "0.1.1";
    authors = [ "Carl Lerche <me@carllerche.com>" ];
    sha256 = "0kpiy0q1hfqdxlak62vv0rwcqgj65k72m2f7lh8mgafkng8ms2c1";
    inherit dependencies buildDependencies features;
  };
  tokio_tcp_0_1_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "tokio-tcp";
    version = "0.1.3";
    authors = [ "Carl Lerche <me@carllerche.com>" ];
    sha256 = "07v5p339660zjy1w73wddagj3n5wa4v7v5gj7hnvw95ka407zvcz";
    inherit dependencies buildDependencies features;
  };
  tokio_threadpool_0_1_11_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "tokio-threadpool";
    version = "0.1.11";
    authors = [ "Carl Lerche <me@carllerche.com>" ];
    sha256 = "0l9bf06j5fiwnsy5fh6v3d00fcc6wlkgbjlpyd594bagpnhgwcpn";
    inherit dependencies buildDependencies features;
  };
  tokio_timer_0_2_10_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "tokio-timer";
    version = "0.2.10";
    authors = [ "Carl Lerche <me@carllerche.com>" ];
    sha256 = "17a5irj7ph95l30845vg6hy3igc0k04bhxnqs2qww4v8ix30vbkz";
    inherit dependencies buildDependencies features;
  };
  tokio_udp_0_1_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "tokio-udp";
    version = "0.1.3";
    authors = [ "Carl Lerche <me@carllerche.com>" ];
    sha256 = "1g1x499vqvzwy7xfccr32vwymlx25zpmkx8ppqgifzqwrjnncajf";
    inherit dependencies buildDependencies features;
  };
  tokio_uds_0_2_5_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "tokio-uds";
    version = "0.2.5";
    authors = [ "Carl Lerche <me@carllerche.com>" ];
    sha256 = "1i4d9b4v9a3rza8bi1j2701w6xjvxxdpdaaw2za4h1x9qriq4rv9";
    inherit dependencies buildDependencies features;
  };
  try_lock_0_2_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "try-lock";
    version = "0.2.2";
    authors = [ "Sean McArthur <sean@seanmonstar.com>" ];
    sha256 = "1k8xc0jpbrmzp0fwghdh6pwzjb9xx2p8yy0xxnnb8065smc5fsrv";
    inherit dependencies buildDependencies features;
  };
  tungstenite_0_6_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "tungstenite";
    version = "0.6.1";
    authors = [ "Alexey Galakhov" ];
    sha256 = "18rrqp45wsx3bcji6n4d059jy29csziq6yv1dpsr1pmfwvv22vrc";
    inherit dependencies buildDependencies features;
  };
  typenum_1_10_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "typenum";
    version = "1.10.0";
    authors = [ "Paho Lurie-Gregg <paho@paholg.com>" "Andre Bogus <bogusandre@gmail.com>" ];
    sha256 = "1v2cgg0mlzkg5prs7swysckgk2ay6bpda8m83c2sn3z77dcsx3bc";
    build = "build/main.rs";
    inherit dependencies buildDependencies features;
  };
  ucd_util_0_1_3_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "ucd-util";
    version = "0.1.3";
    authors = [ "Andrew Gallant <jamslam@gmail.com>" ];
    sha256 = "1n1qi3jywq5syq90z9qd8qzbn58pcjgv1sx4sdmipm4jf9zanz15";
    inherit dependencies buildDependencies features;
  };
  unicase_1_4_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "unicase";
    version = "1.4.2";
    authors = [ "Sean McArthur <sean.monstar@gmail.com>" ];
    sha256 = "0rbnhw2mnhcwrij3vczp0sl8zdfmvf2dlh8hly81kj7132kfj0mf";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  unicase_2_2_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "unicase";
    version = "2.2.0";
    authors = [ "Sean McArthur <sean@seanmonstar.com>" ];
    sha256 = "0p8fj4rdjk9k15s552bl6vpidjcf4jzddzkz6vgagb2i84xlvfxc";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  unicode_bidi_0_3_4_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "unicode-bidi";
    version = "0.3.4";
    authors = [ "The Servo Project Developers" ];
    sha256 = "0lcd6jasrf8p9p0q20qyf10c6xhvw40m2c4rr105hbk6zy26nj1q";
    libName = "unicode_bidi";
    inherit dependencies buildDependencies features;
  };
  unicode_normalization_0_1_8_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "unicode-normalization";
    version = "0.1.8";
    authors = [ "kwantam <kwantam@gmail.com>" ];
    sha256 = "1pb26i2xd5zz0icabyqahikpca0iwj2jd4145pczc4bb7p641dsz";
    inherit dependencies buildDependencies features;
  };
  unicode_width_0_1_5_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "unicode-width";
    version = "0.1.5";
    authors = [ "kwantam <kwantam@gmail.com>" ];
    sha256 = "0886lc2aymwgy0lhavwn6s48ik3c61ykzzd3za6prgnw51j7bi4w";
    inherit dependencies buildDependencies features;
  };
  unicode_xid_0_1_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "unicode-xid";
    version = "0.1.0";
    authors = [ "erick.tryzelaar <erick.tryzelaar@gmail.com>" "kwantam <kwantam@gmail.com>" ];
    sha256 = "05wdmwlfzxhq3nhsxn6wx4q8dhxzzfb9szsz6wiw092m1rjj01zj";
    inherit dependencies buildDependencies features;
  };
  untrusted_0_6_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "untrusted";
    version = "0.6.2";
    authors = [ "Brian Smith <brian@briansmith.org>" ];
    sha256 = "189ir1h2xgb290bhjchwczr9ygia1f3ipsydf6pwnnb95lb8fihg";
    libPath = "src/untrusted.rs";
    inherit dependencies buildDependencies features;
  };
  url_1_7_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "url";
    version = "1.7.2";
    authors = [ "The rust-url developers" ];
    sha256 = "0qzrjzd9r1niv7037x4cgnv98fs1vj0k18lpxx890ipc47x5gc09";
    inherit dependencies buildDependencies features;
  };
  urlencoding_1_0_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "urlencoding";
    version = "1.0.0";
    authors = [ "Bertram Truong <b@bertramtruong.com>" ];
    sha256 = "0nc8ag5wfvq1bxwmss7kmcnyp7kda5d6ks77gkbfgyx7x336ykrh";
    inherit dependencies buildDependencies features;
  };
  utf_8_0_7_5_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "utf-8";
    version = "0.7.5";
    authors = [ "Simon Sapin <simon.sapin@exyr.org>" ];
    sha256 = "02y7d0ch5zfdy0mailqfb14vcbhr7kw1nsfrs0q9c4bq5g9c10qp";
    libName = "utf8";
    inherit dependencies buildDependencies features;
  };
  utf8_ranges_1_0_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "utf8-ranges";
    version = "1.0.2";
    authors = [ "Andrew Gallant <jamslam@gmail.com>" ];
    sha256 = "1my02laqsgnd8ib4dvjgd4rilprqjad6pb9jj9vi67csi5qs2281";
    inherit dependencies buildDependencies features;
  };
  uuid_0_6_5_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "uuid";
    version = "0.6.5";
    authors = [ "Ashley Mannix<ashleymannix@live.com.au>" "Christopher Armstrong" "Dylan DPC<dylan.dpc@gmail.com>" "Hunar Roop Kahlon<hunar.roop@gmail.com>" ];
    sha256 = "1jy15m4yxxwma0jsy070garhbgfprky23i77rawjkk75vqhnnhlf";
    inherit dependencies buildDependencies features;
  };
  vcpkg_0_2_6_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "vcpkg";
    version = "0.2.6";
    authors = [ "Jim McGrath <jimmc2@gmail.com>" ];
    sha256 = "1ig6jqpzzl1z9vk4qywgpfr4hfbd8ny8frqsgm3r449wkc4n1i5x";
    inherit dependencies buildDependencies features;
  };
  vec_map_0_8_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "vec_map";
    version = "0.8.1";
    authors = [ "Alex Crichton <alex@alexcrichton.com>" "Jorge Aparicio <japaricious@gmail.com>" "Alexis Beingessner <a.beingessner@gmail.com>" "Brian Anderson <>" "tbu- <>" "Manish Goregaokar <>" "Aaron Turon <aturon@mozilla.com>" "Adolfo Ochagavía <>" "Niko Matsakis <>" "Steven Fackler <>" "Chase Southwood <csouth3@illinois.edu>" "Eduard Burtescu <>" "Florian Wilkens <>" "Félix Raimundo <>" "Tibor Benke <>" "Markus Siemens <markus@m-siemens.de>" "Josh Branchaud <jbranchaud@gmail.com>" "Huon Wilson <dbau.pp@gmail.com>" "Corey Farwell <coref@rwell.org>" "Aaron Liblong <>" "Nick Cameron <nrc@ncameron.org>" "Patrick Walton <pcwalton@mimiga.net>" "Felix S Klock II <>" "Andrew Paseltiner <apaseltiner@gmail.com>" "Sean McArthur <sean.monstar@gmail.com>" "Vadim Petrochenkov <>" ];
    sha256 = "1jj2nrg8h3l53d43rwkpkikq5a5x15ms4rf1rw92hp5lrqhi8mpi";
    inherit dependencies buildDependencies features;
  };
  version_check_0_1_5_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "version_check";
    version = "0.1.5";
    authors = [ "Sergio Benitez <sb@sergio.bz>" ];
    sha256 = "1yrx9xblmwbafw2firxyqbj8f771kkzfd24n3q7xgwiqyhi0y8qd";
    inherit dependencies buildDependencies features;
  };
  want_0_0_6_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "want";
    version = "0.0.6";
    authors = [ "Sean McArthur <sean@seanmonstar.com>" ];
    sha256 = "03cc2lndz531a4kgql1v9kppyb1yz2abcz5l52j1gg2nypmy3lh8";
    inherit dependencies buildDependencies features;
  };
  warp_0_1_13_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "warp";
    version = "0.1.13";
    authors = [ "Sean McArthur <sean@seanmonstar.com>" ];
    sha256 = "1m3sj1x1kzqmj8548r2saafvqivi6xz7y3pr45jvchxv9mwi2zmz";
    inherit dependencies buildDependencies features;
  };
  webpki_0_18_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "webpki";
    version = "0.18.1";
    authors = [ "Brian Smith <brian@briansmith.org>" ];
    sha256 = "1czigcq417s3chn9kijhdyjhfcniw1gxsdnvaglilwhijx0v78h3";
    libPath = "src/webpki.rs";
    inherit dependencies buildDependencies features;
  };
  winapi_0_2_8_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "winapi";
    version = "0.2.8";
    authors = [ "Peter Atashian <retep998@gmail.com>" ];
    sha256 = "0a45b58ywf12vb7gvj6h3j264nydynmzyqz8d8rqxsj6icqv82as";
    inherit dependencies buildDependencies features;
  };
  winapi_0_3_6_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "winapi";
    version = "0.3.6";
    authors = [ "Peter Atashian <retep998@gmail.com>" ];
    sha256 = "1d9jfp4cjd82sr1q4dgdlrkvm33zhhav9d7ihr0nivqbncr059m4";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  winapi_build_0_1_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "winapi-build";
    version = "0.1.1";
    authors = [ "Peter Atashian <retep998@gmail.com>" ];
    sha256 = "1lxlpi87rkhxcwp2ykf1ldw3p108hwm24nywf3jfrvmff4rjhqga";
    libName = "build";
    inherit dependencies buildDependencies features;
  };
  winapi_i686_pc_windows_gnu_0_4_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "winapi-i686-pc-windows-gnu";
    version = "0.4.0";
    authors = [ "Peter Atashian <retep998@gmail.com>" ];
    sha256 = "05ihkij18r4gamjpxj4gra24514can762imjzlmak5wlzidplzrp";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  winapi_util_0_1_2_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "winapi-util";
    version = "0.1.2";
    authors = [ "Andrew Gallant <jamslam@gmail.com>" ];
    sha256 = "07jj7rg7nndd7bqhjin1xphbv8kb5clvhzpqpxkvm3wl84r3mj1h";
    inherit dependencies buildDependencies features;
  };
  winapi_x86_64_pc_windows_gnu_0_4_0_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "winapi-x86_64-pc-windows-gnu";
    version = "0.4.0";
    authors = [ "Peter Atashian <retep998@gmail.com>" ];
    sha256 = "0n1ylmlsb8yg1v583i4xy0qmqg42275flvbc51hdqjjfjcl9vlbj";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  wincolor_1_0_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "wincolor";
    version = "1.0.1";
    authors = [ "Andrew Gallant <jamslam@gmail.com>" ];
    sha256 = "0gr7v4krmjba7yq16071rfacz42qbapas7mxk5nphjwb042a8gvz";
    inherit dependencies buildDependencies features;
  };
  ws2_32_sys_0_2_1_ = { dependencies?[], buildDependencies?[], features?[] }: buildRustCrate {
    crateName = "ws2_32-sys";
    version = "0.2.1";
    authors = [ "Peter Atashian <retep998@gmail.com>" ];
    sha256 = "1zpy9d9wk11sj17fczfngcj28w4xxjs3b4n036yzpy38dxp4f7kc";
    libName = "ws2_32";
    build = "build.rs";
    inherit dependencies buildDependencies features;
  };
  MacTypes_sys_2_1_0 = { features?(MacTypes_sys_2_1_0_features {}) }: MacTypes_sys_2_1_0_ {
    dependencies = mapFeatures features ([ libc_0_2_48 ]);
    features = mkFeatures (features.MacTypes_sys_2_1_0 or {});
  };
  MacTypes_sys_2_1_0_features = f: updateFeatures f (rec {
    MacTypes_sys_2_1_0.default = (f.MacTypes_sys_2_1_0.default or true);
    MacTypes_sys_2_1_0.use_std =
      (f.MacTypes_sys_2_1_0.use_std or false) ||
      (f.MacTypes_sys_2_1_0.default or false) ||
      (MacTypes_sys_2_1_0.default or false);
    libc_0_2_48.default = (f.libc_0_2_48.default or false);
    libc_0_2_48.use_std =
      (f.libc_0_2_48.use_std or false) ||
      (MacTypes_sys_2_1_0.use_std or false) ||
      (f.MacTypes_sys_2_1_0.use_std or false);
  }) [ libc_0_2_48_features ];
  aho_corasick_0_6_10 = { features?(aho_corasick_0_6_10_features {}) }: aho_corasick_0_6_10_ {
    dependencies = mapFeatures features ([ memchr_2_2_0 ]);
  };
  aho_corasick_0_6_10_features = f: updateFeatures f (rec {
    aho_corasick_0_6_10.default = (f.aho_corasick_0_6_10.default or true);
    memchr_2_2_0.default = true;
  }) [ memchr_2_2_0_features ];
  ansi_term_0_11_0 = { features?(ansi_term_0_11_0_features {}) }: ansi_term_0_11_0_ {
    dependencies = (if kernel == "windows" then mapFeatures features ([ winapi_0_3_6 ]) else []);
  };
  ansi_term_0_11_0_features = f: updateFeatures f (rec {
    ansi_term_0_11_0.default = (f.ansi_term_0_11_0.default or true);
    winapi_0_3_6.consoleapi = true;
    winapi_0_3_6.default = true;
    winapi_0_3_6.errhandlingapi = true;
    winapi_0_3_6.processenv = true;
  }) [ winapi_0_3_6_features ];
  antidote_1_0_0 = { features?(antidote_1_0_0_features {}) }: antidote_1_0_0_ {};
  antidote_1_0_0_features = f: updateFeatures f (rec {
    antidote_1_0_0.default = (f.antidote_1_0_0.default or true);
  }) [];
  apply_0_2_2 = { features?(apply_0_2_2_features {}) }: apply_0_2_2_ {};
  apply_0_2_2_features = f: updateFeatures f (rec {
    apply_0_2_2.default = (f.apply_0_2_2.default or true);
  }) [];
  arrayvec_0_4_10 = { features?(arrayvec_0_4_10_features {}) }: arrayvec_0_4_10_ {
    dependencies = mapFeatures features ([ nodrop_0_1_13 ]);
    features = mkFeatures (features.arrayvec_0_4_10 or {});
  };
  arrayvec_0_4_10_features = f: updateFeatures f (rec {
    arrayvec_0_4_10.default = (f.arrayvec_0_4_10.default or true);
    arrayvec_0_4_10.serde =
      (f.arrayvec_0_4_10.serde or false) ||
      (f.arrayvec_0_4_10.serde-1 or false) ||
      (arrayvec_0_4_10.serde-1 or false);
    arrayvec_0_4_10.std =
      (f.arrayvec_0_4_10.std or false) ||
      (f.arrayvec_0_4_10.default or false) ||
      (arrayvec_0_4_10.default or false);
    nodrop_0_1_13.default = (f.nodrop_0_1_13.default or false);
  }) [ nodrop_0_1_13_features ];
  atty_0_2_11 = { features?(atty_0_2_11_features {}) }: atty_0_2_11_ {
    dependencies = (if kernel == "redox" then mapFeatures features ([ termion_1_5_1 ]) else [])
      ++ (if (kernel == "linux" || kernel == "darwin") then mapFeatures features ([ libc_0_2_48 ]) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ winapi_0_3_6 ]) else []);
  };
  atty_0_2_11_features = f: updateFeatures f (rec {
    atty_0_2_11.default = (f.atty_0_2_11.default or true);
    libc_0_2_48.default = (f.libc_0_2_48.default or false);
    termion_1_5_1.default = true;
    winapi_0_3_6.consoleapi = true;
    winapi_0_3_6.default = true;
    winapi_0_3_6.minwinbase = true;
    winapi_0_3_6.minwindef = true;
    winapi_0_3_6.processenv = true;
    winapi_0_3_6.winbase = true;
  }) [ termion_1_5_1_features libc_0_2_48_features winapi_0_3_6_features ];
  authorization_0_1_0 = { features?(authorization_0_1_0_features {}) }: authorization_0_1_0_ {
    dependencies = mapFeatures features ([ chrono_0_4_6 frank_jwt_3_1_0 serde_1_0_88 serde_json_1_0_38 warp_0_1_13 ]);
  };
  authorization_0_1_0_features = f: updateFeatures f (rec {
    authorization_0_1_0.default = (f.authorization_0_1_0.default or true);
    chrono_0_4_6.default = true;
    chrono_0_4_6.serde = true;
    frank_jwt_3_1_0.default = true;
    serde_1_0_88.default = true;
    serde_1_0_88.derive = true;
    serde_json_1_0_38.default = true;
    warp_0_1_13.default = true;
  }) [ chrono_0_4_6_features frank_jwt_3_1_0_features serde_1_0_88_features serde_json_1_0_38_features warp_0_1_13_features ];
  autocfg_0_1_2 = { features?(autocfg_0_1_2_features {}) }: autocfg_0_1_2_ {};
  autocfg_0_1_2_features = f: updateFeatures f (rec {
    autocfg_0_1_2.default = (f.autocfg_0_1_2.default or true);
  }) [];
  base64_0_9_3 = { features?(base64_0_9_3_features {}) }: base64_0_9_3_ {
    dependencies = mapFeatures features ([ byteorder_1_3_1 safemem_0_3_0 ]);
  };
  base64_0_9_3_features = f: updateFeatures f (rec {
    base64_0_9_3.default = (f.base64_0_9_3.default or true);
    byteorder_1_3_1.default = true;
    safemem_0_3_0.default = true;
  }) [ byteorder_1_3_1_features safemem_0_3_0_features ];
  base64_0_10_1 = { features?(base64_0_10_1_features {}) }: base64_0_10_1_ {
    dependencies = mapFeatures features ([ byteorder_1_3_1 ]);
  };
  base64_0_10_1_features = f: updateFeatures f (rec {
    base64_0_10_1.default = (f.base64_0_10_1.default or true);
    byteorder_1_3_1.default = true;
  }) [ byteorder_1_3_1_features ];
  bitflags_1_0_4 = { features?(bitflags_1_0_4_features {}) }: bitflags_1_0_4_ {
    features = mkFeatures (features.bitflags_1_0_4 or {});
  };
  bitflags_1_0_4_features = f: updateFeatures f (rec {
    bitflags_1_0_4.default = (f.bitflags_1_0_4.default or true);
  }) [];
  block_buffer_0_7_0 = { features?(block_buffer_0_7_0_features {}) }: block_buffer_0_7_0_ {
    dependencies = mapFeatures features ([ block_padding_0_1_3 byte_tools_0_3_1 byteorder_1_3_1 generic_array_0_12_0 ]);
  };
  block_buffer_0_7_0_features = f: updateFeatures f (rec {
    block_buffer_0_7_0.default = (f.block_buffer_0_7_0.default or true);
    block_padding_0_1_3.default = true;
    byte_tools_0_3_1.default = true;
    byteorder_1_3_1.default = (f.byteorder_1_3_1.default or false);
    generic_array_0_12_0.default = true;
  }) [ block_padding_0_1_3_features byte_tools_0_3_1_features byteorder_1_3_1_features generic_array_0_12_0_features ];
  block_padding_0_1_3 = { features?(block_padding_0_1_3_features {}) }: block_padding_0_1_3_ {
    dependencies = mapFeatures features ([ byte_tools_0_3_1 ]);
  };
  block_padding_0_1_3_features = f: updateFeatures f (rec {
    block_padding_0_1_3.default = (f.block_padding_0_1_3.default or true);
    byte_tools_0_3_1.default = true;
  }) [ byte_tools_0_3_1_features ];
  byte_tools_0_3_1 = { features?(byte_tools_0_3_1_features {}) }: byte_tools_0_3_1_ {};
  byte_tools_0_3_1_features = f: updateFeatures f (rec {
    byte_tools_0_3_1.default = (f.byte_tools_0_3_1.default or true);
  }) [];
  byteorder_1_3_1 = { features?(byteorder_1_3_1_features {}) }: byteorder_1_3_1_ {
    features = mkFeatures (features.byteorder_1_3_1 or {});
  };
  byteorder_1_3_1_features = f: updateFeatures f (rec {
    byteorder_1_3_1.default = (f.byteorder_1_3_1.default or true);
    byteorder_1_3_1.std =
      (f.byteorder_1_3_1.std or false) ||
      (f.byteorder_1_3_1.default or false) ||
      (byteorder_1_3_1.default or false);
  }) [];
  bytes_0_4_11 = { features?(bytes_0_4_11_features {}) }: bytes_0_4_11_ {
    dependencies = mapFeatures features ([ byteorder_1_3_1 iovec_0_1_2 ]);
    features = mkFeatures (features.bytes_0_4_11 or {});
  };
  bytes_0_4_11_features = f: updateFeatures f (rec {
    byteorder_1_3_1.default = true;
    byteorder_1_3_1.i128 =
      (f.byteorder_1_3_1.i128 or false) ||
      (bytes_0_4_11.i128 or false) ||
      (f.bytes_0_4_11.i128 or false);
    bytes_0_4_11.default = (f.bytes_0_4_11.default or true);
    iovec_0_1_2.default = true;
  }) [ byteorder_1_3_1_features iovec_0_1_2_features ];
  cc_1_0_29 = { features?(cc_1_0_29_features {}) }: cc_1_0_29_ {
    dependencies = mapFeatures features ([]);
    features = mkFeatures (features.cc_1_0_29 or {});
  };
  cc_1_0_29_features = f: updateFeatures f (rec {
    cc_1_0_29.default = (f.cc_1_0_29.default or true);
    cc_1_0_29.rayon =
      (f.cc_1_0_29.rayon or false) ||
      (f.cc_1_0_29.parallel or false) ||
      (cc_1_0_29.parallel or false);
  }) [];
  cfg_if_0_1_6 = { features?(cfg_if_0_1_6_features {}) }: cfg_if_0_1_6_ {};
  cfg_if_0_1_6_features = f: updateFeatures f (rec {
    cfg_if_0_1_6.default = (f.cfg_if_0_1_6.default or true);
  }) [];
  chrono_0_4_6 = { features?(chrono_0_4_6_features {}) }: chrono_0_4_6_ {
    dependencies = mapFeatures features ([ num_integer_0_1_39 num_traits_0_2_6 ]
      ++ (if features.chrono_0_4_6.serde or false then [ serde_1_0_88 ] else [])
      ++ (if features.chrono_0_4_6.time or false then [ time_0_1_42 ] else []));
    features = mkFeatures (features.chrono_0_4_6 or {});
  };
  chrono_0_4_6_features = f: updateFeatures f (rec {
    chrono_0_4_6.clock =
      (f.chrono_0_4_6.clock or false) ||
      (f.chrono_0_4_6.default or false) ||
      (chrono_0_4_6.default or false);
    chrono_0_4_6.default = (f.chrono_0_4_6.default or true);
    chrono_0_4_6.time =
      (f.chrono_0_4_6.time or false) ||
      (f.chrono_0_4_6.clock or false) ||
      (chrono_0_4_6.clock or false);
    num_integer_0_1_39.default = (f.num_integer_0_1_39.default or false);
    num_traits_0_2_6.default = (f.num_traits_0_2_6.default or false);
    serde_1_0_88.default = true;
    time_0_1_42.default = true;
  }) [ num_integer_0_1_39_features num_traits_0_2_6_features serde_1_0_88_features time_0_1_42_features ];
  clap_2_32_0 = { features?(clap_2_32_0_features {}) }: clap_2_32_0_ {
    dependencies = mapFeatures features ([ bitflags_1_0_4 textwrap_0_10_0 unicode_width_0_1_5 ]
      ++ (if features.clap_2_32_0.atty or false then [ atty_0_2_11 ] else [])
      ++ (if features.clap_2_32_0.strsim or false then [ strsim_0_7_0 ] else [])
      ++ (if features.clap_2_32_0.vec_map or false then [ vec_map_0_8_1 ] else []))
      ++ (if !(kernel == "windows") then mapFeatures features ([ ]
      ++ (if features.clap_2_32_0.ansi_term or false then [ ansi_term_0_11_0 ] else [])) else []);
    features = mkFeatures (features.clap_2_32_0 or {});
  };
  clap_2_32_0_features = f: updateFeatures f (rec {
    ansi_term_0_11_0.default = true;
    atty_0_2_11.default = true;
    bitflags_1_0_4.default = true;
    clap_2_32_0.ansi_term =
      (f.clap_2_32_0.ansi_term or false) ||
      (f.clap_2_32_0.color or false) ||
      (clap_2_32_0.color or false);
    clap_2_32_0.atty =
      (f.clap_2_32_0.atty or false) ||
      (f.clap_2_32_0.color or false) ||
      (clap_2_32_0.color or false);
    clap_2_32_0.clippy =
      (f.clap_2_32_0.clippy or false) ||
      (f.clap_2_32_0.lints or false) ||
      (clap_2_32_0.lints or false);
    clap_2_32_0.color =
      (f.clap_2_32_0.color or false) ||
      (f.clap_2_32_0.default or false) ||
      (clap_2_32_0.default or false);
    clap_2_32_0.default = (f.clap_2_32_0.default or true);
    clap_2_32_0.strsim =
      (f.clap_2_32_0.strsim or false) ||
      (f.clap_2_32_0.suggestions or false) ||
      (clap_2_32_0.suggestions or false);
    clap_2_32_0.suggestions =
      (f.clap_2_32_0.suggestions or false) ||
      (f.clap_2_32_0.default or false) ||
      (clap_2_32_0.default or false);
    clap_2_32_0.term_size =
      (f.clap_2_32_0.term_size or false) ||
      (f.clap_2_32_0.wrap_help or false) ||
      (clap_2_32_0.wrap_help or false);
    clap_2_32_0.vec_map =
      (f.clap_2_32_0.vec_map or false) ||
      (f.clap_2_32_0.default or false) ||
      (clap_2_32_0.default or false);
    clap_2_32_0.yaml =
      (f.clap_2_32_0.yaml or false) ||
      (f.clap_2_32_0.doc or false) ||
      (clap_2_32_0.doc or false);
    clap_2_32_0.yaml-rust =
      (f.clap_2_32_0.yaml-rust or false) ||
      (f.clap_2_32_0.yaml or false) ||
      (clap_2_32_0.yaml or false);
    strsim_0_7_0.default = true;
    textwrap_0_10_0.default = true;
    textwrap_0_10_0.term_size =
      (f.textwrap_0_10_0.term_size or false) ||
      (clap_2_32_0.wrap_help or false) ||
      (f.clap_2_32_0.wrap_help or false);
    unicode_width_0_1_5.default = true;
    vec_map_0_8_1.default = true;
  }) [ atty_0_2_11_features bitflags_1_0_4_features strsim_0_7_0_features textwrap_0_10_0_features unicode_width_0_1_5_features vec_map_0_8_1_features ansi_term_0_11_0_features ];
  cloudabi_0_0_3 = { features?(cloudabi_0_0_3_features {}) }: cloudabi_0_0_3_ {
    dependencies = mapFeatures features ([ ]
      ++ (if features.cloudabi_0_0_3.bitflags or false then [ bitflags_1_0_4 ] else []));
    features = mkFeatures (features.cloudabi_0_0_3 or {});
  };
  cloudabi_0_0_3_features = f: updateFeatures f (rec {
    bitflags_1_0_4.default = true;
    cloudabi_0_0_3.bitflags =
      (f.cloudabi_0_0_3.bitflags or false) ||
      (f.cloudabi_0_0_3.default or false) ||
      (cloudabi_0_0_3.default or false);
    cloudabi_0_0_3.default = (f.cloudabi_0_0_3.default or true);
  }) [ bitflags_1_0_4_features ];
  core_foundation_0_5_1 = { features?(core_foundation_0_5_1_features {}) }: core_foundation_0_5_1_ {
    dependencies = mapFeatures features ([ core_foundation_sys_0_5_1 libc_0_2_48 ]);
    features = mkFeatures (features.core_foundation_0_5_1 or {});
  };
  core_foundation_0_5_1_features = f: updateFeatures f (rec {
    core_foundation_0_5_1.chrono =
      (f.core_foundation_0_5_1.chrono or false) ||
      (f.core_foundation_0_5_1.with-chrono or false) ||
      (core_foundation_0_5_1.with-chrono or false);
    core_foundation_0_5_1.default = (f.core_foundation_0_5_1.default or true);
    core_foundation_0_5_1.uuid =
      (f.core_foundation_0_5_1.uuid or false) ||
      (f.core_foundation_0_5_1.with-uuid or false) ||
      (core_foundation_0_5_1.with-uuid or false);
    core_foundation_sys_0_5_1.default = true;
    core_foundation_sys_0_5_1.mac_os_10_7_support =
      (f.core_foundation_sys_0_5_1.mac_os_10_7_support or false) ||
      (core_foundation_0_5_1.mac_os_10_7_support or false) ||
      (f.core_foundation_0_5_1.mac_os_10_7_support or false);
    core_foundation_sys_0_5_1.mac_os_10_8_features =
      (f.core_foundation_sys_0_5_1.mac_os_10_8_features or false) ||
      (core_foundation_0_5_1.mac_os_10_8_features or false) ||
      (f.core_foundation_0_5_1.mac_os_10_8_features or false);
    libc_0_2_48.default = true;
  }) [ core_foundation_sys_0_5_1_features libc_0_2_48_features ];
  core_foundation_sys_0_5_1 = { features?(core_foundation_sys_0_5_1_features {}) }: core_foundation_sys_0_5_1_ {
    dependencies = mapFeatures features ([ libc_0_2_48 ]);
    features = mkFeatures (features.core_foundation_sys_0_5_1 or {});
  };
  core_foundation_sys_0_5_1_features = f: updateFeatures f (rec {
    core_foundation_sys_0_5_1.default = (f.core_foundation_sys_0_5_1.default or true);
    libc_0_2_48.default = true;
  }) [ libc_0_2_48_features ];
  crossbeam_0_6_0 = { features?(crossbeam_0_6_0_features {}) }: crossbeam_0_6_0_ {
    dependencies = mapFeatures features ([ cfg_if_0_1_6 crossbeam_channel_0_3_8 crossbeam_deque_0_6_3 crossbeam_epoch_0_7_1 crossbeam_utils_0_6_5 lazy_static_1_2_0 num_cpus_1_10_0 parking_lot_0_7_1 ]);
    features = mkFeatures (features.crossbeam_0_6_0 or {});
  };
  crossbeam_0_6_0_features = f: updateFeatures f (rec {
    cfg_if_0_1_6.default = true;
    crossbeam_0_6_0.default = (f.crossbeam_0_6_0.default or true);
    crossbeam_0_6_0.std =
      (f.crossbeam_0_6_0.std or false) ||
      (f.crossbeam_0_6_0.default or false) ||
      (crossbeam_0_6_0.default or false);
    crossbeam_channel_0_3_8.default = true;
    crossbeam_deque_0_6_3.default = true;
    crossbeam_epoch_0_7_1.default = true;
    crossbeam_epoch_0_7_1.nightly =
      (f.crossbeam_epoch_0_7_1.nightly or false) ||
      (crossbeam_0_6_0.nightly or false) ||
      (f.crossbeam_0_6_0.nightly or false);
    crossbeam_epoch_0_7_1.std =
      (f.crossbeam_epoch_0_7_1.std or false) ||
      (crossbeam_0_6_0.std or false) ||
      (f.crossbeam_0_6_0.std or false);
    crossbeam_utils_0_6_5.default = true;
    crossbeam_utils_0_6_5.nightly =
      (f.crossbeam_utils_0_6_5.nightly or false) ||
      (crossbeam_0_6_0.nightly or false) ||
      (f.crossbeam_0_6_0.nightly or false);
    crossbeam_utils_0_6_5.std =
      (f.crossbeam_utils_0_6_5.std or false) ||
      (crossbeam_0_6_0.std or false) ||
      (f.crossbeam_0_6_0.std or false);
    lazy_static_1_2_0.default = true;
    num_cpus_1_10_0.default = true;
    parking_lot_0_7_1.default = true;
  }) [ cfg_if_0_1_6_features crossbeam_channel_0_3_8_features crossbeam_deque_0_6_3_features crossbeam_epoch_0_7_1_features crossbeam_utils_0_6_5_features lazy_static_1_2_0_features num_cpus_1_10_0_features parking_lot_0_7_1_features ];
  crossbeam_channel_0_3_8 = { features?(crossbeam_channel_0_3_8_features {}) }: crossbeam_channel_0_3_8_ {
    dependencies = mapFeatures features ([ crossbeam_utils_0_6_5 smallvec_0_6_9 ]);
  };
  crossbeam_channel_0_3_8_features = f: updateFeatures f (rec {
    crossbeam_channel_0_3_8.default = (f.crossbeam_channel_0_3_8.default or true);
    crossbeam_utils_0_6_5.default = true;
    smallvec_0_6_9.default = true;
  }) [ crossbeam_utils_0_6_5_features smallvec_0_6_9_features ];
  crossbeam_deque_0_6_3 = { features?(crossbeam_deque_0_6_3_features {}) }: crossbeam_deque_0_6_3_ {
    dependencies = mapFeatures features ([ crossbeam_epoch_0_7_1 crossbeam_utils_0_6_5 ]);
  };
  crossbeam_deque_0_6_3_features = f: updateFeatures f (rec {
    crossbeam_deque_0_6_3.default = (f.crossbeam_deque_0_6_3.default or true);
    crossbeam_epoch_0_7_1.default = true;
    crossbeam_utils_0_6_5.default = true;
  }) [ crossbeam_epoch_0_7_1_features crossbeam_utils_0_6_5_features ];
  crossbeam_epoch_0_7_1 = { features?(crossbeam_epoch_0_7_1_features {}) }: crossbeam_epoch_0_7_1_ {
    dependencies = mapFeatures features ([ arrayvec_0_4_10 cfg_if_0_1_6 crossbeam_utils_0_6_5 memoffset_0_2_1 scopeguard_0_3_3 ]
      ++ (if features.crossbeam_epoch_0_7_1.lazy_static or false then [ lazy_static_1_2_0 ] else []));
    features = mkFeatures (features.crossbeam_epoch_0_7_1 or {});
  };
  crossbeam_epoch_0_7_1_features = f: updateFeatures f (rec {
    arrayvec_0_4_10.default = (f.arrayvec_0_4_10.default or false);
    arrayvec_0_4_10.use_union =
      (f.arrayvec_0_4_10.use_union or false) ||
      (crossbeam_epoch_0_7_1.nightly or false) ||
      (f.crossbeam_epoch_0_7_1.nightly or false);
    cfg_if_0_1_6.default = true;
    crossbeam_epoch_0_7_1.default = (f.crossbeam_epoch_0_7_1.default or true);
    crossbeam_epoch_0_7_1.lazy_static =
      (f.crossbeam_epoch_0_7_1.lazy_static or false) ||
      (f.crossbeam_epoch_0_7_1.std or false) ||
      (crossbeam_epoch_0_7_1.std or false);
    crossbeam_epoch_0_7_1.std =
      (f.crossbeam_epoch_0_7_1.std or false) ||
      (f.crossbeam_epoch_0_7_1.default or false) ||
      (crossbeam_epoch_0_7_1.default or false);
    crossbeam_utils_0_6_5.default = (f.crossbeam_utils_0_6_5.default or false);
    crossbeam_utils_0_6_5.nightly =
      (f.crossbeam_utils_0_6_5.nightly or false) ||
      (crossbeam_epoch_0_7_1.nightly or false) ||
      (f.crossbeam_epoch_0_7_1.nightly or false);
    crossbeam_utils_0_6_5.std =
      (f.crossbeam_utils_0_6_5.std or false) ||
      (crossbeam_epoch_0_7_1.std or false) ||
      (f.crossbeam_epoch_0_7_1.std or false);
    lazy_static_1_2_0.default = true;
    memoffset_0_2_1.default = true;
    scopeguard_0_3_3.default = (f.scopeguard_0_3_3.default or false);
  }) [ arrayvec_0_4_10_features cfg_if_0_1_6_features crossbeam_utils_0_6_5_features lazy_static_1_2_0_features memoffset_0_2_1_features scopeguard_0_3_3_features ];
  crossbeam_utils_0_6_5 = { features?(crossbeam_utils_0_6_5_features {}) }: crossbeam_utils_0_6_5_ {
    dependencies = mapFeatures features ([ cfg_if_0_1_6 ]
      ++ (if features.crossbeam_utils_0_6_5.lazy_static or false then [ lazy_static_1_2_0 ] else []));
    features = mkFeatures (features.crossbeam_utils_0_6_5 or {});
  };
  crossbeam_utils_0_6_5_features = f: updateFeatures f (rec {
    cfg_if_0_1_6.default = true;
    crossbeam_utils_0_6_5.default = (f.crossbeam_utils_0_6_5.default or true);
    crossbeam_utils_0_6_5.lazy_static =
      (f.crossbeam_utils_0_6_5.lazy_static or false) ||
      (f.crossbeam_utils_0_6_5.std or false) ||
      (crossbeam_utils_0_6_5.std or false);
    crossbeam_utils_0_6_5.std =
      (f.crossbeam_utils_0_6_5.std or false) ||
      (f.crossbeam_utils_0_6_5.default or false) ||
      (crossbeam_utils_0_6_5.default or false);
    lazy_static_1_2_0.default = true;
  }) [ cfg_if_0_1_6_features lazy_static_1_2_0_features ];
  db_0_1_0 = { features?(db_0_1_0_features {}) }: db_0_1_0_ {
    dependencies = mapFeatures features ([ apply_0_2_2 chrono_0_4_6 diesel_1_4_1 pool_0_1_0 serde_1_0_88 uuid_0_6_5 ]);
  };
  db_0_1_0_features = f: updateFeatures f (rec {
    apply_0_2_2.default = true;
    chrono_0_4_6.default = true;
    chrono_0_4_6.serde = true;
    db_0_1_0.default = (f.db_0_1_0.default or true);
    diesel_1_4_1.chrono = true;
    diesel_1_4_1.default = true;
    diesel_1_4_1.postgres = true;
    diesel_1_4_1.serde_json = true;
    diesel_1_4_1.uuid = true;
    pool_0_1_0.default = true;
    serde_1_0_88.default = true;
    serde_1_0_88.derive = true;
    uuid_0_6_5.default = true;
    uuid_0_6_5.serde = true;
  }) [ apply_0_2_2_features chrono_0_4_6_features diesel_1_4_1_features pool_0_1_0_features serde_1_0_88_features uuid_0_6_5_features ];
  diesel_1_4_1 = { features?(diesel_1_4_1_features {}) }: diesel_1_4_1_ {
    dependencies = mapFeatures features ([ byteorder_1_3_1 diesel_derives_1_4_0 ]
      ++ (if features.diesel_1_4_1.bitflags or false then [ bitflags_1_0_4 ] else [])
      ++ (if features.diesel_1_4_1.chrono or false then [ chrono_0_4_6 ] else [])
      ++ (if features.diesel_1_4_1.pq-sys or false then [ pq_sys_0_4_6 ] else [])
      ++ (if features.diesel_1_4_1.r2d2 or false then [ r2d2_0_8_3 ] else [])
      ++ (if features.diesel_1_4_1.serde_json or false then [ serde_json_1_0_38 ] else [])
      ++ (if features.diesel_1_4_1.uuid or false then [ uuid_0_6_5 ] else []));
    features = mkFeatures (features.diesel_1_4_1 or {});
  };
  diesel_1_4_1_features = f: updateFeatures f (rec {
    bitflags_1_0_4.default = true;
    byteorder_1_3_1.default = true;
    chrono_0_4_6.default = true;
    diesel_1_4_1.128-column-tables =
      (f.diesel_1_4_1.128-column-tables or false) ||
      (f.diesel_1_4_1.x128-column-tables or false) ||
      (diesel_1_4_1.x128-column-tables or false);
    diesel_1_4_1.32-column-tables =
      (f.diesel_1_4_1.32-column-tables or false) ||
      (f.diesel_1_4_1.64-column-tables or false) ||
      (diesel_1_4_1.64-column-tables or false) ||
      (f.diesel_1_4_1.default or false) ||
      (diesel_1_4_1.default or false) ||
      (f.diesel_1_4_1.large-tables or false) ||
      (diesel_1_4_1.large-tables or false) ||
      (f.diesel_1_4_1.x32-column-tables or false) ||
      (diesel_1_4_1.x32-column-tables or false);
    diesel_1_4_1.64-column-tables =
      (f.diesel_1_4_1.64-column-tables or false) ||
      (f.diesel_1_4_1.128-column-tables or false) ||
      (diesel_1_4_1.128-column-tables or false) ||
      (f.diesel_1_4_1.huge-tables or false) ||
      (diesel_1_4_1.huge-tables or false) ||
      (f.diesel_1_4_1.x64-column-tables or false) ||
      (diesel_1_4_1.x64-column-tables or false);
    diesel_1_4_1.bigdecimal =
      (f.diesel_1_4_1.bigdecimal or false) ||
      (f.diesel_1_4_1.numeric or false) ||
      (diesel_1_4_1.numeric or false);
    diesel_1_4_1.bitflags =
      (f.diesel_1_4_1.bitflags or false) ||
      (f.diesel_1_4_1.postgres or false) ||
      (diesel_1_4_1.postgres or false);
    diesel_1_4_1.chrono =
      (f.diesel_1_4_1.chrono or false) ||
      (f.diesel_1_4_1.extras or false) ||
      (diesel_1_4_1.extras or false);
    diesel_1_4_1.default = (f.diesel_1_4_1.default or true);
    diesel_1_4_1.deprecated-time =
      (f.diesel_1_4_1.deprecated-time or false) ||
      (f.diesel_1_4_1.extras or false) ||
      (diesel_1_4_1.extras or false);
    diesel_1_4_1.ipnetwork =
      (f.diesel_1_4_1.ipnetwork or false) ||
      (f.diesel_1_4_1.network-address or false) ||
      (diesel_1_4_1.network-address or false);
    diesel_1_4_1.libc =
      (f.diesel_1_4_1.libc or false) ||
      (f.diesel_1_4_1.network-address or false) ||
      (diesel_1_4_1.network-address or false);
    diesel_1_4_1.libsqlite3-sys =
      (f.diesel_1_4_1.libsqlite3-sys or false) ||
      (f.diesel_1_4_1.sqlite or false) ||
      (diesel_1_4_1.sqlite or false);
    diesel_1_4_1.mysqlclient-sys =
      (f.diesel_1_4_1.mysqlclient-sys or false) ||
      (f.diesel_1_4_1.mysql or false) ||
      (diesel_1_4_1.mysql or false);
    diesel_1_4_1.network-address =
      (f.diesel_1_4_1.network-address or false) ||
      (f.diesel_1_4_1.extras or false) ||
      (diesel_1_4_1.extras or false);
    diesel_1_4_1.num-bigint =
      (f.diesel_1_4_1.num-bigint or false) ||
      (f.diesel_1_4_1.numeric or false) ||
      (diesel_1_4_1.numeric or false);
    diesel_1_4_1.num-integer =
      (f.diesel_1_4_1.num-integer or false) ||
      (f.diesel_1_4_1.numeric or false) ||
      (diesel_1_4_1.numeric or false);
    diesel_1_4_1.num-traits =
      (f.diesel_1_4_1.num-traits or false) ||
      (f.diesel_1_4_1.numeric or false) ||
      (diesel_1_4_1.numeric or false);
    diesel_1_4_1.numeric =
      (f.diesel_1_4_1.numeric or false) ||
      (f.diesel_1_4_1.extras or false) ||
      (diesel_1_4_1.extras or false);
    diesel_1_4_1.pq-sys =
      (f.diesel_1_4_1.pq-sys or false) ||
      (f.diesel_1_4_1.postgres or false) ||
      (diesel_1_4_1.postgres or false);
    diesel_1_4_1.r2d2 =
      (f.diesel_1_4_1.r2d2 or false) ||
      (f.diesel_1_4_1.extras or false) ||
      (diesel_1_4_1.extras or false);
    diesel_1_4_1.serde_json =
      (f.diesel_1_4_1.serde_json or false) ||
      (f.diesel_1_4_1.extras or false) ||
      (diesel_1_4_1.extras or false);
    diesel_1_4_1.time =
      (f.diesel_1_4_1.time or false) ||
      (f.diesel_1_4_1.deprecated-time or false) ||
      (diesel_1_4_1.deprecated-time or false);
    diesel_1_4_1.url =
      (f.diesel_1_4_1.url or false) ||
      (f.diesel_1_4_1.mysql or false) ||
      (diesel_1_4_1.mysql or false);
    diesel_1_4_1.uuid =
      (f.diesel_1_4_1.uuid or false) ||
      (f.diesel_1_4_1.extras or false) ||
      (diesel_1_4_1.extras or false);
    diesel_1_4_1.with-deprecated =
      (f.diesel_1_4_1.with-deprecated or false) ||
      (f.diesel_1_4_1.default or false) ||
      (diesel_1_4_1.default or false);
    diesel_derives_1_4_0.default = true;
    diesel_derives_1_4_0.mysql =
      (f.diesel_derives_1_4_0.mysql or false) ||
      (diesel_1_4_1.mysql or false) ||
      (f.diesel_1_4_1.mysql or false);
    diesel_derives_1_4_0.nightly =
      (f.diesel_derives_1_4_0.nightly or false) ||
      (diesel_1_4_1.unstable or false) ||
      (f.diesel_1_4_1.unstable or false);
    diesel_derives_1_4_0.postgres =
      (f.diesel_derives_1_4_0.postgres or false) ||
      (diesel_1_4_1.postgres or false) ||
      (f.diesel_1_4_1.postgres or false);
    diesel_derives_1_4_0.sqlite =
      (f.diesel_derives_1_4_0.sqlite or false) ||
      (diesel_1_4_1.sqlite or false) ||
      (f.diesel_1_4_1.sqlite or false);
    pq_sys_0_4_6.default = true;
    r2d2_0_8_3.default = true;
    serde_json_1_0_38.default = true;
    uuid_0_6_5.default = true;
    uuid_0_6_5.use_std = true;
  }) [ bitflags_1_0_4_features byteorder_1_3_1_features chrono_0_4_6_features diesel_derives_1_4_0_features pq_sys_0_4_6_features r2d2_0_8_3_features serde_json_1_0_38_features uuid_0_6_5_features ];
  diesel_derives_1_4_0 = { features?(diesel_derives_1_4_0_features {}) }: diesel_derives_1_4_0_ {
    dependencies = mapFeatures features ([ proc_macro2_0_4_27 quote_0_6_11 syn_0_15_26 ]);
    features = mkFeatures (features.diesel_derives_1_4_0 or {});
  };
  diesel_derives_1_4_0_features = f: updateFeatures f (rec {
    diesel_derives_1_4_0.default = (f.diesel_derives_1_4_0.default or true);
    proc_macro2_0_4_27.default = true;
    proc_macro2_0_4_27.nightly =
      (f.proc_macro2_0_4_27.nightly or false) ||
      (diesel_derives_1_4_0.nightly or false) ||
      (f.diesel_derives_1_4_0.nightly or false);
    quote_0_6_11.default = true;
    syn_0_15_26.default = true;
    syn_0_15_26.fold = true;
    syn_0_15_26.full = true;
  }) [ proc_macro2_0_4_27_features quote_0_6_11_features syn_0_15_26_features ];
  digest_0_8_0 = { features?(digest_0_8_0_features {}) }: digest_0_8_0_ {
    dependencies = mapFeatures features ([ generic_array_0_12_0 ]);
    features = mkFeatures (features.digest_0_8_0 or {});
  };
  digest_0_8_0_features = f: updateFeatures f (rec {
    digest_0_8_0.blobby =
      (f.digest_0_8_0.blobby or false) ||
      (f.digest_0_8_0.dev or false) ||
      (digest_0_8_0.dev or false);
    digest_0_8_0.default = (f.digest_0_8_0.default or true);
    generic_array_0_12_0.default = true;
  }) [ generic_array_0_12_0_features ];
  dtoa_0_4_3 = { features?(dtoa_0_4_3_features {}) }: dtoa_0_4_3_ {};
  dtoa_0_4_3_features = f: updateFeatures f (rec {
    dtoa_0_4_3.default = (f.dtoa_0_4_3.default or true);
  }) [];
  env_logger_0_6_0 = { features?(env_logger_0_6_0_features {}) }: env_logger_0_6_0_ {
    dependencies = mapFeatures features ([ log_0_4_6 ]
      ++ (if features.env_logger_0_6_0.atty or false then [ atty_0_2_11 ] else [])
      ++ (if features.env_logger_0_6_0.humantime or false then [ humantime_1_2_0 ] else [])
      ++ (if features.env_logger_0_6_0.regex or false then [ regex_1_1_0 ] else [])
      ++ (if features.env_logger_0_6_0.termcolor or false then [ termcolor_1_0_4 ] else []));
    features = mkFeatures (features.env_logger_0_6_0 or {});
  };
  env_logger_0_6_0_features = f: updateFeatures f (rec {
    atty_0_2_11.default = true;
    env_logger_0_6_0.atty =
      (f.env_logger_0_6_0.atty or false) ||
      (f.env_logger_0_6_0.default or false) ||
      (env_logger_0_6_0.default or false);
    env_logger_0_6_0.default = (f.env_logger_0_6_0.default or true);
    env_logger_0_6_0.humantime =
      (f.env_logger_0_6_0.humantime or false) ||
      (f.env_logger_0_6_0.default or false) ||
      (env_logger_0_6_0.default or false);
    env_logger_0_6_0.regex =
      (f.env_logger_0_6_0.regex or false) ||
      (f.env_logger_0_6_0.default or false) ||
      (env_logger_0_6_0.default or false);
    env_logger_0_6_0.termcolor =
      (f.env_logger_0_6_0.termcolor or false) ||
      (f.env_logger_0_6_0.default or false) ||
      (env_logger_0_6_0.default or false);
    humantime_1_2_0.default = true;
    log_0_4_6.default = true;
    log_0_4_6.std = true;
    regex_1_1_0.default = true;
    termcolor_1_0_4.default = true;
  }) [ atty_0_2_11_features humantime_1_2_0_features log_0_4_6_features regex_1_1_0_features termcolor_1_0_4_features ];
  fake_simd_0_1_2 = { features?(fake_simd_0_1_2_features {}) }: fake_simd_0_1_2_ {};
  fake_simd_0_1_2_features = f: updateFeatures f (rec {
    fake_simd_0_1_2.default = (f.fake_simd_0_1_2.default or true);
  }) [];
  fnv_1_0_6 = { features?(fnv_1_0_6_features {}) }: fnv_1_0_6_ {};
  fnv_1_0_6_features = f: updateFeatures f (rec {
    fnv_1_0_6.default = (f.fnv_1_0_6.default or true);
  }) [];
  foreign_types_0_3_2 = { features?(foreign_types_0_3_2_features {}) }: foreign_types_0_3_2_ {
    dependencies = mapFeatures features ([ foreign_types_shared_0_1_1 ]);
  };
  foreign_types_0_3_2_features = f: updateFeatures f (rec {
    foreign_types_0_3_2.default = (f.foreign_types_0_3_2.default or true);
    foreign_types_shared_0_1_1.default = true;
  }) [ foreign_types_shared_0_1_1_features ];
  foreign_types_shared_0_1_1 = { features?(foreign_types_shared_0_1_1_features {}) }: foreign_types_shared_0_1_1_ {};
  foreign_types_shared_0_1_1_features = f: updateFeatures f (rec {
    foreign_types_shared_0_1_1.default = (f.foreign_types_shared_0_1_1.default or true);
  }) [];
  frank_jwt_3_1_0 = { features?(frank_jwt_3_1_0_features {}) }: frank_jwt_3_1_0_ {
    dependencies = mapFeatures features ([ base64_0_10_1 openssl_0_10_16 serde_1_0_88 serde_json_1_0_38 ]);
  };
  frank_jwt_3_1_0_features = f: updateFeatures f (rec {
    base64_0_10_1.default = true;
    frank_jwt_3_1_0.default = (f.frank_jwt_3_1_0.default or true);
    openssl_0_10_16.default = true;
    serde_1_0_88.default = true;
    serde_json_1_0_38.default = true;
  }) [ base64_0_10_1_features openssl_0_10_16_features serde_1_0_88_features serde_json_1_0_38_features ];
  fuchsia_cprng_0_1_1 = { features?(fuchsia_cprng_0_1_1_features {}) }: fuchsia_cprng_0_1_1_ {};
  fuchsia_cprng_0_1_1_features = f: updateFeatures f (rec {
    fuchsia_cprng_0_1_1.default = (f.fuchsia_cprng_0_1_1.default or true);
  }) [];
  fuchsia_zircon_0_3_3 = { features?(fuchsia_zircon_0_3_3_features {}) }: fuchsia_zircon_0_3_3_ {
    dependencies = mapFeatures features ([ bitflags_1_0_4 fuchsia_zircon_sys_0_3_3 ]);
  };
  fuchsia_zircon_0_3_3_features = f: updateFeatures f (rec {
    bitflags_1_0_4.default = true;
    fuchsia_zircon_0_3_3.default = (f.fuchsia_zircon_0_3_3.default or true);
    fuchsia_zircon_sys_0_3_3.default = true;
  }) [ bitflags_1_0_4_features fuchsia_zircon_sys_0_3_3_features ];
  fuchsia_zircon_sys_0_3_3 = { features?(fuchsia_zircon_sys_0_3_3_features {}) }: fuchsia_zircon_sys_0_3_3_ {};
  fuchsia_zircon_sys_0_3_3_features = f: updateFeatures f (rec {
    fuchsia_zircon_sys_0_3_3.default = (f.fuchsia_zircon_sys_0_3_3.default or true);
  }) [];
  futures_0_1_25 = { features?(futures_0_1_25_features {}) }: futures_0_1_25_ {
    features = mkFeatures (features.futures_0_1_25 or {});
  };
  futures_0_1_25_features = f: updateFeatures f (rec {
    futures_0_1_25.default = (f.futures_0_1_25.default or true);
    futures_0_1_25.use_std =
      (f.futures_0_1_25.use_std or false) ||
      (f.futures_0_1_25.default or false) ||
      (futures_0_1_25.default or false);
    futures_0_1_25.with-deprecated =
      (f.futures_0_1_25.with-deprecated or false) ||
      (f.futures_0_1_25.default or false) ||
      (futures_0_1_25.default or false);
  }) [];
  futures_cpupool_0_1_8 = { features?(futures_cpupool_0_1_8_features {}) }: futures_cpupool_0_1_8_ {
    dependencies = mapFeatures features ([ futures_0_1_25 num_cpus_1_10_0 ]);
    features = mkFeatures (features.futures_cpupool_0_1_8 or {});
  };
  futures_cpupool_0_1_8_features = f: updateFeatures f (rec {
    futures_0_1_25.default = (f.futures_0_1_25.default or false);
    futures_0_1_25.use_std = true;
    futures_0_1_25.with-deprecated =
      (f.futures_0_1_25.with-deprecated or false) ||
      (futures_cpupool_0_1_8.with-deprecated or false) ||
      (f.futures_cpupool_0_1_8.with-deprecated or false);
    futures_cpupool_0_1_8.default = (f.futures_cpupool_0_1_8.default or true);
    futures_cpupool_0_1_8.with-deprecated =
      (f.futures_cpupool_0_1_8.with-deprecated or false) ||
      (f.futures_cpupool_0_1_8.default or false) ||
      (futures_cpupool_0_1_8.default or false);
    num_cpus_1_10_0.default = true;
  }) [ futures_0_1_25_features num_cpus_1_10_0_features ];
  generic_array_0_12_0 = { features?(generic_array_0_12_0_features {}) }: generic_array_0_12_0_ {
    dependencies = mapFeatures features ([ typenum_1_10_0 ]);
  };
  generic_array_0_12_0_features = f: updateFeatures f (rec {
    generic_array_0_12_0.default = (f.generic_array_0_12_0.default or true);
    typenum_1_10_0.default = true;
  }) [ typenum_1_10_0_features ];
  h2_0_1_16 = { features?(h2_0_1_16_features {}) }: h2_0_1_16_ {
    dependencies = mapFeatures features ([ byteorder_1_3_1 bytes_0_4_11 fnv_1_0_6 futures_0_1_25 http_0_1_15 indexmap_1_0_2 log_0_4_6 slab_0_4_2 string_0_1_3 tokio_io_0_1_11 ]);
    features = mkFeatures (features.h2_0_1_16 or {});
  };
  h2_0_1_16_features = f: updateFeatures f (rec {
    byteorder_1_3_1.default = true;
    bytes_0_4_11.default = true;
    fnv_1_0_6.default = true;
    futures_0_1_25.default = true;
    h2_0_1_16.default = (f.h2_0_1_16.default or true);
    http_0_1_15.default = true;
    indexmap_1_0_2.default = true;
    log_0_4_6.default = true;
    slab_0_4_2.default = true;
    string_0_1_3.default = true;
    tokio_io_0_1_11.default = true;
  }) [ byteorder_1_3_1_features bytes_0_4_11_features fnv_1_0_6_features futures_0_1_25_features http_0_1_15_features indexmap_1_0_2_features log_0_4_6_features slab_0_4_2_features string_0_1_3_features tokio_io_0_1_11_features ];
  headers_0_2_1 = { features?(headers_0_2_1_features {}) }: headers_0_2_1_ {
    dependencies = mapFeatures features ([ base64_0_10_1 bitflags_1_0_4 bytes_0_4_11 headers_core_0_1_0 headers_derive_0_1_0 http_0_1_15 mime_0_3_13 sha_1_0_8_1 time_0_1_42 ]);
    features = mkFeatures (features.headers_0_2_1 or {});
  };
  headers_0_2_1_features = f: updateFeatures f (rec {
    base64_0_10_1.default = true;
    bitflags_1_0_4.default = true;
    bytes_0_4_11.default = true;
    headers_0_2_1.default = (f.headers_0_2_1.default or true);
    headers_core_0_1_0.default = true;
    headers_derive_0_1_0.default = true;
    http_0_1_15.default = true;
    mime_0_3_13.default = true;
    sha_1_0_8_1.default = true;
    time_0_1_42.default = true;
  }) [ base64_0_10_1_features bitflags_1_0_4_features bytes_0_4_11_features headers_core_0_1_0_features headers_derive_0_1_0_features http_0_1_15_features mime_0_3_13_features sha_1_0_8_1_features time_0_1_42_features ];
  headers_core_0_1_0 = { features?(headers_core_0_1_0_features {}) }: headers_core_0_1_0_ {
    dependencies = mapFeatures features ([ bytes_0_4_11 http_0_1_15 ]);
  };
  headers_core_0_1_0_features = f: updateFeatures f (rec {
    bytes_0_4_11.default = true;
    headers_core_0_1_0.default = (f.headers_core_0_1_0.default or true);
    http_0_1_15.default = true;
  }) [ bytes_0_4_11_features http_0_1_15_features ];
  headers_derive_0_1_0 = { features?(headers_derive_0_1_0_features {}) }: headers_derive_0_1_0_ {
    dependencies = mapFeatures features ([ proc_macro2_0_4_27 quote_0_6_11 syn_0_15_26 ]);
  };
  headers_derive_0_1_0_features = f: updateFeatures f (rec {
    headers_derive_0_1_0.default = (f.headers_derive_0_1_0.default or true);
    proc_macro2_0_4_27.default = true;
    quote_0_6_11.default = true;
    syn_0_15_26.default = true;
  }) [ proc_macro2_0_4_27_features quote_0_6_11_features syn_0_15_26_features ];
  http_0_1_15 = { features?(http_0_1_15_features {}) }: http_0_1_15_ {
    dependencies = mapFeatures features ([ bytes_0_4_11 fnv_1_0_6 itoa_0_4_3 ]);
  };
  http_0_1_15_features = f: updateFeatures f (rec {
    bytes_0_4_11.default = true;
    fnv_1_0_6.default = true;
    http_0_1_15.default = (f.http_0_1_15.default or true);
    itoa_0_4_3.default = true;
  }) [ bytes_0_4_11_features fnv_1_0_6_features itoa_0_4_3_features ];
  httparse_1_3_3 = { features?(httparse_1_3_3_features {}) }: httparse_1_3_3_ {
    features = mkFeatures (features.httparse_1_3_3 or {});
  };
  httparse_1_3_3_features = f: updateFeatures f (rec {
    httparse_1_3_3.default = (f.httparse_1_3_3.default or true);
    httparse_1_3_3.std =
      (f.httparse_1_3_3.std or false) ||
      (f.httparse_1_3_3.default or false) ||
      (httparse_1_3_3.default or false);
  }) [];
  humantime_1_2_0 = { features?(humantime_1_2_0_features {}) }: humantime_1_2_0_ {
    dependencies = mapFeatures features ([ quick_error_1_2_2 ]);
  };
  humantime_1_2_0_features = f: updateFeatures f (rec {
    humantime_1_2_0.default = (f.humantime_1_2_0.default or true);
    quick_error_1_2_2.default = true;
  }) [ quick_error_1_2_2_features ];
  hyper_0_12_24 = { features?(hyper_0_12_24_features {}) }: hyper_0_12_24_ {
    dependencies = mapFeatures features ([ bytes_0_4_11 futures_0_1_25 h2_0_1_16 http_0_1_15 httparse_1_3_3 iovec_0_1_2 itoa_0_4_3 log_0_4_6 time_0_1_42 tokio_io_0_1_11 want_0_0_6 ]
      ++ (if features.hyper_0_12_24.futures-cpupool or false then [ futures_cpupool_0_1_8 ] else [])
      ++ (if features.hyper_0_12_24.net2 or false then [ net2_0_2_33 ] else [])
      ++ (if features.hyper_0_12_24.tokio or false then [ tokio_0_1_15 ] else [])
      ++ (if features.hyper_0_12_24.tokio-executor or false then [ tokio_executor_0_1_6 ] else [])
      ++ (if features.hyper_0_12_24.tokio-reactor or false then [ tokio_reactor_0_1_8 ] else [])
      ++ (if features.hyper_0_12_24.tokio-tcp or false then [ tokio_tcp_0_1_3 ] else [])
      ++ (if features.hyper_0_12_24.tokio-threadpool or false then [ tokio_threadpool_0_1_11 ] else [])
      ++ (if features.hyper_0_12_24.tokio-timer or false then [ tokio_timer_0_2_10 ] else []));
    features = mkFeatures (features.hyper_0_12_24 or {});
  };
  hyper_0_12_24_features = f: updateFeatures f (rec {
    bytes_0_4_11.default = true;
    futures_0_1_25.default = true;
    futures_cpupool_0_1_8.default = true;
    h2_0_1_16.default = true;
    http_0_1_15.default = true;
    httparse_1_3_3.default = true;
    hyper_0_12_24.__internal_flaky_tests =
      (f.hyper_0_12_24.__internal_flaky_tests or false) ||
      (f.hyper_0_12_24.default or false) ||
      (hyper_0_12_24.default or false);
    hyper_0_12_24.default = (f.hyper_0_12_24.default or true);
    hyper_0_12_24.futures-cpupool =
      (f.hyper_0_12_24.futures-cpupool or false) ||
      (f.hyper_0_12_24.runtime or false) ||
      (hyper_0_12_24.runtime or false);
    hyper_0_12_24.net2 =
      (f.hyper_0_12_24.net2 or false) ||
      (f.hyper_0_12_24.runtime or false) ||
      (hyper_0_12_24.runtime or false);
    hyper_0_12_24.runtime =
      (f.hyper_0_12_24.runtime or false) ||
      (f.hyper_0_12_24.default or false) ||
      (hyper_0_12_24.default or false);
    hyper_0_12_24.tokio =
      (f.hyper_0_12_24.tokio or false) ||
      (f.hyper_0_12_24.runtime or false) ||
      (hyper_0_12_24.runtime or false);
    hyper_0_12_24.tokio-executor =
      (f.hyper_0_12_24.tokio-executor or false) ||
      (f.hyper_0_12_24.runtime or false) ||
      (hyper_0_12_24.runtime or false);
    hyper_0_12_24.tokio-reactor =
      (f.hyper_0_12_24.tokio-reactor or false) ||
      (f.hyper_0_12_24.runtime or false) ||
      (hyper_0_12_24.runtime or false);
    hyper_0_12_24.tokio-tcp =
      (f.hyper_0_12_24.tokio-tcp or false) ||
      (f.hyper_0_12_24.runtime or false) ||
      (hyper_0_12_24.runtime or false);
    hyper_0_12_24.tokio-threadpool =
      (f.hyper_0_12_24.tokio-threadpool or false) ||
      (f.hyper_0_12_24.runtime or false) ||
      (hyper_0_12_24.runtime or false);
    hyper_0_12_24.tokio-timer =
      (f.hyper_0_12_24.tokio-timer or false) ||
      (f.hyper_0_12_24.runtime or false) ||
      (hyper_0_12_24.runtime or false);
    iovec_0_1_2.default = true;
    itoa_0_4_3.default = true;
    log_0_4_6.default = true;
    net2_0_2_33.default = true;
    time_0_1_42.default = true;
    tokio_0_1_15.default = (f.tokio_0_1_15.default or false);
    tokio_0_1_15.rt-full = true;
    tokio_executor_0_1_6.default = true;
    tokio_io_0_1_11.default = true;
    tokio_reactor_0_1_8.default = true;
    tokio_tcp_0_1_3.default = true;
    tokio_threadpool_0_1_11.default = true;
    tokio_timer_0_2_10.default = true;
    want_0_0_6.default = true;
  }) [ bytes_0_4_11_features futures_0_1_25_features futures_cpupool_0_1_8_features h2_0_1_16_features http_0_1_15_features httparse_1_3_3_features iovec_0_1_2_features itoa_0_4_3_features log_0_4_6_features net2_0_2_33_features time_0_1_42_features tokio_0_1_15_features tokio_executor_0_1_6_features tokio_io_0_1_11_features tokio_reactor_0_1_8_features tokio_tcp_0_1_3_features tokio_threadpool_0_1_11_features tokio_timer_0_2_10_features want_0_0_6_features ];
  hyper_tls_0_3_1 = { features?(hyper_tls_0_3_1_features {}) }: hyper_tls_0_3_1_ {
    dependencies = mapFeatures features ([ bytes_0_4_11 futures_0_1_25 hyper_0_12_24 native_tls_0_2_2 tokio_io_0_1_11 ]);
    features = mkFeatures (features.hyper_tls_0_3_1 or {});
  };
  hyper_tls_0_3_1_features = f: updateFeatures f (rec {
    bytes_0_4_11.default = true;
    futures_0_1_25.default = true;
    hyper_0_12_24.default = true;
    hyper_tls_0_3_1.default = (f.hyper_tls_0_3_1.default or true);
    native_tls_0_2_2.default = true;
    native_tls_0_2_2.vendored =
      (f.native_tls_0_2_2.vendored or false) ||
      (hyper_tls_0_3_1.vendored or false) ||
      (f.hyper_tls_0_3_1.vendored or false);
    tokio_io_0_1_11.default = true;
  }) [ bytes_0_4_11_features futures_0_1_25_features hyper_0_12_24_features native_tls_0_2_2_features tokio_io_0_1_11_features ];
  idna_0_1_5 = { features?(idna_0_1_5_features {}) }: idna_0_1_5_ {
    dependencies = mapFeatures features ([ matches_0_1_8 unicode_bidi_0_3_4 unicode_normalization_0_1_8 ]);
  };
  idna_0_1_5_features = f: updateFeatures f (rec {
    idna_0_1_5.default = (f.idna_0_1_5.default or true);
    matches_0_1_8.default = true;
    unicode_bidi_0_3_4.default = true;
    unicode_normalization_0_1_8.default = true;
  }) [ matches_0_1_8_features unicode_bidi_0_3_4_features unicode_normalization_0_1_8_features ];
  indexmap_1_0_2 = { features?(indexmap_1_0_2_features {}) }: indexmap_1_0_2_ {
    dependencies = mapFeatures features ([]);
    features = mkFeatures (features.indexmap_1_0_2 or {});
  };
  indexmap_1_0_2_features = f: updateFeatures f (rec {
    indexmap_1_0_2.default = (f.indexmap_1_0_2.default or true);
    indexmap_1_0_2.serde =
      (f.indexmap_1_0_2.serde or false) ||
      (f.indexmap_1_0_2.serde-1 or false) ||
      (indexmap_1_0_2.serde-1 or false);
  }) [];
  input_buffer_0_2_0 = { features?(input_buffer_0_2_0_features {}) }: input_buffer_0_2_0_ {
    dependencies = mapFeatures features ([ bytes_0_4_11 ]);
  };
  input_buffer_0_2_0_features = f: updateFeatures f (rec {
    bytes_0_4_11.default = true;
    input_buffer_0_2_0.default = (f.input_buffer_0_2_0.default or true);
  }) [ bytes_0_4_11_features ];
  iovec_0_1_2 = { features?(iovec_0_1_2_features {}) }: iovec_0_1_2_ {
    dependencies = (if (kernel == "linux" || kernel == "darwin") then mapFeatures features ([ libc_0_2_48 ]) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ winapi_0_2_8 ]) else []);
  };
  iovec_0_1_2_features = f: updateFeatures f (rec {
    iovec_0_1_2.default = (f.iovec_0_1_2.default or true);
    libc_0_2_48.default = true;
    winapi_0_2_8.default = true;
  }) [ libc_0_2_48_features winapi_0_2_8_features ];
  itoa_0_4_3 = { features?(itoa_0_4_3_features {}) }: itoa_0_4_3_ {
    features = mkFeatures (features.itoa_0_4_3 or {});
  };
  itoa_0_4_3_features = f: updateFeatures f (rec {
    itoa_0_4_3.default = (f.itoa_0_4_3.default or true);
    itoa_0_4_3.std =
      (f.itoa_0_4_3.std or false) ||
      (f.itoa_0_4_3.default or false) ||
      (itoa_0_4_3.default or false);
  }) [];
  kernel32_sys_0_2_2 = { features?(kernel32_sys_0_2_2_features {}) }: kernel32_sys_0_2_2_ {
    dependencies = mapFeatures features ([ winapi_0_2_8 ]);
    buildDependencies = mapFeatures features ([ winapi_build_0_1_1 ]);
  };
  kernel32_sys_0_2_2_features = f: updateFeatures f (rec {
    kernel32_sys_0_2_2.default = (f.kernel32_sys_0_2_2.default or true);
    winapi_0_2_8.default = true;
    winapi_build_0_1_1.default = true;
  }) [ winapi_0_2_8_features winapi_build_0_1_1_features ];
  lazy_static_1_2_0 = { features?(lazy_static_1_2_0_features {}) }: lazy_static_1_2_0_ {
    dependencies = mapFeatures features ([]);
    features = mkFeatures (features.lazy_static_1_2_0 or {});
  };
  lazy_static_1_2_0_features = f: updateFeatures f (rec {
    lazy_static_1_2_0.default = (f.lazy_static_1_2_0.default or true);
    lazy_static_1_2_0.spin =
      (f.lazy_static_1_2_0.spin or false) ||
      (f.lazy_static_1_2_0.spin_no_std or false) ||
      (lazy_static_1_2_0.spin_no_std or false);
  }) [];
  lazycell_1_2_1 = { features?(lazycell_1_2_1_features {}) }: lazycell_1_2_1_ {
    dependencies = mapFeatures features ([]);
    features = mkFeatures (features.lazycell_1_2_1 or {});
  };
  lazycell_1_2_1_features = f: updateFeatures f (rec {
    lazycell_1_2_1.clippy =
      (f.lazycell_1_2_1.clippy or false) ||
      (f.lazycell_1_2_1.nightly-testing or false) ||
      (lazycell_1_2_1.nightly-testing or false);
    lazycell_1_2_1.default = (f.lazycell_1_2_1.default or true);
    lazycell_1_2_1.nightly =
      (f.lazycell_1_2_1.nightly or false) ||
      (f.lazycell_1_2_1.nightly-testing or false) ||
      (lazycell_1_2_1.nightly-testing or false);
  }) [];
  libc_0_2_48 = { features?(libc_0_2_48_features {}) }: libc_0_2_48_ {
    dependencies = mapFeatures features ([]);
    features = mkFeatures (features.libc_0_2_48 or {});
  };
  libc_0_2_48_features = f: updateFeatures f (rec {
    libc_0_2_48.align =
      (f.libc_0_2_48.align or false) ||
      (f.libc_0_2_48.rustc-dep-of-std or false) ||
      (libc_0_2_48.rustc-dep-of-std or false);
    libc_0_2_48.default = (f.libc_0_2_48.default or true);
    libc_0_2_48.rustc-std-workspace-core =
      (f.libc_0_2_48.rustc-std-workspace-core or false) ||
      (f.libc_0_2_48.rustc-dep-of-std or false) ||
      (libc_0_2_48.rustc-dep-of-std or false);
    libc_0_2_48.use_std =
      (f.libc_0_2_48.use_std or false) ||
      (f.libc_0_2_48.default or false) ||
      (libc_0_2_48.default or false);
  }) [];
  lock_api_0_1_5 = { features?(lock_api_0_1_5_features {}) }: lock_api_0_1_5_ {
    dependencies = mapFeatures features ([ scopeguard_0_3_3 ]
      ++ (if features.lock_api_0_1_5.owning_ref or false then [ owning_ref_0_4_0 ] else []));
    features = mkFeatures (features.lock_api_0_1_5 or {});
  };
  lock_api_0_1_5_features = f: updateFeatures f (rec {
    lock_api_0_1_5.default = (f.lock_api_0_1_5.default or true);
    owning_ref_0_4_0.default = true;
    scopeguard_0_3_3.default = (f.scopeguard_0_3_3.default or false);
  }) [ owning_ref_0_4_0_features scopeguard_0_3_3_features ];
  log_0_4_6 = { features?(log_0_4_6_features {}) }: log_0_4_6_ {
    dependencies = mapFeatures features ([ cfg_if_0_1_6 ]);
    features = mkFeatures (features.log_0_4_6 or {});
  };
  log_0_4_6_features = f: updateFeatures f (rec {
    cfg_if_0_1_6.default = true;
    log_0_4_6.default = (f.log_0_4_6.default or true);
  }) [ cfg_if_0_1_6_features ];
  matches_0_1_8 = { features?(matches_0_1_8_features {}) }: matches_0_1_8_ {};
  matches_0_1_8_features = f: updateFeatures f (rec {
    matches_0_1_8.default = (f.matches_0_1_8.default or true);
  }) [];
  memchr_2_2_0 = { features?(memchr_2_2_0_features {}) }: memchr_2_2_0_ {
    dependencies = mapFeatures features ([]);
    features = mkFeatures (features.memchr_2_2_0 or {});
  };
  memchr_2_2_0_features = f: updateFeatures f (rec {
    memchr_2_2_0.default = (f.memchr_2_2_0.default or true);
    memchr_2_2_0.use_std =
      (f.memchr_2_2_0.use_std or false) ||
      (f.memchr_2_2_0.default or false) ||
      (memchr_2_2_0.default or false);
  }) [];
  memoffset_0_2_1 = { features?(memoffset_0_2_1_features {}) }: memoffset_0_2_1_ {};
  memoffset_0_2_1_features = f: updateFeatures f (rec {
    memoffset_0_2_1.default = (f.memoffset_0_2_1.default or true);
  }) [];
  migrations_internals_1_4_0 = { features?(migrations_internals_1_4_0_features {}) }: migrations_internals_1_4_0_ {
    dependencies = mapFeatures features ([ diesel_1_4_1 ]);
  };
  migrations_internals_1_4_0_features = f: updateFeatures f (rec {
    diesel_1_4_1.default = (f.diesel_1_4_1.default or false);
    migrations_internals_1_4_0.default = (f.migrations_internals_1_4_0.default or true);
  }) [ diesel_1_4_1_features ];
  mime_0_3_13 = { features?(mime_0_3_13_features {}) }: mime_0_3_13_ {
    dependencies = mapFeatures features ([ unicase_2_2_0 ]);
  };
  mime_0_3_13_features = f: updateFeatures f (rec {
    mime_0_3_13.default = (f.mime_0_3_13.default or true);
    unicase_2_2_0.default = true;
  }) [ unicase_2_2_0_features ];
  mime_guess_2_0_0_alpha_6 = { features?(mime_guess_2_0_0_alpha_6_features {}) }: mime_guess_2_0_0_alpha_6_ {
    dependencies = mapFeatures features ([ mime_0_3_13 phf_0_7_24 unicase_1_4_2 ]);
    buildDependencies = mapFeatures features ([ phf_codegen_0_7_24 unicase_1_4_2 ]);
    features = mkFeatures (features.mime_guess_2_0_0_alpha_6 or {});
  };
  mime_guess_2_0_0_alpha_6_features = f: updateFeatures f (rec {
    mime_0_3_13.default = true;
    mime_guess_2_0_0_alpha_6.default = (f.mime_guess_2_0_0_alpha_6.default or true);
    phf_0_7_24.default = true;
    phf_0_7_24.unicase = true;
    phf_codegen_0_7_24.default = true;
    unicase_1_4_2.default = true;
  }) [ mime_0_3_13_features phf_0_7_24_features unicase_1_4_2_features phf_codegen_0_7_24_features unicase_1_4_2_features ];
  mio_0_6_16 = { features?(mio_0_6_16_features {}) }: mio_0_6_16_ {
    dependencies = mapFeatures features ([ iovec_0_1_2 lazycell_1_2_1 log_0_4_6 net2_0_2_33 slab_0_4_2 ])
      ++ (if kernel == "fuchsia" then mapFeatures features ([ fuchsia_zircon_0_3_3 fuchsia_zircon_sys_0_3_3 ]) else [])
      ++ (if (kernel == "linux" || kernel == "darwin") then mapFeatures features ([ libc_0_2_48 ]) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ kernel32_sys_0_2_2 miow_0_2_1 winapi_0_2_8 ]) else []);
    features = mkFeatures (features.mio_0_6_16 or {});
  };
  mio_0_6_16_features = f: updateFeatures f (rec {
    fuchsia_zircon_0_3_3.default = true;
    fuchsia_zircon_sys_0_3_3.default = true;
    iovec_0_1_2.default = true;
    kernel32_sys_0_2_2.default = true;
    lazycell_1_2_1.default = true;
    libc_0_2_48.default = true;
    log_0_4_6.default = true;
    mio_0_6_16.default = (f.mio_0_6_16.default or true);
    mio_0_6_16.with-deprecated =
      (f.mio_0_6_16.with-deprecated or false) ||
      (f.mio_0_6_16.default or false) ||
      (mio_0_6_16.default or false);
    miow_0_2_1.default = true;
    net2_0_2_33.default = true;
    slab_0_4_2.default = true;
    winapi_0_2_8.default = true;
  }) [ iovec_0_1_2_features lazycell_1_2_1_features log_0_4_6_features net2_0_2_33_features slab_0_4_2_features fuchsia_zircon_0_3_3_features fuchsia_zircon_sys_0_3_3_features libc_0_2_48_features kernel32_sys_0_2_2_features miow_0_2_1_features winapi_0_2_8_features ];
  mio_uds_0_6_7 = { features?(mio_uds_0_6_7_features {}) }: mio_uds_0_6_7_ {
    dependencies = (if (kernel == "linux" || kernel == "darwin") then mapFeatures features ([ iovec_0_1_2 libc_0_2_48 mio_0_6_16 ]) else []);
  };
  mio_uds_0_6_7_features = f: updateFeatures f (rec {
    iovec_0_1_2.default = true;
    libc_0_2_48.default = true;
    mio_0_6_16.default = true;
    mio_uds_0_6_7.default = (f.mio_uds_0_6_7.default or true);
  }) [ iovec_0_1_2_features libc_0_2_48_features mio_0_6_16_features ];
  miow_0_2_1 = { features?(miow_0_2_1_features {}) }: miow_0_2_1_ {
    dependencies = mapFeatures features ([ kernel32_sys_0_2_2 net2_0_2_33 winapi_0_2_8 ws2_32_sys_0_2_1 ]);
  };
  miow_0_2_1_features = f: updateFeatures f (rec {
    kernel32_sys_0_2_2.default = true;
    miow_0_2_1.default = (f.miow_0_2_1.default or true);
    net2_0_2_33.default = (f.net2_0_2_33.default or false);
    winapi_0_2_8.default = true;
    ws2_32_sys_0_2_1.default = true;
  }) [ kernel32_sys_0_2_2_features net2_0_2_33_features winapi_0_2_8_features ws2_32_sys_0_2_1_features ];
  native_tls_0_2_2 = { features?(native_tls_0_2_2_features {}) }: native_tls_0_2_2_ {
    dependencies = (if kernel == "darwin" || kernel == "ios" then mapFeatures features ([ lazy_static_1_2_0 libc_0_2_48 security_framework_0_2_2 security_framework_sys_0_2_3 tempfile_3_0_7 ]) else [])
      ++ (if !(kernel == "windows" || kernel == "darwin" || kernel == "ios") then mapFeatures features ([ openssl_0_10_16 openssl_probe_0_1_2 openssl_sys_0_9_40 ]) else [])
      ++ (if kernel == "android" then mapFeatures features ([ log_0_4_6 ]) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ schannel_0_1_14 ]) else []);
    features = mkFeatures (features.native_tls_0_2_2 or {});
  };
  native_tls_0_2_2_features = f: updateFeatures f (rec {
    lazy_static_1_2_0.default = true;
    libc_0_2_48.default = true;
    log_0_4_6.default = true;
    native_tls_0_2_2.default = (f.native_tls_0_2_2.default or true);
    openssl_0_10_16.default = true;
    openssl_probe_0_1_2.default = true;
    openssl_sys_0_9_40.default = true;
    schannel_0_1_14.default = true;
    security_framework_0_2_2.default = true;
    security_framework_sys_0_2_3.default = true;
    tempfile_3_0_7.default = true;
  }) [ lazy_static_1_2_0_features libc_0_2_48_features security_framework_0_2_2_features security_framework_sys_0_2_3_features tempfile_3_0_7_features openssl_0_10_16_features openssl_probe_0_1_2_features openssl_sys_0_9_40_features log_0_4_6_features schannel_0_1_14_features ];
  net2_0_2_33 = { features?(net2_0_2_33_features {}) }: net2_0_2_33_ {
    dependencies = mapFeatures features ([ cfg_if_0_1_6 ])
      ++ (if kernel == "redox" || (kernel == "linux" || kernel == "darwin") then mapFeatures features ([ libc_0_2_48 ]) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ winapi_0_3_6 ]) else []);
    features = mkFeatures (features.net2_0_2_33 or {});
  };
  net2_0_2_33_features = f: updateFeatures f (rec {
    cfg_if_0_1_6.default = true;
    libc_0_2_48.default = true;
    net2_0_2_33.default = (f.net2_0_2_33.default or true);
    net2_0_2_33.duration =
      (f.net2_0_2_33.duration or false) ||
      (f.net2_0_2_33.default or false) ||
      (net2_0_2_33.default or false);
    winapi_0_3_6.default = true;
    winapi_0_3_6.handleapi = true;
    winapi_0_3_6.winsock2 = true;
    winapi_0_3_6.ws2def = true;
    winapi_0_3_6.ws2ipdef = true;
    winapi_0_3_6.ws2tcpip = true;
  }) [ cfg_if_0_1_6_features libc_0_2_48_features winapi_0_3_6_features ];
  nodrop_0_1_13 = { features?(nodrop_0_1_13_features {}) }: nodrop_0_1_13_ {
    dependencies = mapFeatures features ([]);
    features = mkFeatures (features.nodrop_0_1_13 or {});
  };
  nodrop_0_1_13_features = f: updateFeatures f (rec {
    nodrop_0_1_13.default = (f.nodrop_0_1_13.default or true);
    nodrop_0_1_13.nodrop-union =
      (f.nodrop_0_1_13.nodrop-union or false) ||
      (f.nodrop_0_1_13.use_union or false) ||
      (nodrop_0_1_13.use_union or false);
    nodrop_0_1_13.std =
      (f.nodrop_0_1_13.std or false) ||
      (f.nodrop_0_1_13.default or false) ||
      (nodrop_0_1_13.default or false);
  }) [];
  num_integer_0_1_39 = { features?(num_integer_0_1_39_features {}) }: num_integer_0_1_39_ {
    dependencies = mapFeatures features ([ num_traits_0_2_6 ]);
    features = mkFeatures (features.num_integer_0_1_39 or {});
  };
  num_integer_0_1_39_features = f: updateFeatures f (rec {
    num_integer_0_1_39.default = (f.num_integer_0_1_39.default or true);
    num_integer_0_1_39.std =
      (f.num_integer_0_1_39.std or false) ||
      (f.num_integer_0_1_39.default or false) ||
      (num_integer_0_1_39.default or false);
    num_traits_0_2_6.default = (f.num_traits_0_2_6.default or false);
    num_traits_0_2_6.i128 =
      (f.num_traits_0_2_6.i128 or false) ||
      (num_integer_0_1_39.i128 or false) ||
      (f.num_integer_0_1_39.i128 or false);
    num_traits_0_2_6.std =
      (f.num_traits_0_2_6.std or false) ||
      (num_integer_0_1_39.std or false) ||
      (f.num_integer_0_1_39.std or false);
  }) [ num_traits_0_2_6_features ];
  num_traits_0_2_6 = { features?(num_traits_0_2_6_features {}) }: num_traits_0_2_6_ {
    features = mkFeatures (features.num_traits_0_2_6 or {});
  };
  num_traits_0_2_6_features = f: updateFeatures f (rec {
    num_traits_0_2_6.default = (f.num_traits_0_2_6.default or true);
    num_traits_0_2_6.std =
      (f.num_traits_0_2_6.std or false) ||
      (f.num_traits_0_2_6.default or false) ||
      (num_traits_0_2_6.default or false);
  }) [];
  num_cpus_1_10_0 = { features?(num_cpus_1_10_0_features {}) }: num_cpus_1_10_0_ {
    dependencies = mapFeatures features ([ libc_0_2_48 ]);
  };
  num_cpus_1_10_0_features = f: updateFeatures f (rec {
    libc_0_2_48.default = true;
    num_cpus_1_10_0.default = (f.num_cpus_1_10_0.default or true);
  }) [ libc_0_2_48_features ];
  opaque_debug_0_2_2 = { features?(opaque_debug_0_2_2_features {}) }: opaque_debug_0_2_2_ {};
  opaque_debug_0_2_2_features = f: updateFeatures f (rec {
    opaque_debug_0_2_2.default = (f.opaque_debug_0_2_2.default or true);
  }) [];
  openssl_0_10_16 = { features?(openssl_0_10_16_features {}) }: openssl_0_10_16_ {
    dependencies = mapFeatures features ([ bitflags_1_0_4 cfg_if_0_1_6 foreign_types_0_3_2 lazy_static_1_2_0 libc_0_2_48 openssl_sys_0_9_40 ]);
    features = mkFeatures (features.openssl_0_10_16 or {});
  };
  openssl_0_10_16_features = f: updateFeatures f (rec {
    bitflags_1_0_4.default = true;
    cfg_if_0_1_6.default = true;
    foreign_types_0_3_2.default = true;
    lazy_static_1_2_0.default = true;
    libc_0_2_48.default = true;
    openssl_0_10_16.default = (f.openssl_0_10_16.default or true);
    openssl_sys_0_9_40.default = true;
    openssl_sys_0_9_40.vendored =
      (f.openssl_sys_0_9_40.vendored or false) ||
      (openssl_0_10_16.vendored or false) ||
      (f.openssl_0_10_16.vendored or false);
  }) [ bitflags_1_0_4_features cfg_if_0_1_6_features foreign_types_0_3_2_features lazy_static_1_2_0_features libc_0_2_48_features openssl_sys_0_9_40_features ];
  openssl_probe_0_1_2 = { features?(openssl_probe_0_1_2_features {}) }: openssl_probe_0_1_2_ {};
  openssl_probe_0_1_2_features = f: updateFeatures f (rec {
    openssl_probe_0_1_2.default = (f.openssl_probe_0_1_2.default or true);
  }) [];
  openssl_sys_0_9_40 = { features?(openssl_sys_0_9_40_features {}) }: openssl_sys_0_9_40_ {
    dependencies = mapFeatures features ([ libc_0_2_48 ])
      ++ (if abi == "msvc" then mapFeatures features ([]) else []);
    buildDependencies = mapFeatures features ([ cc_1_0_29 pkg_config_0_3_14 ]);
    features = mkFeatures (features.openssl_sys_0_9_40 or {});
  };
  openssl_sys_0_9_40_features = f: updateFeatures f (rec {
    cc_1_0_29.default = true;
    libc_0_2_48.default = true;
    openssl_sys_0_9_40.default = (f.openssl_sys_0_9_40.default or true);
    openssl_sys_0_9_40.openssl-src =
      (f.openssl_sys_0_9_40.openssl-src or false) ||
      (f.openssl_sys_0_9_40.vendored or false) ||
      (openssl_sys_0_9_40.vendored or false);
    pkg_config_0_3_14.default = true;
  }) [ libc_0_2_48_features cc_1_0_29_features pkg_config_0_3_14_features ];
  owning_ref_0_4_0 = { features?(owning_ref_0_4_0_features {}) }: owning_ref_0_4_0_ {
    dependencies = mapFeatures features ([ stable_deref_trait_1_1_1 ]);
  };
  owning_ref_0_4_0_features = f: updateFeatures f (rec {
    owning_ref_0_4_0.default = (f.owning_ref_0_4_0.default or true);
    stable_deref_trait_1_1_1.default = true;
  }) [ stable_deref_trait_1_1_1_features ];
  parking_lot_0_7_1 = { features?(parking_lot_0_7_1_features {}) }: parking_lot_0_7_1_ {
    dependencies = mapFeatures features ([ lock_api_0_1_5 parking_lot_core_0_4_0 ]);
    features = mkFeatures (features.parking_lot_0_7_1 or {});
  };
  parking_lot_0_7_1_features = f: updateFeatures f (rec {
    lock_api_0_1_5.default = true;
    lock_api_0_1_5.nightly =
      (f.lock_api_0_1_5.nightly or false) ||
      (parking_lot_0_7_1.nightly or false) ||
      (f.parking_lot_0_7_1.nightly or false);
    lock_api_0_1_5.owning_ref =
      (f.lock_api_0_1_5.owning_ref or false) ||
      (parking_lot_0_7_1.owning_ref or false) ||
      (f.parking_lot_0_7_1.owning_ref or false);
    parking_lot_0_7_1.default = (f.parking_lot_0_7_1.default or true);
    parking_lot_0_7_1.owning_ref =
      (f.parking_lot_0_7_1.owning_ref or false) ||
      (f.parking_lot_0_7_1.default or false) ||
      (parking_lot_0_7_1.default or false);
    parking_lot_core_0_4_0.deadlock_detection =
      (f.parking_lot_core_0_4_0.deadlock_detection or false) ||
      (parking_lot_0_7_1.deadlock_detection or false) ||
      (f.parking_lot_0_7_1.deadlock_detection or false);
    parking_lot_core_0_4_0.default = true;
    parking_lot_core_0_4_0.nightly =
      (f.parking_lot_core_0_4_0.nightly or false) ||
      (parking_lot_0_7_1.nightly or false) ||
      (f.parking_lot_0_7_1.nightly or false);
  }) [ lock_api_0_1_5_features parking_lot_core_0_4_0_features ];
  parking_lot_core_0_4_0 = { features?(parking_lot_core_0_4_0_features {}) }: parking_lot_core_0_4_0_ {
    dependencies = mapFeatures features ([ rand_0_6_5 smallvec_0_6_9 ])
      ++ (if (kernel == "linux" || kernel == "darwin") then mapFeatures features ([ libc_0_2_48 ]) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ winapi_0_3_6 ]) else []);
    buildDependencies = mapFeatures features ([ rustc_version_0_2_3 ]);
    features = mkFeatures (features.parking_lot_core_0_4_0 or {});
  };
  parking_lot_core_0_4_0_features = f: updateFeatures f (rec {
    libc_0_2_48.default = true;
    parking_lot_core_0_4_0.backtrace =
      (f.parking_lot_core_0_4_0.backtrace or false) ||
      (f.parking_lot_core_0_4_0.deadlock_detection or false) ||
      (parking_lot_core_0_4_0.deadlock_detection or false);
    parking_lot_core_0_4_0.default = (f.parking_lot_core_0_4_0.default or true);
    parking_lot_core_0_4_0.petgraph =
      (f.parking_lot_core_0_4_0.petgraph or false) ||
      (f.parking_lot_core_0_4_0.deadlock_detection or false) ||
      (parking_lot_core_0_4_0.deadlock_detection or false);
    parking_lot_core_0_4_0.thread-id =
      (f.parking_lot_core_0_4_0.thread-id or false) ||
      (f.parking_lot_core_0_4_0.deadlock_detection or false) ||
      (parking_lot_core_0_4_0.deadlock_detection or false);
    rand_0_6_5.default = true;
    rustc_version_0_2_3.default = true;
    smallvec_0_6_9.default = true;
    winapi_0_3_6.default = true;
    winapi_0_3_6.errhandlingapi = true;
    winapi_0_3_6.handleapi = true;
    winapi_0_3_6.minwindef = true;
    winapi_0_3_6.ntstatus = true;
    winapi_0_3_6.winbase = true;
    winapi_0_3_6.winerror = true;
    winapi_0_3_6.winnt = true;
  }) [ rand_0_6_5_features smallvec_0_6_9_features rustc_version_0_2_3_features libc_0_2_48_features winapi_0_3_6_features ];
  percent_encoding_1_0_1 = { features?(percent_encoding_1_0_1_features {}) }: percent_encoding_1_0_1_ {};
  percent_encoding_1_0_1_features = f: updateFeatures f (rec {
    percent_encoding_1_0_1.default = (f.percent_encoding_1_0_1.default or true);
  }) [];
  phf_0_7_24 = { features?(phf_0_7_24_features {}) }: phf_0_7_24_ {
    dependencies = mapFeatures features ([ phf_shared_0_7_24 ]);
    features = mkFeatures (features.phf_0_7_24 or {});
  };
  phf_0_7_24_features = f: updateFeatures f (rec {
    phf_0_7_24.default = (f.phf_0_7_24.default or true);
    phf_0_7_24.phf_macros =
      (f.phf_0_7_24.phf_macros or false) ||
      (f.phf_0_7_24.macros or false) ||
      (phf_0_7_24.macros or false);
    phf_shared_0_7_24.core =
      (f.phf_shared_0_7_24.core or false) ||
      (phf_0_7_24.core or false) ||
      (f.phf_0_7_24.core or false);
    phf_shared_0_7_24.default = true;
    phf_shared_0_7_24.unicase =
      (f.phf_shared_0_7_24.unicase or false) ||
      (phf_0_7_24.unicase or false) ||
      (f.phf_0_7_24.unicase or false);
  }) [ phf_shared_0_7_24_features ];
  phf_codegen_0_7_24 = { features?(phf_codegen_0_7_24_features {}) }: phf_codegen_0_7_24_ {
    dependencies = mapFeatures features ([ phf_generator_0_7_24 phf_shared_0_7_24 ]);
  };
  phf_codegen_0_7_24_features = f: updateFeatures f (rec {
    phf_codegen_0_7_24.default = (f.phf_codegen_0_7_24.default or true);
    phf_generator_0_7_24.default = true;
    phf_shared_0_7_24.default = true;
  }) [ phf_generator_0_7_24_features phf_shared_0_7_24_features ];
  phf_generator_0_7_24 = { features?(phf_generator_0_7_24_features {}) }: phf_generator_0_7_24_ {
    dependencies = mapFeatures features ([ phf_shared_0_7_24 rand_0_6_5 ]);
  };
  phf_generator_0_7_24_features = f: updateFeatures f (rec {
    phf_generator_0_7_24.default = (f.phf_generator_0_7_24.default or true);
    phf_shared_0_7_24.default = true;
    rand_0_6_5.default = true;
  }) [ phf_shared_0_7_24_features rand_0_6_5_features ];
  phf_shared_0_7_24 = { features?(phf_shared_0_7_24_features {}) }: phf_shared_0_7_24_ {
    dependencies = mapFeatures features ([ siphasher_0_2_3 ]
      ++ (if features.phf_shared_0_7_24.unicase or false then [ unicase_1_4_2 ] else []));
    features = mkFeatures (features.phf_shared_0_7_24 or {});
  };
  phf_shared_0_7_24_features = f: updateFeatures f (rec {
    phf_shared_0_7_24.default = (f.phf_shared_0_7_24.default or true);
    siphasher_0_2_3.default = true;
    unicase_1_4_2.default = true;
  }) [ siphasher_0_2_3_features unicase_1_4_2_features ];
  pkg_config_0_3_14 = { features?(pkg_config_0_3_14_features {}) }: pkg_config_0_3_14_ {};
  pkg_config_0_3_14_features = f: updateFeatures f (rec {
    pkg_config_0_3_14.default = (f.pkg_config_0_3_14.default or true);
  }) [];
  pool_0_1_0 = { features?(pool_0_1_0_features {}) }: pool_0_1_0_ {
    dependencies = mapFeatures features ([ apply_0_2_2 diesel_1_4_1 r2d2_0_8_3 ]);
  };
  pool_0_1_0_features = f: updateFeatures f (rec {
    apply_0_2_2.default = true;
    diesel_1_4_1.default = true;
    diesel_1_4_1.postgres = true;
    diesel_1_4_1.r2d2 = true;
    pool_0_1_0.default = (f.pool_0_1_0.default or true);
    r2d2_0_8_3.default = true;
  }) [ apply_0_2_2_features diesel_1_4_1_features r2d2_0_8_3_features ];
  pq_sys_0_4_6 = { features?(pq_sys_0_4_6_features {}) }: pq_sys_0_4_6_ {
    dependencies = (if abi == "msvc" then mapFeatures features ([]) else []);
    buildDependencies = mapFeatures features ([]);
  };
  pq_sys_0_4_6_features = f: updateFeatures f (rec {
    pq_sys_0_4_6.default = (f.pq_sys_0_4_6.default or true);
  }) [];
  proc_macro2_0_4_27 = { features?(proc_macro2_0_4_27_features {}) }: proc_macro2_0_4_27_ {
    dependencies = mapFeatures features ([ unicode_xid_0_1_0 ]);
    features = mkFeatures (features.proc_macro2_0_4_27 or {});
  };
  proc_macro2_0_4_27_features = f: updateFeatures f (rec {
    proc_macro2_0_4_27.default = (f.proc_macro2_0_4_27.default or true);
    proc_macro2_0_4_27.proc-macro =
      (f.proc_macro2_0_4_27.proc-macro or false) ||
      (f.proc_macro2_0_4_27.default or false) ||
      (proc_macro2_0_4_27.default or false);
    unicode_xid_0_1_0.default = true;
  }) [ unicode_xid_0_1_0_features ];
  quick_error_1_2_2 = { features?(quick_error_1_2_2_features {}) }: quick_error_1_2_2_ {};
  quick_error_1_2_2_features = f: updateFeatures f (rec {
    quick_error_1_2_2.default = (f.quick_error_1_2_2.default or true);
  }) [];
  quote_0_6_11 = { features?(quote_0_6_11_features {}) }: quote_0_6_11_ {
    dependencies = mapFeatures features ([ proc_macro2_0_4_27 ]);
    features = mkFeatures (features.quote_0_6_11 or {});
  };
  quote_0_6_11_features = f: updateFeatures f (rec {
    proc_macro2_0_4_27.default = (f.proc_macro2_0_4_27.default or false);
    proc_macro2_0_4_27.proc-macro =
      (f.proc_macro2_0_4_27.proc-macro or false) ||
      (quote_0_6_11.proc-macro or false) ||
      (f.quote_0_6_11.proc-macro or false);
    quote_0_6_11.default = (f.quote_0_6_11.default or true);
    quote_0_6_11.proc-macro =
      (f.quote_0_6_11.proc-macro or false) ||
      (f.quote_0_6_11.default or false) ||
      (quote_0_6_11.default or false);
  }) [ proc_macro2_0_4_27_features ];
  r2d2_0_8_3 = { features?(r2d2_0_8_3_features {}) }: r2d2_0_8_3_ {
    dependencies = mapFeatures features ([ antidote_1_0_0 log_0_4_6 scheduled_thread_pool_0_2_0 ]);
  };
  r2d2_0_8_3_features = f: updateFeatures f (rec {
    antidote_1_0_0.default = true;
    log_0_4_6.default = true;
    r2d2_0_8_3.default = (f.r2d2_0_8_3.default or true);
    scheduled_thread_pool_0_2_0.default = true;
  }) [ antidote_1_0_0_features log_0_4_6_features scheduled_thread_pool_0_2_0_features ];
  rand_0_4_6 = { features?(rand_0_4_6_features {}) }: rand_0_4_6_ {
    dependencies = (if abi == "sgx" then mapFeatures features ([ rand_core_0_3_1 rdrand_0_4_0 ]) else [])
      ++ (if kernel == "fuchsia" then mapFeatures features ([ fuchsia_cprng_0_1_1 ]) else [])
      ++ (if (kernel == "linux" || kernel == "darwin") then mapFeatures features ([ ]
      ++ (if features.rand_0_4_6.libc or false then [ libc_0_2_48 ] else [])) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ winapi_0_3_6 ]) else []);
    features = mkFeatures (features.rand_0_4_6 or {});
  };
  rand_0_4_6_features = f: updateFeatures f (rec {
    fuchsia_cprng_0_1_1.default = true;
    libc_0_2_48.default = true;
    rand_0_4_6.default = (f.rand_0_4_6.default or true);
    rand_0_4_6.i128_support =
      (f.rand_0_4_6.i128_support or false) ||
      (f.rand_0_4_6.nightly or false) ||
      (rand_0_4_6.nightly or false);
    rand_0_4_6.libc =
      (f.rand_0_4_6.libc or false) ||
      (f.rand_0_4_6.std or false) ||
      (rand_0_4_6.std or false);
    rand_0_4_6.std =
      (f.rand_0_4_6.std or false) ||
      (f.rand_0_4_6.default or false) ||
      (rand_0_4_6.default or false);
    rand_core_0_3_1.default = (f.rand_core_0_3_1.default or false);
    rdrand_0_4_0.default = true;
    winapi_0_3_6.default = true;
    winapi_0_3_6.minwindef = true;
    winapi_0_3_6.ntsecapi = true;
    winapi_0_3_6.profileapi = true;
    winapi_0_3_6.winnt = true;
  }) [ rand_core_0_3_1_features rdrand_0_4_0_features fuchsia_cprng_0_1_1_features libc_0_2_48_features winapi_0_3_6_features ];
  rand_0_5_6 = { features?(rand_0_5_6_features {}) }: rand_0_5_6_ {
    dependencies = mapFeatures features ([ rand_core_0_3_1 ])
      ++ (if kernel == "cloudabi" then mapFeatures features ([ ]
      ++ (if features.rand_0_5_6.cloudabi or false then [ cloudabi_0_0_3 ] else [])) else [])
      ++ (if kernel == "fuchsia" then mapFeatures features ([ ]
      ++ (if features.rand_0_5_6.fuchsia-cprng or false then [ fuchsia_cprng_0_1_1 ] else [])) else [])
      ++ (if (kernel == "linux" || kernel == "darwin") then mapFeatures features ([ ]
      ++ (if features.rand_0_5_6.libc or false then [ libc_0_2_48 ] else [])) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ ]
      ++ (if features.rand_0_5_6.winapi or false then [ winapi_0_3_6 ] else [])) else [])
      ++ (if kernel == "wasm32-unknown-unknown" then mapFeatures features ([]) else []);
    features = mkFeatures (features.rand_0_5_6 or {});
  };
  rand_0_5_6_features = f: updateFeatures f (rec {
    cloudabi_0_0_3.default = true;
    fuchsia_cprng_0_1_1.default = true;
    libc_0_2_48.default = true;
    rand_0_5_6.alloc =
      (f.rand_0_5_6.alloc or false) ||
      (f.rand_0_5_6.std or false) ||
      (rand_0_5_6.std or false);
    rand_0_5_6.cloudabi =
      (f.rand_0_5_6.cloudabi or false) ||
      (f.rand_0_5_6.std or false) ||
      (rand_0_5_6.std or false);
    rand_0_5_6.default = (f.rand_0_5_6.default or true);
    rand_0_5_6.fuchsia-cprng =
      (f.rand_0_5_6.fuchsia-cprng or false) ||
      (f.rand_0_5_6.std or false) ||
      (rand_0_5_6.std or false);
    rand_0_5_6.i128_support =
      (f.rand_0_5_6.i128_support or false) ||
      (f.rand_0_5_6.nightly or false) ||
      (rand_0_5_6.nightly or false);
    rand_0_5_6.libc =
      (f.rand_0_5_6.libc or false) ||
      (f.rand_0_5_6.std or false) ||
      (rand_0_5_6.std or false);
    rand_0_5_6.serde =
      (f.rand_0_5_6.serde or false) ||
      (f.rand_0_5_6.serde1 or false) ||
      (rand_0_5_6.serde1 or false);
    rand_0_5_6.serde_derive =
      (f.rand_0_5_6.serde_derive or false) ||
      (f.rand_0_5_6.serde1 or false) ||
      (rand_0_5_6.serde1 or false);
    rand_0_5_6.std =
      (f.rand_0_5_6.std or false) ||
      (f.rand_0_5_6.default or false) ||
      (rand_0_5_6.default or false);
    rand_0_5_6.winapi =
      (f.rand_0_5_6.winapi or false) ||
      (f.rand_0_5_6.std or false) ||
      (rand_0_5_6.std or false);
    rand_core_0_3_1.alloc =
      (f.rand_core_0_3_1.alloc or false) ||
      (rand_0_5_6.alloc or false) ||
      (f.rand_0_5_6.alloc or false);
    rand_core_0_3_1.default = (f.rand_core_0_3_1.default or false);
    rand_core_0_3_1.serde1 =
      (f.rand_core_0_3_1.serde1 or false) ||
      (rand_0_5_6.serde1 or false) ||
      (f.rand_0_5_6.serde1 or false);
    rand_core_0_3_1.std =
      (f.rand_core_0_3_1.std or false) ||
      (rand_0_5_6.std or false) ||
      (f.rand_0_5_6.std or false);
    winapi_0_3_6.default = true;
    winapi_0_3_6.minwindef = true;
    winapi_0_3_6.ntsecapi = true;
    winapi_0_3_6.profileapi = true;
    winapi_0_3_6.winnt = true;
  }) [ rand_core_0_3_1_features cloudabi_0_0_3_features fuchsia_cprng_0_1_1_features libc_0_2_48_features winapi_0_3_6_features ];
  rand_0_6_5 = { features?(rand_0_6_5_features {}) }: rand_0_6_5_ {
    dependencies = mapFeatures features ([ rand_chacha_0_1_1 rand_core_0_4_0 rand_hc_0_1_0 rand_isaac_0_1_1 rand_jitter_0_1_3 rand_pcg_0_1_1 rand_xorshift_0_1_1 ]
      ++ (if features.rand_0_6_5.rand_os or false then [ rand_os_0_1_2 ] else []))
      ++ (if (kernel == "linux" || kernel == "darwin") then mapFeatures features ([ libc_0_2_48 ]) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ winapi_0_3_6 ]) else []);
    buildDependencies = mapFeatures features ([ autocfg_0_1_2 ]);
    features = mkFeatures (features.rand_0_6_5 or {});
  };
  rand_0_6_5_features = f: updateFeatures f (rec {
    autocfg_0_1_2.default = true;
    libc_0_2_48.default = (f.libc_0_2_48.default or false);
    rand_0_6_5.alloc =
      (f.rand_0_6_5.alloc or false) ||
      (f.rand_0_6_5.std or false) ||
      (rand_0_6_5.std or false);
    rand_0_6_5.default = (f.rand_0_6_5.default or true);
    rand_0_6_5.packed_simd =
      (f.rand_0_6_5.packed_simd or false) ||
      (f.rand_0_6_5.simd_support or false) ||
      (rand_0_6_5.simd_support or false);
    rand_0_6_5.rand_os =
      (f.rand_0_6_5.rand_os or false) ||
      (f.rand_0_6_5.std or false) ||
      (rand_0_6_5.std or false);
    rand_0_6_5.simd_support =
      (f.rand_0_6_5.simd_support or false) ||
      (f.rand_0_6_5.nightly or false) ||
      (rand_0_6_5.nightly or false);
    rand_0_6_5.std =
      (f.rand_0_6_5.std or false) ||
      (f.rand_0_6_5.default or false) ||
      (rand_0_6_5.default or false);
    rand_chacha_0_1_1.default = true;
    rand_core_0_4_0.alloc =
      (f.rand_core_0_4_0.alloc or false) ||
      (rand_0_6_5.alloc or false) ||
      (f.rand_0_6_5.alloc or false);
    rand_core_0_4_0.default = true;
    rand_core_0_4_0.serde1 =
      (f.rand_core_0_4_0.serde1 or false) ||
      (rand_0_6_5.serde1 or false) ||
      (f.rand_0_6_5.serde1 or false);
    rand_core_0_4_0.std =
      (f.rand_core_0_4_0.std or false) ||
      (rand_0_6_5.std or false) ||
      (f.rand_0_6_5.std or false);
    rand_hc_0_1_0.default = true;
    rand_isaac_0_1_1.default = true;
    rand_isaac_0_1_1.serde1 =
      (f.rand_isaac_0_1_1.serde1 or false) ||
      (rand_0_6_5.serde1 or false) ||
      (f.rand_0_6_5.serde1 or false);
    rand_jitter_0_1_3.default = true;
    rand_jitter_0_1_3.std =
      (f.rand_jitter_0_1_3.std or false) ||
      (rand_0_6_5.std or false) ||
      (f.rand_0_6_5.std or false);
    rand_os_0_1_2.default = true;
    rand_os_0_1_2.stdweb =
      (f.rand_os_0_1_2.stdweb or false) ||
      (rand_0_6_5.stdweb or false) ||
      (f.rand_0_6_5.stdweb or false);
    rand_os_0_1_2.wasm-bindgen =
      (f.rand_os_0_1_2.wasm-bindgen or false) ||
      (rand_0_6_5.wasm-bindgen or false) ||
      (f.rand_0_6_5.wasm-bindgen or false);
    rand_pcg_0_1_1.default = true;
    rand_xorshift_0_1_1.default = true;
    rand_xorshift_0_1_1.serde1 =
      (f.rand_xorshift_0_1_1.serde1 or false) ||
      (rand_0_6_5.serde1 or false) ||
      (f.rand_0_6_5.serde1 or false);
    winapi_0_3_6.default = true;
    winapi_0_3_6.minwindef = true;
    winapi_0_3_6.ntsecapi = true;
    winapi_0_3_6.profileapi = true;
    winapi_0_3_6.winnt = true;
  }) [ rand_chacha_0_1_1_features rand_core_0_4_0_features rand_hc_0_1_0_features rand_isaac_0_1_1_features rand_jitter_0_1_3_features rand_os_0_1_2_features rand_pcg_0_1_1_features rand_xorshift_0_1_1_features autocfg_0_1_2_features libc_0_2_48_features winapi_0_3_6_features ];
  rand_chacha_0_1_1 = { features?(rand_chacha_0_1_1_features {}) }: rand_chacha_0_1_1_ {
    dependencies = mapFeatures features ([ rand_core_0_3_1 ]);
    buildDependencies = mapFeatures features ([ autocfg_0_1_2 ]);
  };
  rand_chacha_0_1_1_features = f: updateFeatures f (rec {
    autocfg_0_1_2.default = true;
    rand_chacha_0_1_1.default = (f.rand_chacha_0_1_1.default or true);
    rand_core_0_3_1.default = (f.rand_core_0_3_1.default or false);
  }) [ rand_core_0_3_1_features autocfg_0_1_2_features ];
  rand_core_0_3_1 = { features?(rand_core_0_3_1_features {}) }: rand_core_0_3_1_ {
    dependencies = mapFeatures features ([ rand_core_0_4_0 ]);
    features = mkFeatures (features.rand_core_0_3_1 or {});
  };
  rand_core_0_3_1_features = f: updateFeatures f (rec {
    rand_core_0_3_1.default = (f.rand_core_0_3_1.default or true);
    rand_core_0_3_1.std =
      (f.rand_core_0_3_1.std or false) ||
      (f.rand_core_0_3_1.default or false) ||
      (rand_core_0_3_1.default or false);
    rand_core_0_4_0.alloc =
      (f.rand_core_0_4_0.alloc or false) ||
      (rand_core_0_3_1.alloc or false) ||
      (f.rand_core_0_3_1.alloc or false);
    rand_core_0_4_0.default = true;
    rand_core_0_4_0.serde1 =
      (f.rand_core_0_4_0.serde1 or false) ||
      (rand_core_0_3_1.serde1 or false) ||
      (f.rand_core_0_3_1.serde1 or false);
    rand_core_0_4_0.std =
      (f.rand_core_0_4_0.std or false) ||
      (rand_core_0_3_1.std or false) ||
      (f.rand_core_0_3_1.std or false);
  }) [ rand_core_0_4_0_features ];
  rand_core_0_4_0 = { features?(rand_core_0_4_0_features {}) }: rand_core_0_4_0_ {
    dependencies = mapFeatures features ([]);
    features = mkFeatures (features.rand_core_0_4_0 or {});
  };
  rand_core_0_4_0_features = f: updateFeatures f (rec {
    rand_core_0_4_0.alloc =
      (f.rand_core_0_4_0.alloc or false) ||
      (f.rand_core_0_4_0.std or false) ||
      (rand_core_0_4_0.std or false);
    rand_core_0_4_0.default = (f.rand_core_0_4_0.default or true);
    rand_core_0_4_0.serde =
      (f.rand_core_0_4_0.serde or false) ||
      (f.rand_core_0_4_0.serde1 or false) ||
      (rand_core_0_4_0.serde1 or false);
    rand_core_0_4_0.serde_derive =
      (f.rand_core_0_4_0.serde_derive or false) ||
      (f.rand_core_0_4_0.serde1 or false) ||
      (rand_core_0_4_0.serde1 or false);
  }) [];
  rand_hc_0_1_0 = { features?(rand_hc_0_1_0_features {}) }: rand_hc_0_1_0_ {
    dependencies = mapFeatures features ([ rand_core_0_3_1 ]);
  };
  rand_hc_0_1_0_features = f: updateFeatures f (rec {
    rand_core_0_3_1.default = (f.rand_core_0_3_1.default or false);
    rand_hc_0_1_0.default = (f.rand_hc_0_1_0.default or true);
  }) [ rand_core_0_3_1_features ];
  rand_isaac_0_1_1 = { features?(rand_isaac_0_1_1_features {}) }: rand_isaac_0_1_1_ {
    dependencies = mapFeatures features ([ rand_core_0_3_1 ]);
    features = mkFeatures (features.rand_isaac_0_1_1 or {});
  };
  rand_isaac_0_1_1_features = f: updateFeatures f (rec {
    rand_core_0_3_1.default = (f.rand_core_0_3_1.default or false);
    rand_core_0_3_1.serde1 =
      (f.rand_core_0_3_1.serde1 or false) ||
      (rand_isaac_0_1_1.serde1 or false) ||
      (f.rand_isaac_0_1_1.serde1 or false);
    rand_isaac_0_1_1.default = (f.rand_isaac_0_1_1.default or true);
    rand_isaac_0_1_1.serde =
      (f.rand_isaac_0_1_1.serde or false) ||
      (f.rand_isaac_0_1_1.serde1 or false) ||
      (rand_isaac_0_1_1.serde1 or false);
    rand_isaac_0_1_1.serde_derive =
      (f.rand_isaac_0_1_1.serde_derive or false) ||
      (f.rand_isaac_0_1_1.serde1 or false) ||
      (rand_isaac_0_1_1.serde1 or false);
  }) [ rand_core_0_3_1_features ];
  rand_jitter_0_1_3 = { features?(rand_jitter_0_1_3_features {}) }: rand_jitter_0_1_3_ {
    dependencies = mapFeatures features ([ rand_core_0_4_0 ])
      ++ (if kernel == "darwin" || kernel == "ios" then mapFeatures features ([ libc_0_2_48 ]) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ winapi_0_3_6 ]) else []);
    features = mkFeatures (features.rand_jitter_0_1_3 or {});
  };
  rand_jitter_0_1_3_features = f: updateFeatures f (rec {
    libc_0_2_48.default = true;
    rand_core_0_4_0.default = true;
    rand_core_0_4_0.std =
      (f.rand_core_0_4_0.std or false) ||
      (rand_jitter_0_1_3.std or false) ||
      (f.rand_jitter_0_1_3.std or false);
    rand_jitter_0_1_3.default = (f.rand_jitter_0_1_3.default or true);
    winapi_0_3_6.default = true;
    winapi_0_3_6.profileapi = true;
  }) [ rand_core_0_4_0_features libc_0_2_48_features winapi_0_3_6_features ];
  rand_os_0_1_2 = { features?(rand_os_0_1_2_features {}) }: rand_os_0_1_2_ {
    dependencies = mapFeatures features ([ rand_core_0_4_0 ])
      ++ (if abi == "sgx" then mapFeatures features ([ rdrand_0_4_0 ]) else [])
      ++ (if kernel == "cloudabi" then mapFeatures features ([ cloudabi_0_0_3 ]) else [])
      ++ (if kernel == "fuchsia" then mapFeatures features ([ fuchsia_cprng_0_1_1 ]) else [])
      ++ (if (kernel == "linux" || kernel == "darwin") then mapFeatures features ([ libc_0_2_48 ]) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ winapi_0_3_6 ]) else [])
      ++ (if kernel == "wasm32-unknown-unknown" then mapFeatures features ([]) else []);
  };
  rand_os_0_1_2_features = f: updateFeatures f (rec {
    cloudabi_0_0_3.default = true;
    fuchsia_cprng_0_1_1.default = true;
    libc_0_2_48.default = true;
    rand_core_0_4_0.default = true;
    rand_core_0_4_0.std = true;
    rand_os_0_1_2.default = (f.rand_os_0_1_2.default or true);
    rdrand_0_4_0.default = true;
    winapi_0_3_6.default = true;
    winapi_0_3_6.minwindef = true;
    winapi_0_3_6.ntsecapi = true;
    winapi_0_3_6.winnt = true;
  }) [ rand_core_0_4_0_features rdrand_0_4_0_features cloudabi_0_0_3_features fuchsia_cprng_0_1_1_features libc_0_2_48_features winapi_0_3_6_features ];
  rand_pcg_0_1_1 = { features?(rand_pcg_0_1_1_features {}) }: rand_pcg_0_1_1_ {
    dependencies = mapFeatures features ([ rand_core_0_3_1 ]);
    buildDependencies = mapFeatures features ([ rustc_version_0_2_3 ]);
    features = mkFeatures (features.rand_pcg_0_1_1 or {});
  };
  rand_pcg_0_1_1_features = f: updateFeatures f (rec {
    rand_core_0_3_1.default = (f.rand_core_0_3_1.default or false);
    rand_pcg_0_1_1.default = (f.rand_pcg_0_1_1.default or true);
    rand_pcg_0_1_1.serde =
      (f.rand_pcg_0_1_1.serde or false) ||
      (f.rand_pcg_0_1_1.serde1 or false) ||
      (rand_pcg_0_1_1.serde1 or false);
    rand_pcg_0_1_1.serde_derive =
      (f.rand_pcg_0_1_1.serde_derive or false) ||
      (f.rand_pcg_0_1_1.serde1 or false) ||
      (rand_pcg_0_1_1.serde1 or false);
    rustc_version_0_2_3.default = true;
  }) [ rand_core_0_3_1_features rustc_version_0_2_3_features ];
  rand_xorshift_0_1_1 = { features?(rand_xorshift_0_1_1_features {}) }: rand_xorshift_0_1_1_ {
    dependencies = mapFeatures features ([ rand_core_0_3_1 ]);
    features = mkFeatures (features.rand_xorshift_0_1_1 or {});
  };
  rand_xorshift_0_1_1_features = f: updateFeatures f (rec {
    rand_core_0_3_1.default = (f.rand_core_0_3_1.default or false);
    rand_xorshift_0_1_1.default = (f.rand_xorshift_0_1_1.default or true);
    rand_xorshift_0_1_1.serde =
      (f.rand_xorshift_0_1_1.serde or false) ||
      (f.rand_xorshift_0_1_1.serde1 or false) ||
      (rand_xorshift_0_1_1.serde1 or false);
    rand_xorshift_0_1_1.serde_derive =
      (f.rand_xorshift_0_1_1.serde_derive or false) ||
      (f.rand_xorshift_0_1_1.serde1 or false) ||
      (rand_xorshift_0_1_1.serde1 or false);
  }) [ rand_core_0_3_1_features ];
  rdrand_0_4_0 = { features?(rdrand_0_4_0_features {}) }: rdrand_0_4_0_ {
    dependencies = mapFeatures features ([ rand_core_0_3_1 ]);
    features = mkFeatures (features.rdrand_0_4_0 or {});
  };
  rdrand_0_4_0_features = f: updateFeatures f (rec {
    rand_core_0_3_1.default = (f.rand_core_0_3_1.default or false);
    rdrand_0_4_0.default = (f.rdrand_0_4_0.default or true);
    rdrand_0_4_0.std =
      (f.rdrand_0_4_0.std or false) ||
      (f.rdrand_0_4_0.default or false) ||
      (rdrand_0_4_0.default or false);
  }) [ rand_core_0_3_1_features ];
  redox_syscall_0_1_51 = { features?(redox_syscall_0_1_51_features {}) }: redox_syscall_0_1_51_ {};
  redox_syscall_0_1_51_features = f: updateFeatures f (rec {
    redox_syscall_0_1_51.default = (f.redox_syscall_0_1_51.default or true);
  }) [];
  redox_termios_0_1_1 = { features?(redox_termios_0_1_1_features {}) }: redox_termios_0_1_1_ {
    dependencies = mapFeatures features ([ redox_syscall_0_1_51 ]);
  };
  redox_termios_0_1_1_features = f: updateFeatures f (rec {
    redox_syscall_0_1_51.default = true;
    redox_termios_0_1_1.default = (f.redox_termios_0_1_1.default or true);
  }) [ redox_syscall_0_1_51_features ];
  regex_1_1_0 = { features?(regex_1_1_0_features {}) }: regex_1_1_0_ {
    dependencies = mapFeatures features ([ aho_corasick_0_6_10 memchr_2_2_0 regex_syntax_0_6_5 thread_local_0_3_6 utf8_ranges_1_0_2 ]);
    features = mkFeatures (features.regex_1_1_0 or {});
  };
  regex_1_1_0_features = f: updateFeatures f (rec {
    aho_corasick_0_6_10.default = true;
    memchr_2_2_0.default = true;
    regex_1_1_0.default = (f.regex_1_1_0.default or true);
    regex_1_1_0.pattern =
      (f.regex_1_1_0.pattern or false) ||
      (f.regex_1_1_0.unstable or false) ||
      (regex_1_1_0.unstable or false);
    regex_1_1_0.use_std =
      (f.regex_1_1_0.use_std or false) ||
      (f.regex_1_1_0.default or false) ||
      (regex_1_1_0.default or false);
    regex_syntax_0_6_5.default = true;
    thread_local_0_3_6.default = true;
    utf8_ranges_1_0_2.default = true;
  }) [ aho_corasick_0_6_10_features memchr_2_2_0_features regex_syntax_0_6_5_features thread_local_0_3_6_features utf8_ranges_1_0_2_features ];
  regex_syntax_0_6_5 = { features?(regex_syntax_0_6_5_features {}) }: regex_syntax_0_6_5_ {
    dependencies = mapFeatures features ([ ucd_util_0_1_3 ]);
  };
  regex_syntax_0_6_5_features = f: updateFeatures f (rec {
    regex_syntax_0_6_5.default = (f.regex_syntax_0_6_5.default or true);
    ucd_util_0_1_3.default = true;
  }) [ ucd_util_0_1_3_features ];
  remove_dir_all_0_5_1 = { features?(remove_dir_all_0_5_1_features {}) }: remove_dir_all_0_5_1_ {
    dependencies = (if kernel == "windows" then mapFeatures features ([ winapi_0_3_6 ]) else []);
  };
  remove_dir_all_0_5_1_features = f: updateFeatures f (rec {
    remove_dir_all_0_5_1.default = (f.remove_dir_all_0_5_1.default or true);
    winapi_0_3_6.default = true;
    winapi_0_3_6.errhandlingapi = true;
    winapi_0_3_6.fileapi = true;
    winapi_0_3_6.std = true;
    winapi_0_3_6.winbase = true;
    winapi_0_3_6.winerror = true;
  }) [ winapi_0_3_6_features ];
  ring_0_13_5 = { features?(ring_0_13_5_features {}) }: ring_0_13_5_ {
    dependencies = mapFeatures features ([ untrusted_0_6_2 ])
      ++ (if kernel == "redox" || (kernel == "linux" || kernel == "darwin") && !(kernel == "darwin" || kernel == "ios") then mapFeatures features ([ lazy_static_1_2_0 ]) else [])
      ++ (if kernel == "linux" then mapFeatures features ([ libc_0_2_48 ]) else []);
    buildDependencies = mapFeatures features ([ cc_1_0_29 ]);
    features = mkFeatures (features.ring_0_13_5 or {});
  };
  ring_0_13_5_features = f: updateFeatures f (rec {
    cc_1_0_29.default = true;
    lazy_static_1_2_0.default = true;
    libc_0_2_48.default = true;
    ring_0_13_5.default = (f.ring_0_13_5.default or true);
    ring_0_13_5.dev_urandom_fallback =
      (f.ring_0_13_5.dev_urandom_fallback or false) ||
      (f.ring_0_13_5.default or false) ||
      (ring_0_13_5.default or false);
    ring_0_13_5.use_heap =
      (f.ring_0_13_5.use_heap or false) ||
      (f.ring_0_13_5.default or false) ||
      (ring_0_13_5.default or false) ||
      (f.ring_0_13_5.rsa_signing or false) ||
      (ring_0_13_5.rsa_signing or false);
    untrusted_0_6_2.default = true;
  }) [ untrusted_0_6_2_features cc_1_0_29_features lazy_static_1_2_0_features libc_0_2_48_features ];
  rustc_version_0_2_3 = { features?(rustc_version_0_2_3_features {}) }: rustc_version_0_2_3_ {
    dependencies = mapFeatures features ([ semver_0_9_0 ]);
  };
  rustc_version_0_2_3_features = f: updateFeatures f (rec {
    rustc_version_0_2_3.default = (f.rustc_version_0_2_3.default or true);
    semver_0_9_0.default = true;
  }) [ semver_0_9_0_features ];
  rustls_0_14_0 = { features?(rustls_0_14_0_features {}) }: rustls_0_14_0_ {
    dependencies = mapFeatures features ([ base64_0_9_3 ring_0_13_5 sct_0_4_0 untrusted_0_6_2 webpki_0_18_1 ]
      ++ (if features.rustls_0_14_0.log or false then [ log_0_4_6 ] else []));
    features = mkFeatures (features.rustls_0_14_0 or {});
  };
  rustls_0_14_0_features = f: updateFeatures f (rec {
    base64_0_9_3.default = true;
    log_0_4_6.default = true;
    ring_0_13_5.default = true;
    ring_0_13_5.rsa_signing = true;
    rustls_0_14_0.default = (f.rustls_0_14_0.default or true);
    rustls_0_14_0.log =
      (f.rustls_0_14_0.log or false) ||
      (f.rustls_0_14_0.logging or false) ||
      (rustls_0_14_0.logging or false);
    rustls_0_14_0.logging =
      (f.rustls_0_14_0.logging or false) ||
      (f.rustls_0_14_0.default or false) ||
      (rustls_0_14_0.default or false);
    sct_0_4_0.default = true;
    untrusted_0_6_2.default = true;
    webpki_0_18_1.default = true;
  }) [ base64_0_9_3_features log_0_4_6_features ring_0_13_5_features sct_0_4_0_features untrusted_0_6_2_features webpki_0_18_1_features ];
  ryu_0_2_7 = { features?(ryu_0_2_7_features {}) }: ryu_0_2_7_ {
    dependencies = mapFeatures features ([]);
    features = mkFeatures (features.ryu_0_2_7 or {});
  };
  ryu_0_2_7_features = f: updateFeatures f (rec {
    ryu_0_2_7.default = (f.ryu_0_2_7.default or true);
  }) [];
  safemem_0_3_0 = { features?(safemem_0_3_0_features {}) }: safemem_0_3_0_ {
    features = mkFeatures (features.safemem_0_3_0 or {});
  };
  safemem_0_3_0_features = f: updateFeatures f (rec {
    safemem_0_3_0.default = (f.safemem_0_3_0.default or true);
    safemem_0_3_0.std =
      (f.safemem_0_3_0.std or false) ||
      (f.safemem_0_3_0.default or false) ||
      (safemem_0_3_0.default or false);
  }) [];
  schannel_0_1_14 = { features?(schannel_0_1_14_features {}) }: schannel_0_1_14_ {
    dependencies = mapFeatures features ([ lazy_static_1_2_0 winapi_0_3_6 ]);
  };
  schannel_0_1_14_features = f: updateFeatures f (rec {
    lazy_static_1_2_0.default = true;
    schannel_0_1_14.default = (f.schannel_0_1_14.default or true);
    winapi_0_3_6.default = true;
    winapi_0_3_6.lmcons = true;
    winapi_0_3_6.minschannel = true;
    winapi_0_3_6.schannel = true;
    winapi_0_3_6.securitybaseapi = true;
    winapi_0_3_6.sspi = true;
    winapi_0_3_6.sysinfoapi = true;
    winapi_0_3_6.timezoneapi = true;
    winapi_0_3_6.winbase = true;
    winapi_0_3_6.wincrypt = true;
    winapi_0_3_6.winerror = true;
  }) [ lazy_static_1_2_0_features winapi_0_3_6_features ];
  scheduled_thread_pool_0_2_0 = { features?(scheduled_thread_pool_0_2_0_features {}) }: scheduled_thread_pool_0_2_0_ {
    dependencies = mapFeatures features ([ antidote_1_0_0 ]);
  };
  scheduled_thread_pool_0_2_0_features = f: updateFeatures f (rec {
    antidote_1_0_0.default = true;
    scheduled_thread_pool_0_2_0.default = (f.scheduled_thread_pool_0_2_0.default or true);
  }) [ antidote_1_0_0_features ];
  scoped_tls_0_1_2 = { features?(scoped_tls_0_1_2_features {}) }: scoped_tls_0_1_2_ {
    features = mkFeatures (features.scoped_tls_0_1_2 or {});
  };
  scoped_tls_0_1_2_features = f: updateFeatures f (rec {
    scoped_tls_0_1_2.default = (f.scoped_tls_0_1_2.default or true);
  }) [];
  scopeguard_0_3_3 = { features?(scopeguard_0_3_3_features {}) }: scopeguard_0_3_3_ {
    features = mkFeatures (features.scopeguard_0_3_3 or {});
  };
  scopeguard_0_3_3_features = f: updateFeatures f (rec {
    scopeguard_0_3_3.default = (f.scopeguard_0_3_3.default or true);
    scopeguard_0_3_3.use_std =
      (f.scopeguard_0_3_3.use_std or false) ||
      (f.scopeguard_0_3_3.default or false) ||
      (scopeguard_0_3_3.default or false);
  }) [];
  sct_0_4_0 = { features?(sct_0_4_0_features {}) }: sct_0_4_0_ {
    dependencies = mapFeatures features ([ ring_0_13_5 untrusted_0_6_2 ]);
  };
  sct_0_4_0_features = f: updateFeatures f (rec {
    ring_0_13_5.default = true;
    sct_0_4_0.default = (f.sct_0_4_0.default or true);
    untrusted_0_6_2.default = true;
  }) [ ring_0_13_5_features untrusted_0_6_2_features ];
  security_framework_0_2_2 = { features?(security_framework_0_2_2_features {}) }: security_framework_0_2_2_ {
    dependencies = mapFeatures features ([ core_foundation_0_5_1 core_foundation_sys_0_5_1 libc_0_2_48 security_framework_sys_0_2_3 ]);
    features = mkFeatures (features.security_framework_0_2_2 or {});
  };
  security_framework_0_2_2_features = f: updateFeatures f (rec {
    core_foundation_0_5_1.default = true;
    core_foundation_sys_0_5_1.default = true;
    libc_0_2_48.default = true;
    security_framework_0_2_2.OSX_10_10 =
      (f.security_framework_0_2_2.OSX_10_10 or false) ||
      (f.security_framework_0_2_2.OSX_10_11 or false) ||
      (security_framework_0_2_2.OSX_10_11 or false);
    security_framework_0_2_2.OSX_10_11 =
      (f.security_framework_0_2_2.OSX_10_11 or false) ||
      (f.security_framework_0_2_2.OSX_10_12 or false) ||
      (security_framework_0_2_2.OSX_10_12 or false);
    security_framework_0_2_2.OSX_10_12 =
      (f.security_framework_0_2_2.OSX_10_12 or false) ||
      (f.security_framework_0_2_2.OSX_10_13 or false) ||
      (security_framework_0_2_2.OSX_10_13 or false);
    security_framework_0_2_2.OSX_10_9 =
      (f.security_framework_0_2_2.OSX_10_9 or false) ||
      (f.security_framework_0_2_2.OSX_10_10 or false) ||
      (security_framework_0_2_2.OSX_10_10 or false);
    security_framework_0_2_2.alpn =
      (f.security_framework_0_2_2.alpn or false) ||
      (f.security_framework_0_2_2.OSX_10_13 or false) ||
      (security_framework_0_2_2.OSX_10_13 or false);
    security_framework_0_2_2.default = (f.security_framework_0_2_2.default or true);
    security_framework_sys_0_2_3.OSX_10_10 =
      (f.security_framework_sys_0_2_3.OSX_10_10 or false) ||
      (security_framework_0_2_2.OSX_10_10 or false) ||
      (f.security_framework_0_2_2.OSX_10_10 or false);
    security_framework_sys_0_2_3.OSX_10_11 =
      (f.security_framework_sys_0_2_3.OSX_10_11 or false) ||
      (security_framework_0_2_2.OSX_10_11 or false) ||
      (f.security_framework_0_2_2.OSX_10_11 or false);
    security_framework_sys_0_2_3.OSX_10_12 =
      (f.security_framework_sys_0_2_3.OSX_10_12 or false) ||
      (security_framework_0_2_2.OSX_10_12 or false) ||
      (f.security_framework_0_2_2.OSX_10_12 or false);
    security_framework_sys_0_2_3.OSX_10_13 =
      (f.security_framework_sys_0_2_3.OSX_10_13 or false) ||
      (security_framework_0_2_2.OSX_10_13 or false) ||
      (f.security_framework_0_2_2.OSX_10_13 or false);
    security_framework_sys_0_2_3.OSX_10_9 =
      (f.security_framework_sys_0_2_3.OSX_10_9 or false) ||
      (security_framework_0_2_2.OSX_10_9 or false) ||
      (f.security_framework_0_2_2.OSX_10_9 or false);
    security_framework_sys_0_2_3.default = true;
  }) [ core_foundation_0_5_1_features core_foundation_sys_0_5_1_features libc_0_2_48_features security_framework_sys_0_2_3_features ];
  security_framework_sys_0_2_3 = { features?(security_framework_sys_0_2_3_features {}) }: security_framework_sys_0_2_3_ {
    dependencies = mapFeatures features ([ MacTypes_sys_2_1_0 core_foundation_sys_0_5_1 libc_0_2_48 ]);
    features = mkFeatures (features.security_framework_sys_0_2_3 or {});
  };
  security_framework_sys_0_2_3_features = f: updateFeatures f (rec {
    MacTypes_sys_2_1_0.default = true;
    core_foundation_sys_0_5_1.default = true;
    libc_0_2_48.default = true;
    security_framework_sys_0_2_3.OSX_10_10 =
      (f.security_framework_sys_0_2_3.OSX_10_10 or false) ||
      (f.security_framework_sys_0_2_3.OSX_10_11 or false) ||
      (security_framework_sys_0_2_3.OSX_10_11 or false);
    security_framework_sys_0_2_3.OSX_10_11 =
      (f.security_framework_sys_0_2_3.OSX_10_11 or false) ||
      (f.security_framework_sys_0_2_3.OSX_10_12 or false) ||
      (security_framework_sys_0_2_3.OSX_10_12 or false);
    security_framework_sys_0_2_3.OSX_10_12 =
      (f.security_framework_sys_0_2_3.OSX_10_12 or false) ||
      (f.security_framework_sys_0_2_3.OSX_10_13 or false) ||
      (security_framework_sys_0_2_3.OSX_10_13 or false);
    security_framework_sys_0_2_3.OSX_10_9 =
      (f.security_framework_sys_0_2_3.OSX_10_9 or false) ||
      (f.security_framework_sys_0_2_3.OSX_10_10 or false) ||
      (security_framework_sys_0_2_3.OSX_10_10 or false);
    security_framework_sys_0_2_3.default = (f.security_framework_sys_0_2_3.default or true);
  }) [ MacTypes_sys_2_1_0_features core_foundation_sys_0_5_1_features libc_0_2_48_features ];
  semver_0_9_0 = { features?(semver_0_9_0_features {}) }: semver_0_9_0_ {
    dependencies = mapFeatures features ([ semver_parser_0_7_0 ]);
    features = mkFeatures (features.semver_0_9_0 or {});
  };
  semver_0_9_0_features = f: updateFeatures f (rec {
    semver_0_9_0.default = (f.semver_0_9_0.default or true);
    semver_0_9_0.serde =
      (f.semver_0_9_0.serde or false) ||
      (f.semver_0_9_0.ci or false) ||
      (semver_0_9_0.ci or false);
    semver_parser_0_7_0.default = true;
  }) [ semver_parser_0_7_0_features ];
  semver_parser_0_7_0 = { features?(semver_parser_0_7_0_features {}) }: semver_parser_0_7_0_ {};
  semver_parser_0_7_0_features = f: updateFeatures f (rec {
    semver_parser_0_7_0.default = (f.semver_parser_0_7_0.default or true);
  }) [];
  serde_1_0_88 = { features?(serde_1_0_88_features {}) }: serde_1_0_88_ {
    dependencies = mapFeatures features ([ ]
      ++ (if features.serde_1_0_88.serde_derive or false then [ serde_derive_1_0_88 ] else []));
    features = mkFeatures (features.serde_1_0_88 or {});
  };
  serde_1_0_88_features = f: updateFeatures f (rec {
    serde_1_0_88.default = (f.serde_1_0_88.default or true);
    serde_1_0_88.serde_derive =
      (f.serde_1_0_88.serde_derive or false) ||
      (f.serde_1_0_88.derive or false) ||
      (serde_1_0_88.derive or false);
    serde_1_0_88.std =
      (f.serde_1_0_88.std or false) ||
      (f.serde_1_0_88.default or false) ||
      (serde_1_0_88.default or false);
    serde_1_0_88.unstable =
      (f.serde_1_0_88.unstable or false) ||
      (f.serde_1_0_88.alloc or false) ||
      (serde_1_0_88.alloc or false);
    serde_derive_1_0_88.default = true;
  }) [ serde_derive_1_0_88_features ];
  serde_derive_1_0_88 = { features?(serde_derive_1_0_88_features {}) }: serde_derive_1_0_88_ {
    dependencies = mapFeatures features ([ proc_macro2_0_4_27 quote_0_6_11 syn_0_15_26 ]);
    features = mkFeatures (features.serde_derive_1_0_88 or {});
  };
  serde_derive_1_0_88_features = f: updateFeatures f (rec {
    proc_macro2_0_4_27.default = true;
    quote_0_6_11.default = true;
    serde_derive_1_0_88.default = (f.serde_derive_1_0_88.default or true);
    syn_0_15_26.default = true;
    syn_0_15_26.visit = true;
  }) [ proc_macro2_0_4_27_features quote_0_6_11_features syn_0_15_26_features ];
  serde_json_1_0_38 = { features?(serde_json_1_0_38_features {}) }: serde_json_1_0_38_ {
    dependencies = mapFeatures features ([ itoa_0_4_3 ryu_0_2_7 serde_1_0_88 ]);
    features = mkFeatures (features.serde_json_1_0_38 or {});
  };
  serde_json_1_0_38_features = f: updateFeatures f (rec {
    itoa_0_4_3.default = true;
    ryu_0_2_7.default = true;
    serde_1_0_88.default = true;
    serde_json_1_0_38.default = (f.serde_json_1_0_38.default or true);
    serde_json_1_0_38.indexmap =
      (f.serde_json_1_0_38.indexmap or false) ||
      (f.serde_json_1_0_38.preserve_order or false) ||
      (serde_json_1_0_38.preserve_order or false);
  }) [ itoa_0_4_3_features ryu_0_2_7_features serde_1_0_88_features ];
  serde_urlencoded_0_5_4 = { features?(serde_urlencoded_0_5_4_features {}) }: serde_urlencoded_0_5_4_ {
    dependencies = mapFeatures features ([ dtoa_0_4_3 itoa_0_4_3 serde_1_0_88 url_1_7_2 ]);
  };
  serde_urlencoded_0_5_4_features = f: updateFeatures f (rec {
    dtoa_0_4_3.default = true;
    itoa_0_4_3.default = true;
    serde_1_0_88.default = true;
    serde_urlencoded_0_5_4.default = (f.serde_urlencoded_0_5_4.default or true);
    url_1_7_2.default = true;
  }) [ dtoa_0_4_3_features itoa_0_4_3_features serde_1_0_88_features url_1_7_2_features ];
  server_0_1_0 = { features?(server_0_1_0_features {}) }: server_0_1_0_ {
    dependencies = mapFeatures features ([ apply_0_2_2 authorization_0_1_0 bytes_0_4_11 chrono_0_4_6 clap_2_32_0 db_0_1_0 diesel_1_4_1 env_logger_0_6_0 futures_0_1_25 hyper_0_12_24 hyper_tls_0_3_1 log_0_4_6 pool_0_1_0 serde_1_0_88 serde_json_1_0_38 testing_common_0_1_0 tokio_0_1_15 uuid_0_6_5 warp_0_1_13 ]);
  };
  server_0_1_0_features = f: updateFeatures f (rec {
    apply_0_2_2.default = true;
    authorization_0_1_0.default = true;
    bytes_0_4_11.default = true;
    chrono_0_4_6.default = true;
    clap_2_32_0.default = true;
    db_0_1_0.default = true;
    diesel_1_4_1.default = true;
    env_logger_0_6_0.default = true;
    futures_0_1_25.default = true;
    hyper_0_12_24.default = true;
    hyper_tls_0_3_1.default = true;
    log_0_4_6.default = true;
    pool_0_1_0.default = true;
    serde_1_0_88.default = true;
    serde_1_0_88.derive = true;
    serde_json_1_0_38.default = true;
    server_0_1_0.default = (f.server_0_1_0.default or true);
    testing_common_0_1_0.default = true;
    tokio_0_1_15.default = true;
    uuid_0_6_5.default = true;
    uuid_0_6_5.v4 = true;
    warp_0_1_13.default = true;
    warp_0_1_13.tls = true;
  }) [ apply_0_2_2_features authorization_0_1_0_features bytes_0_4_11_features chrono_0_4_6_features clap_2_32_0_features db_0_1_0_features diesel_1_4_1_features env_logger_0_6_0_features futures_0_1_25_features hyper_0_12_24_features hyper_tls_0_3_1_features log_0_4_6_features pool_0_1_0_features serde_1_0_88_features serde_json_1_0_38_features testing_common_0_1_0_features tokio_0_1_15_features uuid_0_6_5_features warp_0_1_13_features ];
  sha_1_0_8_1 = { features?(sha_1_0_8_1_features {}) }: sha_1_0_8_1_ {
    dependencies = mapFeatures features ([ block_buffer_0_7_0 digest_0_8_0 fake_simd_0_1_2 opaque_debug_0_2_2 ]);
    features = mkFeatures (features.sha_1_0_8_1 or {});
  };
  sha_1_0_8_1_features = f: updateFeatures f (rec {
    block_buffer_0_7_0.default = true;
    digest_0_8_0.default = true;
    digest_0_8_0.std =
      (f.digest_0_8_0.std or false) ||
      (sha_1_0_8_1.std or false) ||
      (f.sha_1_0_8_1.std or false);
    fake_simd_0_1_2.default = true;
    opaque_debug_0_2_2.default = true;
    sha_1_0_8_1.default = (f.sha_1_0_8_1.default or true);
    sha_1_0_8_1.sha1-asm =
      (f.sha_1_0_8_1.sha1-asm or false) ||
      (f.sha_1_0_8_1.asm or false) ||
      (sha_1_0_8_1.asm or false);
    sha_1_0_8_1.std =
      (f.sha_1_0_8_1.std or false) ||
      (f.sha_1_0_8_1.default or false) ||
      (sha_1_0_8_1.default or false);
  }) [ block_buffer_0_7_0_features digest_0_8_0_features fake_simd_0_1_2_features opaque_debug_0_2_2_features ];
  siphasher_0_2_3 = { features?(siphasher_0_2_3_features {}) }: siphasher_0_2_3_ {};
  siphasher_0_2_3_features = f: updateFeatures f (rec {
    siphasher_0_2_3.default = (f.siphasher_0_2_3.default or true);
  }) [];
  slab_0_4_2 = { features?(slab_0_4_2_features {}) }: slab_0_4_2_ {};
  slab_0_4_2_features = f: updateFeatures f (rec {
    slab_0_4_2.default = (f.slab_0_4_2.default or true);
  }) [];
  smallvec_0_6_9 = { features?(smallvec_0_6_9_features {}) }: smallvec_0_6_9_ {
    dependencies = mapFeatures features ([]);
    features = mkFeatures (features.smallvec_0_6_9 or {});
  };
  smallvec_0_6_9_features = f: updateFeatures f (rec {
    smallvec_0_6_9.default = (f.smallvec_0_6_9.default or true);
    smallvec_0_6_9.std =
      (f.smallvec_0_6_9.std or false) ||
      (f.smallvec_0_6_9.default or false) ||
      (smallvec_0_6_9.default or false);
  }) [];
  stable_deref_trait_1_1_1 = { features?(stable_deref_trait_1_1_1_features {}) }: stable_deref_trait_1_1_1_ {
    features = mkFeatures (features.stable_deref_trait_1_1_1 or {});
  };
  stable_deref_trait_1_1_1_features = f: updateFeatures f (rec {
    stable_deref_trait_1_1_1.default = (f.stable_deref_trait_1_1_1.default or true);
    stable_deref_trait_1_1_1.std =
      (f.stable_deref_trait_1_1_1.std or false) ||
      (f.stable_deref_trait_1_1_1.default or false) ||
      (stable_deref_trait_1_1_1.default or false);
  }) [];
  string_0_1_3 = { features?(string_0_1_3_features {}) }: string_0_1_3_ {};
  string_0_1_3_features = f: updateFeatures f (rec {
    string_0_1_3.default = (f.string_0_1_3.default or true);
  }) [];
  strsim_0_7_0 = { features?(strsim_0_7_0_features {}) }: strsim_0_7_0_ {};
  strsim_0_7_0_features = f: updateFeatures f (rec {
    strsim_0_7_0.default = (f.strsim_0_7_0.default or true);
  }) [];
  syn_0_15_26 = { features?(syn_0_15_26_features {}) }: syn_0_15_26_ {
    dependencies = mapFeatures features ([ proc_macro2_0_4_27 unicode_xid_0_1_0 ]
      ++ (if features.syn_0_15_26.quote or false then [ quote_0_6_11 ] else []));
    features = mkFeatures (features.syn_0_15_26 or {});
  };
  syn_0_15_26_features = f: updateFeatures f (rec {
    proc_macro2_0_4_27.default = (f.proc_macro2_0_4_27.default or false);
    proc_macro2_0_4_27.proc-macro =
      (f.proc_macro2_0_4_27.proc-macro or false) ||
      (syn_0_15_26.proc-macro or false) ||
      (f.syn_0_15_26.proc-macro or false);
    quote_0_6_11.default = (f.quote_0_6_11.default or false);
    quote_0_6_11.proc-macro =
      (f.quote_0_6_11.proc-macro or false) ||
      (syn_0_15_26.proc-macro or false) ||
      (f.syn_0_15_26.proc-macro or false);
    syn_0_15_26.clone-impls =
      (f.syn_0_15_26.clone-impls or false) ||
      (f.syn_0_15_26.default or false) ||
      (syn_0_15_26.default or false);
    syn_0_15_26.default = (f.syn_0_15_26.default or true);
    syn_0_15_26.derive =
      (f.syn_0_15_26.derive or false) ||
      (f.syn_0_15_26.default or false) ||
      (syn_0_15_26.default or false);
    syn_0_15_26.parsing =
      (f.syn_0_15_26.parsing or false) ||
      (f.syn_0_15_26.default or false) ||
      (syn_0_15_26.default or false);
    syn_0_15_26.printing =
      (f.syn_0_15_26.printing or false) ||
      (f.syn_0_15_26.default or false) ||
      (syn_0_15_26.default or false);
    syn_0_15_26.proc-macro =
      (f.syn_0_15_26.proc-macro or false) ||
      (f.syn_0_15_26.default or false) ||
      (syn_0_15_26.default or false);
    syn_0_15_26.quote =
      (f.syn_0_15_26.quote or false) ||
      (f.syn_0_15_26.printing or false) ||
      (syn_0_15_26.printing or false);
    unicode_xid_0_1_0.default = true;
  }) [ proc_macro2_0_4_27_features quote_0_6_11_features unicode_xid_0_1_0_features ];
  tempfile_3_0_7 = { features?(tempfile_3_0_7_features {}) }: tempfile_3_0_7_ {
    dependencies = mapFeatures features ([ cfg_if_0_1_6 rand_0_6_5 remove_dir_all_0_5_1 ])
      ++ (if kernel == "redox" then mapFeatures features ([ redox_syscall_0_1_51 ]) else [])
      ++ (if (kernel == "linux" || kernel == "darwin") then mapFeatures features ([ libc_0_2_48 ]) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ winapi_0_3_6 ]) else []);
  };
  tempfile_3_0_7_features = f: updateFeatures f (rec {
    cfg_if_0_1_6.default = true;
    libc_0_2_48.default = true;
    rand_0_6_5.default = true;
    redox_syscall_0_1_51.default = true;
    remove_dir_all_0_5_1.default = true;
    tempfile_3_0_7.default = (f.tempfile_3_0_7.default or true);
    winapi_0_3_6.default = true;
    winapi_0_3_6.fileapi = true;
    winapi_0_3_6.handleapi = true;
    winapi_0_3_6.winbase = true;
  }) [ cfg_if_0_1_6_features rand_0_6_5_features remove_dir_all_0_5_1_features redox_syscall_0_1_51_features libc_0_2_48_features winapi_0_3_6_features ];
  termcolor_1_0_4 = { features?(termcolor_1_0_4_features {}) }: termcolor_1_0_4_ {
    dependencies = (if kernel == "windows" then mapFeatures features ([ wincolor_1_0_1 ]) else []);
  };
  termcolor_1_0_4_features = f: updateFeatures f (rec {
    termcolor_1_0_4.default = (f.termcolor_1_0_4.default or true);
    wincolor_1_0_1.default = true;
  }) [ wincolor_1_0_1_features ];
  termion_1_5_1 = { features?(termion_1_5_1_features {}) }: termion_1_5_1_ {
    dependencies = (if !(kernel == "redox") then mapFeatures features ([ libc_0_2_48 ]) else [])
      ++ (if kernel == "redox" then mapFeatures features ([ redox_syscall_0_1_51 redox_termios_0_1_1 ]) else []);
  };
  termion_1_5_1_features = f: updateFeatures f (rec {
    libc_0_2_48.default = true;
    redox_syscall_0_1_51.default = true;
    redox_termios_0_1_1.default = true;
    termion_1_5_1.default = (f.termion_1_5_1.default or true);
  }) [ libc_0_2_48_features redox_syscall_0_1_51_features redox_termios_0_1_1_features ];
  testing_common_0_1_0 = { features?(testing_common_0_1_0_features {}) }: testing_common_0_1_0_ {
    dependencies = mapFeatures features ([ chrono_0_4_6 diesel_1_4_1 lazy_static_1_2_0 migrations_internals_1_4_0 pool_0_1_0 uuid_0_6_5 ]);
  };
  testing_common_0_1_0_features = f: updateFeatures f (rec {
    chrono_0_4_6.default = true;
    chrono_0_4_6.serde = true;
    diesel_1_4_1.chrono = true;
    diesel_1_4_1.default = true;
    diesel_1_4_1.postgres = true;
    diesel_1_4_1.r2d2 = true;
    diesel_1_4_1.serde_json = true;
    diesel_1_4_1.uuid = true;
    lazy_static_1_2_0.default = true;
    migrations_internals_1_4_0.default = true;
    pool_0_1_0.default = true;
    testing_common_0_1_0.default = (f.testing_common_0_1_0.default or true);
    uuid_0_6_5.default = true;
    uuid_0_6_5.serde = true;
    uuid_0_6_5.v4 = true;
  }) [ chrono_0_4_6_features diesel_1_4_1_features lazy_static_1_2_0_features migrations_internals_1_4_0_features pool_0_1_0_features uuid_0_6_5_features ];
  textwrap_0_10_0 = { features?(textwrap_0_10_0_features {}) }: textwrap_0_10_0_ {
    dependencies = mapFeatures features ([ unicode_width_0_1_5 ]);
  };
  textwrap_0_10_0_features = f: updateFeatures f (rec {
    textwrap_0_10_0.default = (f.textwrap_0_10_0.default or true);
    unicode_width_0_1_5.default = true;
  }) [ unicode_width_0_1_5_features ];
  thread_local_0_3_6 = { features?(thread_local_0_3_6_features {}) }: thread_local_0_3_6_ {
    dependencies = mapFeatures features ([ lazy_static_1_2_0 ]);
  };
  thread_local_0_3_6_features = f: updateFeatures f (rec {
    lazy_static_1_2_0.default = true;
    thread_local_0_3_6.default = (f.thread_local_0_3_6.default or true);
  }) [ lazy_static_1_2_0_features ];
  time_0_1_42 = { features?(time_0_1_42_features {}) }: time_0_1_42_ {
    dependencies = mapFeatures features ([ libc_0_2_48 ])
      ++ (if kernel == "redox" then mapFeatures features ([ redox_syscall_0_1_51 ]) else [])
      ++ (if kernel == "windows" then mapFeatures features ([ winapi_0_3_6 ]) else []);
  };
  time_0_1_42_features = f: updateFeatures f (rec {
    libc_0_2_48.default = true;
    redox_syscall_0_1_51.default = true;
    time_0_1_42.default = (f.time_0_1_42.default or true);
    winapi_0_3_6.default = true;
    winapi_0_3_6.minwinbase = true;
    winapi_0_3_6.minwindef = true;
    winapi_0_3_6.ntdef = true;
    winapi_0_3_6.profileapi = true;
    winapi_0_3_6.std = true;
    winapi_0_3_6.sysinfoapi = true;
    winapi_0_3_6.timezoneapi = true;
  }) [ libc_0_2_48_features redox_syscall_0_1_51_features winapi_0_3_6_features ];
  tokio_0_1_15 = { features?(tokio_0_1_15_features {}) }: tokio_0_1_15_ {
    dependencies = mapFeatures features ([ futures_0_1_25 ]
      ++ (if features.tokio_0_1_15.bytes or false then [ bytes_0_4_11 ] else [])
      ++ (if features.tokio_0_1_15.mio or false then [ mio_0_6_16 ] else [])
      ++ (if features.tokio_0_1_15.num_cpus or false then [ num_cpus_1_10_0 ] else [])
      ++ (if features.tokio_0_1_15.tokio-codec or false then [ tokio_codec_0_1_1 ] else [])
      ++ (if features.tokio_0_1_15.tokio-current-thread or false then [ tokio_current_thread_0_1_4 ] else [])
      ++ (if features.tokio_0_1_15.tokio-executor or false then [ tokio_executor_0_1_6 ] else [])
      ++ (if features.tokio_0_1_15.tokio-fs or false then [ tokio_fs_0_1_5 ] else [])
      ++ (if features.tokio_0_1_15.tokio-io or false then [ tokio_io_0_1_11 ] else [])
      ++ (if features.tokio_0_1_15.tokio-reactor or false then [ tokio_reactor_0_1_8 ] else [])
      ++ (if features.tokio_0_1_15.tokio-sync or false then [ tokio_sync_0_1_1 ] else [])
      ++ (if features.tokio_0_1_15.tokio-tcp or false then [ tokio_tcp_0_1_3 ] else [])
      ++ (if features.tokio_0_1_15.tokio-threadpool or false then [ tokio_threadpool_0_1_11 ] else [])
      ++ (if features.tokio_0_1_15.tokio-timer or false then [ tokio_timer_0_2_10 ] else [])
      ++ (if features.tokio_0_1_15.tokio-udp or false then [ tokio_udp_0_1_3 ] else []))
      ++ (if (kernel == "linux" || kernel == "darwin") then mapFeatures features ([ ]
      ++ (if features.tokio_0_1_15.tokio-uds or false then [ tokio_uds_0_2_5 ] else [])) else []);
    features = mkFeatures (features.tokio_0_1_15 or {});
  };
  tokio_0_1_15_features = f: updateFeatures f (rec {
    bytes_0_4_11.default = true;
    futures_0_1_25.default = true;
    mio_0_6_16.default = true;
    num_cpus_1_10_0.default = true;
    tokio_0_1_15.bytes =
      (f.tokio_0_1_15.bytes or false) ||
      (f.tokio_0_1_15.io or false) ||
      (tokio_0_1_15.io or false);
    tokio_0_1_15.codec =
      (f.tokio_0_1_15.codec or false) ||
      (f.tokio_0_1_15.default or false) ||
      (tokio_0_1_15.default or false);
    tokio_0_1_15.default = (f.tokio_0_1_15.default or true);
    tokio_0_1_15.fs =
      (f.tokio_0_1_15.fs or false) ||
      (f.tokio_0_1_15.default or false) ||
      (tokio_0_1_15.default or false);
    tokio_0_1_15.io =
      (f.tokio_0_1_15.io or false) ||
      (f.tokio_0_1_15.default or false) ||
      (tokio_0_1_15.default or false) ||
      (f.tokio_0_1_15.reactor or false) ||
      (tokio_0_1_15.reactor or false);
    tokio_0_1_15.mio =
      (f.tokio_0_1_15.mio or false) ||
      (f.tokio_0_1_15.reactor or false) ||
      (tokio_0_1_15.reactor or false);
    tokio_0_1_15.num_cpus =
      (f.tokio_0_1_15.num_cpus or false) ||
      (f.tokio_0_1_15.rt-full or false) ||
      (tokio_0_1_15.rt-full or false);
    tokio_0_1_15.reactor =
      (f.tokio_0_1_15.reactor or false) ||
      (f.tokio_0_1_15.default or false) ||
      (tokio_0_1_15.default or false) ||
      (f.tokio_0_1_15.rt-full or false) ||
      (tokio_0_1_15.rt-full or false);
    tokio_0_1_15.rt-full =
      (f.tokio_0_1_15.rt-full or false) ||
      (f.tokio_0_1_15.default or false) ||
      (tokio_0_1_15.default or false);
    tokio_0_1_15.sync =
      (f.tokio_0_1_15.sync or false) ||
      (f.tokio_0_1_15.default or false) ||
      (tokio_0_1_15.default or false);
    tokio_0_1_15.tcp =
      (f.tokio_0_1_15.tcp or false) ||
      (f.tokio_0_1_15.default or false) ||
      (tokio_0_1_15.default or false);
    tokio_0_1_15.timer =
      (f.tokio_0_1_15.timer or false) ||
      (f.tokio_0_1_15.default or false) ||
      (tokio_0_1_15.default or false) ||
      (f.tokio_0_1_15.rt-full or false) ||
      (tokio_0_1_15.rt-full or false);
    tokio_0_1_15.tokio-codec =
      (f.tokio_0_1_15.tokio-codec or false) ||
      (f.tokio_0_1_15.codec or false) ||
      (tokio_0_1_15.codec or false);
    tokio_0_1_15.tokio-current-thread =
      (f.tokio_0_1_15.tokio-current-thread or false) ||
      (f.tokio_0_1_15.rt-full or false) ||
      (tokio_0_1_15.rt-full or false);
    tokio_0_1_15.tokio-executor =
      (f.tokio_0_1_15.tokio-executor or false) ||
      (f.tokio_0_1_15.rt-full or false) ||
      (tokio_0_1_15.rt-full or false);
    tokio_0_1_15.tokio-fs =
      (f.tokio_0_1_15.tokio-fs or false) ||
      (f.tokio_0_1_15.fs or false) ||
      (tokio_0_1_15.fs or false);
    tokio_0_1_15.tokio-io =
      (f.tokio_0_1_15.tokio-io or false) ||
      (f.tokio_0_1_15.io or false) ||
      (tokio_0_1_15.io or false);
    tokio_0_1_15.tokio-reactor =
      (f.tokio_0_1_15.tokio-reactor or false) ||
      (f.tokio_0_1_15.reactor or false) ||
      (tokio_0_1_15.reactor or false);
    tokio_0_1_15.tokio-sync =
      (f.tokio_0_1_15.tokio-sync or false) ||
      (f.tokio_0_1_15.sync or false) ||
      (tokio_0_1_15.sync or false);
    tokio_0_1_15.tokio-tcp =
      (f.tokio_0_1_15.tokio-tcp or false) ||
      (f.tokio_0_1_15.tcp or false) ||
      (tokio_0_1_15.tcp or false);
    tokio_0_1_15.tokio-threadpool =
      (f.tokio_0_1_15.tokio-threadpool or false) ||
      (f.tokio_0_1_15.rt-full or false) ||
      (tokio_0_1_15.rt-full or false);
    tokio_0_1_15.tokio-timer =
      (f.tokio_0_1_15.tokio-timer or false) ||
      (f.tokio_0_1_15.timer or false) ||
      (tokio_0_1_15.timer or false);
    tokio_0_1_15.tokio-udp =
      (f.tokio_0_1_15.tokio-udp or false) ||
      (f.tokio_0_1_15.udp or false) ||
      (tokio_0_1_15.udp or false);
    tokio_0_1_15.tokio-uds =
      (f.tokio_0_1_15.tokio-uds or false) ||
      (f.tokio_0_1_15.uds or false) ||
      (tokio_0_1_15.uds or false);
    tokio_0_1_15.udp =
      (f.tokio_0_1_15.udp or false) ||
      (f.tokio_0_1_15.default or false) ||
      (tokio_0_1_15.default or false);
    tokio_0_1_15.uds =
      (f.tokio_0_1_15.uds or false) ||
      (f.tokio_0_1_15.default or false) ||
      (tokio_0_1_15.default or false);
    tokio_codec_0_1_1.default = true;
    tokio_current_thread_0_1_4.default = true;
    tokio_executor_0_1_6.default = true;
    tokio_fs_0_1_5.default = true;
    tokio_io_0_1_11.default = true;
    tokio_reactor_0_1_8.default = true;
    tokio_sync_0_1_1.default = true;
    tokio_tcp_0_1_3.default = true;
    tokio_threadpool_0_1_11.default = true;
    tokio_timer_0_2_10.default = true;
    tokio_udp_0_1_3.default = true;
    tokio_uds_0_2_5.default = true;
  }) [ bytes_0_4_11_features futures_0_1_25_features mio_0_6_16_features num_cpus_1_10_0_features tokio_codec_0_1_1_features tokio_current_thread_0_1_4_features tokio_executor_0_1_6_features tokio_fs_0_1_5_features tokio_io_0_1_11_features tokio_reactor_0_1_8_features tokio_sync_0_1_1_features tokio_tcp_0_1_3_features tokio_threadpool_0_1_11_features tokio_timer_0_2_10_features tokio_udp_0_1_3_features tokio_uds_0_2_5_features ];
  tokio_codec_0_1_1 = { features?(tokio_codec_0_1_1_features {}) }: tokio_codec_0_1_1_ {
    dependencies = mapFeatures features ([ bytes_0_4_11 futures_0_1_25 tokio_io_0_1_11 ]);
  };
  tokio_codec_0_1_1_features = f: updateFeatures f (rec {
    bytes_0_4_11.default = true;
    futures_0_1_25.default = true;
    tokio_codec_0_1_1.default = (f.tokio_codec_0_1_1.default or true);
    tokio_io_0_1_11.default = true;
  }) [ bytes_0_4_11_features futures_0_1_25_features tokio_io_0_1_11_features ];
  tokio_current_thread_0_1_4 = { features?(tokio_current_thread_0_1_4_features {}) }: tokio_current_thread_0_1_4_ {
    dependencies = mapFeatures features ([ futures_0_1_25 tokio_executor_0_1_6 ]);
  };
  tokio_current_thread_0_1_4_features = f: updateFeatures f (rec {
    futures_0_1_25.default = true;
    tokio_current_thread_0_1_4.default = (f.tokio_current_thread_0_1_4.default or true);
    tokio_executor_0_1_6.default = true;
  }) [ futures_0_1_25_features tokio_executor_0_1_6_features ];
  tokio_executor_0_1_6 = { features?(tokio_executor_0_1_6_features {}) }: tokio_executor_0_1_6_ {
    dependencies = mapFeatures features ([ crossbeam_utils_0_6_5 futures_0_1_25 ]);
  };
  tokio_executor_0_1_6_features = f: updateFeatures f (rec {
    crossbeam_utils_0_6_5.default = true;
    futures_0_1_25.default = true;
    tokio_executor_0_1_6.default = (f.tokio_executor_0_1_6.default or true);
  }) [ crossbeam_utils_0_6_5_features futures_0_1_25_features ];
  tokio_fs_0_1_5 = { features?(tokio_fs_0_1_5_features {}) }: tokio_fs_0_1_5_ {
    dependencies = mapFeatures features ([ futures_0_1_25 tokio_io_0_1_11 tokio_threadpool_0_1_11 ]);
  };
  tokio_fs_0_1_5_features = f: updateFeatures f (rec {
    futures_0_1_25.default = true;
    tokio_fs_0_1_5.default = (f.tokio_fs_0_1_5.default or true);
    tokio_io_0_1_11.default = true;
    tokio_threadpool_0_1_11.default = true;
  }) [ futures_0_1_25_features tokio_io_0_1_11_features tokio_threadpool_0_1_11_features ];
  tokio_io_0_1_11 = { features?(tokio_io_0_1_11_features {}) }: tokio_io_0_1_11_ {
    dependencies = mapFeatures features ([ bytes_0_4_11 futures_0_1_25 log_0_4_6 ]);
  };
  tokio_io_0_1_11_features = f: updateFeatures f (rec {
    bytes_0_4_11.default = true;
    futures_0_1_25.default = true;
    log_0_4_6.default = true;
    tokio_io_0_1_11.default = (f.tokio_io_0_1_11.default or true);
  }) [ bytes_0_4_11_features futures_0_1_25_features log_0_4_6_features ];
  tokio_reactor_0_1_8 = { features?(tokio_reactor_0_1_8_features {}) }: tokio_reactor_0_1_8_ {
    dependencies = mapFeatures features ([ crossbeam_utils_0_6_5 futures_0_1_25 lazy_static_1_2_0 log_0_4_6 mio_0_6_16 num_cpus_1_10_0 parking_lot_0_7_1 slab_0_4_2 tokio_executor_0_1_6 tokio_io_0_1_11 ]);
  };
  tokio_reactor_0_1_8_features = f: updateFeatures f (rec {
    crossbeam_utils_0_6_5.default = true;
    futures_0_1_25.default = true;
    lazy_static_1_2_0.default = true;
    log_0_4_6.default = true;
    mio_0_6_16.default = true;
    num_cpus_1_10_0.default = true;
    parking_lot_0_7_1.default = true;
    slab_0_4_2.default = true;
    tokio_executor_0_1_6.default = true;
    tokio_io_0_1_11.default = true;
    tokio_reactor_0_1_8.default = (f.tokio_reactor_0_1_8.default or true);
  }) [ crossbeam_utils_0_6_5_features futures_0_1_25_features lazy_static_1_2_0_features log_0_4_6_features mio_0_6_16_features num_cpus_1_10_0_features parking_lot_0_7_1_features slab_0_4_2_features tokio_executor_0_1_6_features tokio_io_0_1_11_features ];
  tokio_sync_0_1_1 = { features?(tokio_sync_0_1_1_features {}) }: tokio_sync_0_1_1_ {
    dependencies = mapFeatures features ([ futures_0_1_25 ]);
  };
  tokio_sync_0_1_1_features = f: updateFeatures f (rec {
    futures_0_1_25.default = true;
    tokio_sync_0_1_1.default = (f.tokio_sync_0_1_1.default or true);
  }) [ futures_0_1_25_features ];
  tokio_tcp_0_1_3 = { features?(tokio_tcp_0_1_3_features {}) }: tokio_tcp_0_1_3_ {
    dependencies = mapFeatures features ([ bytes_0_4_11 futures_0_1_25 iovec_0_1_2 mio_0_6_16 tokio_io_0_1_11 tokio_reactor_0_1_8 ]);
  };
  tokio_tcp_0_1_3_features = f: updateFeatures f (rec {
    bytes_0_4_11.default = true;
    futures_0_1_25.default = true;
    iovec_0_1_2.default = true;
    mio_0_6_16.default = true;
    tokio_io_0_1_11.default = true;
    tokio_reactor_0_1_8.default = true;
    tokio_tcp_0_1_3.default = (f.tokio_tcp_0_1_3.default or true);
  }) [ bytes_0_4_11_features futures_0_1_25_features iovec_0_1_2_features mio_0_6_16_features tokio_io_0_1_11_features tokio_reactor_0_1_8_features ];
  tokio_threadpool_0_1_11 = { features?(tokio_threadpool_0_1_11_features {}) }: tokio_threadpool_0_1_11_ {
    dependencies = mapFeatures features ([ crossbeam_0_6_0 crossbeam_channel_0_3_8 crossbeam_deque_0_6_3 crossbeam_utils_0_6_5 futures_0_1_25 log_0_4_6 num_cpus_1_10_0 rand_0_6_5 slab_0_4_2 tokio_executor_0_1_6 ]);
  };
  tokio_threadpool_0_1_11_features = f: updateFeatures f (rec {
    crossbeam_0_6_0.default = true;
    crossbeam_channel_0_3_8.default = true;
    crossbeam_deque_0_6_3.default = true;
    crossbeam_utils_0_6_5.default = true;
    futures_0_1_25.default = true;
    log_0_4_6.default = true;
    num_cpus_1_10_0.default = true;
    rand_0_6_5.default = true;
    slab_0_4_2.default = true;
    tokio_executor_0_1_6.default = true;
    tokio_threadpool_0_1_11.default = (f.tokio_threadpool_0_1_11.default or true);
  }) [ crossbeam_0_6_0_features crossbeam_channel_0_3_8_features crossbeam_deque_0_6_3_features crossbeam_utils_0_6_5_features futures_0_1_25_features log_0_4_6_features num_cpus_1_10_0_features rand_0_6_5_features slab_0_4_2_features tokio_executor_0_1_6_features ];
  tokio_timer_0_2_10 = { features?(tokio_timer_0_2_10_features {}) }: tokio_timer_0_2_10_ {
    dependencies = mapFeatures features ([ crossbeam_utils_0_6_5 futures_0_1_25 slab_0_4_2 tokio_executor_0_1_6 ]);
  };
  tokio_timer_0_2_10_features = f: updateFeatures f (rec {
    crossbeam_utils_0_6_5.default = true;
    futures_0_1_25.default = true;
    slab_0_4_2.default = true;
    tokio_executor_0_1_6.default = true;
    tokio_timer_0_2_10.default = (f.tokio_timer_0_2_10.default or true);
  }) [ crossbeam_utils_0_6_5_features futures_0_1_25_features slab_0_4_2_features tokio_executor_0_1_6_features ];
  tokio_udp_0_1_3 = { features?(tokio_udp_0_1_3_features {}) }: tokio_udp_0_1_3_ {
    dependencies = mapFeatures features ([ bytes_0_4_11 futures_0_1_25 log_0_4_6 mio_0_6_16 tokio_codec_0_1_1 tokio_io_0_1_11 tokio_reactor_0_1_8 ]);
  };
  tokio_udp_0_1_3_features = f: updateFeatures f (rec {
    bytes_0_4_11.default = true;
    futures_0_1_25.default = true;
    log_0_4_6.default = true;
    mio_0_6_16.default = true;
    tokio_codec_0_1_1.default = true;
    tokio_io_0_1_11.default = true;
    tokio_reactor_0_1_8.default = true;
    tokio_udp_0_1_3.default = (f.tokio_udp_0_1_3.default or true);
  }) [ bytes_0_4_11_features futures_0_1_25_features log_0_4_6_features mio_0_6_16_features tokio_codec_0_1_1_features tokio_io_0_1_11_features tokio_reactor_0_1_8_features ];
  tokio_uds_0_2_5 = { features?(tokio_uds_0_2_5_features {}) }: tokio_uds_0_2_5_ {
    dependencies = mapFeatures features ([ bytes_0_4_11 futures_0_1_25 iovec_0_1_2 libc_0_2_48 log_0_4_6 mio_0_6_16 mio_uds_0_6_7 tokio_codec_0_1_1 tokio_io_0_1_11 tokio_reactor_0_1_8 ]);
  };
  tokio_uds_0_2_5_features = f: updateFeatures f (rec {
    bytes_0_4_11.default = true;
    futures_0_1_25.default = true;
    iovec_0_1_2.default = true;
    libc_0_2_48.default = true;
    log_0_4_6.default = true;
    mio_0_6_16.default = true;
    mio_uds_0_6_7.default = true;
    tokio_codec_0_1_1.default = true;
    tokio_io_0_1_11.default = true;
    tokio_reactor_0_1_8.default = true;
    tokio_uds_0_2_5.default = (f.tokio_uds_0_2_5.default or true);
  }) [ bytes_0_4_11_features futures_0_1_25_features iovec_0_1_2_features libc_0_2_48_features log_0_4_6_features mio_0_6_16_features mio_uds_0_6_7_features tokio_codec_0_1_1_features tokio_io_0_1_11_features tokio_reactor_0_1_8_features ];
  try_lock_0_2_2 = { features?(try_lock_0_2_2_features {}) }: try_lock_0_2_2_ {};
  try_lock_0_2_2_features = f: updateFeatures f (rec {
    try_lock_0_2_2.default = (f.try_lock_0_2_2.default or true);
  }) [];
  tungstenite_0_6_1 = { features?(tungstenite_0_6_1_features {}) }: tungstenite_0_6_1_ {
    dependencies = mapFeatures features ([ base64_0_10_1 byteorder_1_3_1 bytes_0_4_11 httparse_1_3_3 input_buffer_0_2_0 log_0_4_6 rand_0_5_6 sha_1_0_8_1 url_1_7_2 utf_8_0_7_5 ]);
    features = mkFeatures (features.tungstenite_0_6_1 or {});
  };
  tungstenite_0_6_1_features = f: updateFeatures f (rec {
    base64_0_10_1.default = true;
    byteorder_1_3_1.default = true;
    bytes_0_4_11.default = true;
    httparse_1_3_3.default = true;
    input_buffer_0_2_0.default = true;
    log_0_4_6.default = true;
    rand_0_5_6.default = true;
    sha_1_0_8_1.default = true;
    tungstenite_0_6_1.default = (f.tungstenite_0_6_1.default or true);
    tungstenite_0_6_1.native-tls =
      (f.tungstenite_0_6_1.native-tls or false) ||
      (f.tungstenite_0_6_1.tls or false) ||
      (tungstenite_0_6_1.tls or false);
    tungstenite_0_6_1.tls =
      (f.tungstenite_0_6_1.tls or false) ||
      (f.tungstenite_0_6_1.default or false) ||
      (tungstenite_0_6_1.default or false);
    url_1_7_2.default = true;
    utf_8_0_7_5.default = true;
  }) [ base64_0_10_1_features byteorder_1_3_1_features bytes_0_4_11_features httparse_1_3_3_features input_buffer_0_2_0_features log_0_4_6_features rand_0_5_6_features sha_1_0_8_1_features url_1_7_2_features utf_8_0_7_5_features ];
  typenum_1_10_0 = { features?(typenum_1_10_0_features {}) }: typenum_1_10_0_ {
    features = mkFeatures (features.typenum_1_10_0 or {});
  };
  typenum_1_10_0_features = f: updateFeatures f (rec {
    typenum_1_10_0.default = (f.typenum_1_10_0.default or true);
  }) [];
  ucd_util_0_1_3 = { features?(ucd_util_0_1_3_features {}) }: ucd_util_0_1_3_ {};
  ucd_util_0_1_3_features = f: updateFeatures f (rec {
    ucd_util_0_1_3.default = (f.ucd_util_0_1_3.default or true);
  }) [];
  unicase_1_4_2 = { features?(unicase_1_4_2_features {}) }: unicase_1_4_2_ {
    dependencies = mapFeatures features ([]);
    buildDependencies = mapFeatures features ([ version_check_0_1_5 ]);
    features = mkFeatures (features.unicase_1_4_2 or {});
  };
  unicase_1_4_2_features = f: updateFeatures f (rec {
    unicase_1_4_2.default = (f.unicase_1_4_2.default or true);
    unicase_1_4_2.heapsize =
      (f.unicase_1_4_2.heapsize or false) ||
      (f.unicase_1_4_2.heap_size or false) ||
      (unicase_1_4_2.heap_size or false);
    unicase_1_4_2.heapsize_plugin =
      (f.unicase_1_4_2.heapsize_plugin or false) ||
      (f.unicase_1_4_2.heap_size or false) ||
      (unicase_1_4_2.heap_size or false);
    version_check_0_1_5.default = true;
  }) [ version_check_0_1_5_features ];
  unicase_2_2_0 = { features?(unicase_2_2_0_features {}) }: unicase_2_2_0_ {
    buildDependencies = mapFeatures features ([ version_check_0_1_5 ]);
    features = mkFeatures (features.unicase_2_2_0 or {});
  };
  unicase_2_2_0_features = f: updateFeatures f (rec {
    unicase_2_2_0.default = (f.unicase_2_2_0.default or true);
    version_check_0_1_5.default = true;
  }) [ version_check_0_1_5_features ];
  unicode_bidi_0_3_4 = { features?(unicode_bidi_0_3_4_features {}) }: unicode_bidi_0_3_4_ {
    dependencies = mapFeatures features ([ matches_0_1_8 ]);
    features = mkFeatures (features.unicode_bidi_0_3_4 or {});
  };
  unicode_bidi_0_3_4_features = f: updateFeatures f (rec {
    matches_0_1_8.default = true;
    unicode_bidi_0_3_4.default = (f.unicode_bidi_0_3_4.default or true);
    unicode_bidi_0_3_4.flame =
      (f.unicode_bidi_0_3_4.flame or false) ||
      (f.unicode_bidi_0_3_4.flame_it or false) ||
      (unicode_bidi_0_3_4.flame_it or false);
    unicode_bidi_0_3_4.flamer =
      (f.unicode_bidi_0_3_4.flamer or false) ||
      (f.unicode_bidi_0_3_4.flame_it or false) ||
      (unicode_bidi_0_3_4.flame_it or false);
    unicode_bidi_0_3_4.serde =
      (f.unicode_bidi_0_3_4.serde or false) ||
      (f.unicode_bidi_0_3_4.with_serde or false) ||
      (unicode_bidi_0_3_4.with_serde or false);
  }) [ matches_0_1_8_features ];
  unicode_normalization_0_1_8 = { features?(unicode_normalization_0_1_8_features {}) }: unicode_normalization_0_1_8_ {
    dependencies = mapFeatures features ([ smallvec_0_6_9 ]);
  };
  unicode_normalization_0_1_8_features = f: updateFeatures f (rec {
    smallvec_0_6_9.default = true;
    unicode_normalization_0_1_8.default = (f.unicode_normalization_0_1_8.default or true);
  }) [ smallvec_0_6_9_features ];
  unicode_width_0_1_5 = { features?(unicode_width_0_1_5_features {}) }: unicode_width_0_1_5_ {
    features = mkFeatures (features.unicode_width_0_1_5 or {});
  };
  unicode_width_0_1_5_features = f: updateFeatures f (rec {
    unicode_width_0_1_5.default = (f.unicode_width_0_1_5.default or true);
  }) [];
  unicode_xid_0_1_0 = { features?(unicode_xid_0_1_0_features {}) }: unicode_xid_0_1_0_ {
    features = mkFeatures (features.unicode_xid_0_1_0 or {});
  };
  unicode_xid_0_1_0_features = f: updateFeatures f (rec {
    unicode_xid_0_1_0.default = (f.unicode_xid_0_1_0.default or true);
  }) [];
  untrusted_0_6_2 = { features?(untrusted_0_6_2_features {}) }: untrusted_0_6_2_ {};
  untrusted_0_6_2_features = f: updateFeatures f (rec {
    untrusted_0_6_2.default = (f.untrusted_0_6_2.default or true);
  }) [];
  url_1_7_2 = { features?(url_1_7_2_features {}) }: url_1_7_2_ {
    dependencies = mapFeatures features ([ idna_0_1_5 matches_0_1_8 percent_encoding_1_0_1 ]);
    features = mkFeatures (features.url_1_7_2 or {});
  };
  url_1_7_2_features = f: updateFeatures f (rec {
    idna_0_1_5.default = true;
    matches_0_1_8.default = true;
    percent_encoding_1_0_1.default = true;
    url_1_7_2.default = (f.url_1_7_2.default or true);
    url_1_7_2.encoding =
      (f.url_1_7_2.encoding or false) ||
      (f.url_1_7_2.query_encoding or false) ||
      (url_1_7_2.query_encoding or false);
    url_1_7_2.heapsize =
      (f.url_1_7_2.heapsize or false) ||
      (f.url_1_7_2.heap_size or false) ||
      (url_1_7_2.heap_size or false);
  }) [ idna_0_1_5_features matches_0_1_8_features percent_encoding_1_0_1_features ];
  urlencoding_1_0_0 = { features?(urlencoding_1_0_0_features {}) }: urlencoding_1_0_0_ {};
  urlencoding_1_0_0_features = f: updateFeatures f (rec {
    urlencoding_1_0_0.default = (f.urlencoding_1_0_0.default or true);
  }) [];
  utf_8_0_7_5 = { features?(utf_8_0_7_5_features {}) }: utf_8_0_7_5_ {};
  utf_8_0_7_5_features = f: updateFeatures f (rec {
    utf_8_0_7_5.default = (f.utf_8_0_7_5.default or true);
  }) [];
  utf8_ranges_1_0_2 = { features?(utf8_ranges_1_0_2_features {}) }: utf8_ranges_1_0_2_ {};
  utf8_ranges_1_0_2_features = f: updateFeatures f (rec {
    utf8_ranges_1_0_2.default = (f.utf8_ranges_1_0_2.default or true);
  }) [];
  uuid_0_6_5 = { features?(uuid_0_6_5_features {}) }: uuid_0_6_5_ {
    dependencies = mapFeatures features ([ cfg_if_0_1_6 ]
      ++ (if features.uuid_0_6_5.rand or false then [ rand_0_4_6 ] else [])
      ++ (if features.uuid_0_6_5.serde or false then [ serde_1_0_88 ] else []));
    features = mkFeatures (features.uuid_0_6_5 or {});
  };
  uuid_0_6_5_features = f: updateFeatures f (rec {
    cfg_if_0_1_6.default = true;
    rand_0_4_6.default = true;
    serde_1_0_88.default = (f.serde_1_0_88.default or false);
    uuid_0_6_5.byteorder =
      (f.uuid_0_6_5.byteorder or false) ||
      (f.uuid_0_6_5.u128 or false) ||
      (uuid_0_6_5.u128 or false);
    uuid_0_6_5.default = (f.uuid_0_6_5.default or true);
    uuid_0_6_5.md5 =
      (f.uuid_0_6_5.md5 or false) ||
      (f.uuid_0_6_5.v3 or false) ||
      (uuid_0_6_5.v3 or false);
    uuid_0_6_5.nightly =
      (f.uuid_0_6_5.nightly or false) ||
      (f.uuid_0_6_5.const_fn or false) ||
      (uuid_0_6_5.const_fn or false);
    uuid_0_6_5.rand =
      (f.uuid_0_6_5.rand or false) ||
      (f.uuid_0_6_5.v3 or false) ||
      (uuid_0_6_5.v3 or false) ||
      (f.uuid_0_6_5.v4 or false) ||
      (uuid_0_6_5.v4 or false) ||
      (f.uuid_0_6_5.v5 or false) ||
      (uuid_0_6_5.v5 or false);
    uuid_0_6_5.sha1 =
      (f.uuid_0_6_5.sha1 or false) ||
      (f.uuid_0_6_5.v5 or false) ||
      (uuid_0_6_5.v5 or false);
    uuid_0_6_5.std =
      (f.uuid_0_6_5.std or false) ||
      (f.uuid_0_6_5.default or false) ||
      (uuid_0_6_5.default or false) ||
      (f.uuid_0_6_5.use_std or false) ||
      (uuid_0_6_5.use_std or false);
  }) [ cfg_if_0_1_6_features rand_0_4_6_features serde_1_0_88_features ];
  vcpkg_0_2_6 = { features?(vcpkg_0_2_6_features {}) }: vcpkg_0_2_6_ {};
  vcpkg_0_2_6_features = f: updateFeatures f (rec {
    vcpkg_0_2_6.default = (f.vcpkg_0_2_6.default or true);
  }) [];
  vec_map_0_8_1 = { features?(vec_map_0_8_1_features {}) }: vec_map_0_8_1_ {
    dependencies = mapFeatures features ([]);
    features = mkFeatures (features.vec_map_0_8_1 or {});
  };
  vec_map_0_8_1_features = f: updateFeatures f (rec {
    vec_map_0_8_1.default = (f.vec_map_0_8_1.default or true);
    vec_map_0_8_1.serde =
      (f.vec_map_0_8_1.serde or false) ||
      (f.vec_map_0_8_1.eders or false) ||
      (vec_map_0_8_1.eders or false);
  }) [];
  version_check_0_1_5 = { features?(version_check_0_1_5_features {}) }: version_check_0_1_5_ {};
  version_check_0_1_5_features = f: updateFeatures f (rec {
    version_check_0_1_5.default = (f.version_check_0_1_5.default or true);
  }) [];
  want_0_0_6 = { features?(want_0_0_6_features {}) }: want_0_0_6_ {
    dependencies = mapFeatures features ([ futures_0_1_25 log_0_4_6 try_lock_0_2_2 ]);
  };
  want_0_0_6_features = f: updateFeatures f (rec {
    futures_0_1_25.default = true;
    log_0_4_6.default = true;
    try_lock_0_2_2.default = true;
    want_0_0_6.default = (f.want_0_0_6.default or true);
  }) [ futures_0_1_25_features log_0_4_6_features try_lock_0_2_2_features ];
  warp_0_1_13 = { features?(warp_0_1_13_features {}) }: warp_0_1_13_ {
    dependencies = mapFeatures features ([ bytes_0_4_11 futures_0_1_25 headers_0_2_1 http_0_1_15 hyper_0_12_24 log_0_4_6 mime_0_3_13 mime_guess_2_0_0_alpha_6 scoped_tls_0_1_2 serde_1_0_88 serde_json_1_0_38 serde_urlencoded_0_5_4 tokio_0_1_15 tokio_io_0_1_11 tokio_threadpool_0_1_11 tungstenite_0_6_1 urlencoding_1_0_0 ]
      ++ (if features.warp_0_1_13.rustls or false then [ rustls_0_14_0 ] else []));
    features = mkFeatures (features.warp_0_1_13 or {});
  };
  warp_0_1_13_features = f: updateFeatures f (rec {
    bytes_0_4_11.default = true;
    futures_0_1_25.default = true;
    headers_0_2_1.default = true;
    http_0_1_15.default = true;
    hyper_0_12_24.default = true;
    log_0_4_6.default = true;
    mime_0_3_13.default = true;
    mime_guess_2_0_0_alpha_6.default = true;
    rustls_0_14_0.default = true;
    scoped_tls_0_1_2.default = true;
    serde_1_0_88.default = true;
    serde_json_1_0_38.default = true;
    serde_urlencoded_0_5_4.default = true;
    tokio_0_1_15.default = true;
    tokio_io_0_1_11.default = true;
    tokio_threadpool_0_1_11.default = true;
    tungstenite_0_6_1.default = (f.tungstenite_0_6_1.default or false);
    urlencoding_1_0_0.default = true;
    warp_0_1_13.default = (f.warp_0_1_13.default or true);
    warp_0_1_13.rustls =
      (f.warp_0_1_13.rustls or false) ||
      (f.warp_0_1_13.tls or false) ||
      (warp_0_1_13.tls or false);
  }) [ bytes_0_4_11_features futures_0_1_25_features headers_0_2_1_features http_0_1_15_features hyper_0_12_24_features log_0_4_6_features mime_0_3_13_features mime_guess_2_0_0_alpha_6_features rustls_0_14_0_features scoped_tls_0_1_2_features serde_1_0_88_features serde_json_1_0_38_features serde_urlencoded_0_5_4_features tokio_0_1_15_features tokio_io_0_1_11_features tokio_threadpool_0_1_11_features tungstenite_0_6_1_features urlencoding_1_0_0_features ];
  webpki_0_18_1 = { features?(webpki_0_18_1_features {}) }: webpki_0_18_1_ {
    dependencies = mapFeatures features ([ ring_0_13_5 untrusted_0_6_2 ]);
    features = mkFeatures (features.webpki_0_18_1 or {});
  };
  webpki_0_18_1_features = f: updateFeatures f (rec {
    ring_0_13_5.default = true;
    untrusted_0_6_2.default = true;
    webpki_0_18_1.default = (f.webpki_0_18_1.default or true);
    webpki_0_18_1.std =
      (f.webpki_0_18_1.std or false) ||
      (f.webpki_0_18_1.default or false) ||
      (webpki_0_18_1.default or false) ||
      (f.webpki_0_18_1.trust_anchor_util or false) ||
      (webpki_0_18_1.trust_anchor_util or false);
    webpki_0_18_1.trust_anchor_util =
      (f.webpki_0_18_1.trust_anchor_util or false) ||
      (f.webpki_0_18_1.default or false) ||
      (webpki_0_18_1.default or false);
  }) [ ring_0_13_5_features untrusted_0_6_2_features ];
  winapi_0_2_8 = { features?(winapi_0_2_8_features {}) }: winapi_0_2_8_ {};
  winapi_0_2_8_features = f: updateFeatures f (rec {
    winapi_0_2_8.default = (f.winapi_0_2_8.default or true);
  }) [];
  winapi_0_3_6 = { features?(winapi_0_3_6_features {}) }: winapi_0_3_6_ {
    dependencies = (if kernel == "i686-pc-windows-gnu" then mapFeatures features ([ winapi_i686_pc_windows_gnu_0_4_0 ]) else [])
      ++ (if kernel == "x86_64-pc-windows-gnu" then mapFeatures features ([ winapi_x86_64_pc_windows_gnu_0_4_0 ]) else []);
    features = mkFeatures (features.winapi_0_3_6 or {});
  };
  winapi_0_3_6_features = f: updateFeatures f (rec {
    winapi_0_3_6.default = (f.winapi_0_3_6.default or true);
    winapi_i686_pc_windows_gnu_0_4_0.default = true;
    winapi_x86_64_pc_windows_gnu_0_4_0.default = true;
  }) [ winapi_i686_pc_windows_gnu_0_4_0_features winapi_x86_64_pc_windows_gnu_0_4_0_features ];
  winapi_build_0_1_1 = { features?(winapi_build_0_1_1_features {}) }: winapi_build_0_1_1_ {};
  winapi_build_0_1_1_features = f: updateFeatures f (rec {
    winapi_build_0_1_1.default = (f.winapi_build_0_1_1.default or true);
  }) [];
  winapi_i686_pc_windows_gnu_0_4_0 = { features?(winapi_i686_pc_windows_gnu_0_4_0_features {}) }: winapi_i686_pc_windows_gnu_0_4_0_ {};
  winapi_i686_pc_windows_gnu_0_4_0_features = f: updateFeatures f (rec {
    winapi_i686_pc_windows_gnu_0_4_0.default = (f.winapi_i686_pc_windows_gnu_0_4_0.default or true);
  }) [];
  winapi_util_0_1_2 = { features?(winapi_util_0_1_2_features {}) }: winapi_util_0_1_2_ {
    dependencies = (if kernel == "windows" then mapFeatures features ([ winapi_0_3_6 ]) else []);
  };
  winapi_util_0_1_2_features = f: updateFeatures f (rec {
    winapi_0_3_6.consoleapi = true;
    winapi_0_3_6.default = true;
    winapi_0_3_6.errhandlingapi = true;
    winapi_0_3_6.fileapi = true;
    winapi_0_3_6.minwindef = true;
    winapi_0_3_6.processenv = true;
    winapi_0_3_6.std = true;
    winapi_0_3_6.winbase = true;
    winapi_0_3_6.wincon = true;
    winapi_0_3_6.winerror = true;
    winapi_0_3_6.winnt = true;
    winapi_util_0_1_2.default = (f.winapi_util_0_1_2.default or true);
  }) [ winapi_0_3_6_features ];
  winapi_x86_64_pc_windows_gnu_0_4_0 = { features?(winapi_x86_64_pc_windows_gnu_0_4_0_features {}) }: winapi_x86_64_pc_windows_gnu_0_4_0_ {};
  winapi_x86_64_pc_windows_gnu_0_4_0_features = f: updateFeatures f (rec {
    winapi_x86_64_pc_windows_gnu_0_4_0.default = (f.winapi_x86_64_pc_windows_gnu_0_4_0.default or true);
  }) [];
  wincolor_1_0_1 = { features?(wincolor_1_0_1_features {}) }: wincolor_1_0_1_ {
    dependencies = mapFeatures features ([ winapi_0_3_6 winapi_util_0_1_2 ]);
  };
  wincolor_1_0_1_features = f: updateFeatures f (rec {
    winapi_0_3_6.default = true;
    winapi_0_3_6.minwindef = true;
    winapi_0_3_6.wincon = true;
    winapi_util_0_1_2.default = true;
    wincolor_1_0_1.default = (f.wincolor_1_0_1.default or true);
  }) [ winapi_0_3_6_features winapi_util_0_1_2_features ];
  ws2_32_sys_0_2_1 = { features?(ws2_32_sys_0_2_1_features {}) }: ws2_32_sys_0_2_1_ {
    dependencies = mapFeatures features ([ winapi_0_2_8 ]);
    buildDependencies = mapFeatures features ([ winapi_build_0_1_1 ]);
  };
  ws2_32_sys_0_2_1_features = f: updateFeatures f (rec {
    winapi_0_2_8.default = true;
    winapi_build_0_1_1.default = true;
    ws2_32_sys_0_2_1.default = (f.ws2_32_sys_0_2_1.default or true);
  }) [ winapi_0_2_8_features winapi_build_0_1_1_features ];
}
